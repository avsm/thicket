<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>https://thicket.dev//feeds/multicore.xml</id><title>Multicore - Weekly Activity</title><updated>2025-09-14T00:00:00+00:00</updated><author><name>Anil Madhavapeddy</name><email>anil@recoil.org</email></author><link href="https://thicket.dev//feeds/multicore.xml" rel="self"/><link href="https://thicket.dev//groups/multicore" rel="alternate"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Multicore OCaml</subtitle><entry><id>https://thicket.dev//groups/multicore/2025/week-5</id><title>Week 5, 2025: Windows I/O reliability improvements in EIO and hash table optimizations in Picos across the multicore ecosystem</title><updated>2025-02-02T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/pull/795" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;EIO Windows I/O fixes&lt;/strong&gt;&lt;/a&gt; resolving stdin blocking and broken pipe issues that were affecting domain stability (&lt;a href="https://github.com/ocaml-multicore/eio/pull/795"&gt;ocaml-multicore/eio#795&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;EIO OCaml version upgrade&lt;/strong&gt; minimum requirement bumped from 5.1.0 to 5.2.0 enabling modern Unix bigarray functions (&lt;a href="https://github.com/ocaml-multicore/eio/commit/8f7f82d2c12076af8e9b8b365c58ebadaa963b8c"&gt;8f7f82d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Picos hash table copy function&lt;/strong&gt; added to &lt;code&gt;Picos_aux_htbl&lt;/code&gt; API for independent table duplication (&lt;a href="https://github.com/ocaml-multicore/picos/commit/9f12efe0b452aebb2fd5808a04a9a69e1fd2941d"&gt;9f12efe&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Picos performance optimizations&lt;/strong&gt; with relaxed size estimation and memory allocation improvements (&lt;a href="https://github.com/ocaml-multicore/picos/commit/4dc9fbffaec01a4f379fc4624aebab6c9f0d5b38"&gt;4dc9fbf&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/picos/commit/1291de89b7a7ea9572740f85380d75225750b852"&gt;1291de8&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Limited activity&lt;/strong&gt; across the multicore group with only 2 of 8 repositories showing commits during week 5&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/792" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Platform stability focus&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; addressing Windows-specific I/O issues that were blocking domains (&lt;a href="https://github.com/ocaml-multicore/eio/issues/792"&gt;ocaml-multicore/eio#792&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio/issues/793"&gt;ocaml-multicore/eio#793&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Infrastructure improvements&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; with hash table module enhancements and performance optimizations&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Modernization efforts&lt;/strong&gt; evident in both active repositories with OCaml 5.2+ adoption and code quality improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Platform-specific stability&lt;/strong&gt; receiving focused attention with Windows I/O issues being systematically addressed in EIO&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance-conscious development&lt;/strong&gt; approach visible in both active repositories with optimization work in Picos and efficiency improvements in EIO&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;OCaml ecosystem modernization&lt;/strong&gt; trend toward leveraging newer OCaml 5.2+ features and retiring custom C implementations&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Collaborative code review culture&lt;/strong&gt; demonstrated through multi-contributor input on implementation details and technical guidance&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-5"/><summary>Windows I/O reliability improvements in EIO and hash table optimizations in Picos across the multicore ecosystem</summary><published>2025-02-02T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-6</id><title>Week 6, 2025: Limited activity with EIO API discussions and Picos code quality improvements</title><updated>2025-02-09T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Code readability&lt;/strong&gt; improvements in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; test files using &lt;code&gt;|&gt;&lt;/code&gt; pipe operator for better flow in &lt;code&gt;test_mpscq.ml&lt;/code&gt; (&lt;a href="https://github.com/ocaml-multicore/picos/commit/1666b8c8a3bdfd34690ed2252e2ba61d9bfe5eae"&gt;1666b8c8a3bdfd34690ed2252e2ba61d9bfe5eae&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Test naming&lt;/strong&gt; consistency update in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; changing "Lock" to "Mutex" in test output for better clarity (&lt;a href="https://github.com/ocaml-multicore/picos/commit/608deecbb46a83564f4cdbff45ef5b6056078e1f"&gt;608deecbb46a83564f4cdbff45ef5b6056078e1f&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/796" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Primary activity&lt;/strong&gt;&lt;/a&gt; concentrated in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with active API discussions around buffered flow serialization in &lt;a href="https://github.com/ocaml-multicore/eio/issues/796"&gt;ocaml-multicore/eio#796&lt;/a&gt; and stream operation enhancements in &lt;a href="https://github.com/ocaml-multicore/eio/issues/790"&gt;ocaml-multicore/eio#790&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Code maintenance&lt;/strong&gt; work performed in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; with readability improvements and test consistency updates&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Repository status&lt;/strong&gt; shows most multicore repositories (domainslib, ocaml-uring, meio, saturn, eio-trace, kcas) had no recorded activity during this period&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/796" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;API safety concerns&lt;/strong&gt;&lt;/a&gt; raised by &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio/issues/796"&gt;ocaml-multicore/eio#796&lt;/a&gt; regarding &lt;code&gt;Buf_write.of_flow&lt;/code&gt; potentially reintroducing buffering mistakes where users think writes are complete before flushing&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/790" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Stream operations completeness&lt;/strong&gt;&lt;/a&gt; debate between &lt;a href="https://github.com/xavierm02"&gt;MONTILLET Xavier&lt;/a&gt; and &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio/issues/790"&gt;ocaml-multicore/eio#790&lt;/a&gt; about whether the Stream module should provide a mathematically complete set of operations vs. practical sufficiency&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/790" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Implementation semantics&lt;/strong&gt;&lt;/a&gt; discussion in &lt;a href="https://github.com/ocaml-multicore/eio/issues/790"&gt;ocaml-multicore/eio#790&lt;/a&gt; with &lt;a href="https://github.com/patricoferris"&gt;Patrick Ferris&lt;/a&gt; explaining how proposed changes would affect existing &lt;code&gt;with_flow&lt;/code&gt; behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;API design philosophy&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; emphasizing safety over convenience, with maintainers preferring designs that prevent common programming mistakes even if they require more boilerplate&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform robustness&lt;/strong&gt; efforts continuing in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with platform-specific fixes for Windows, showing commitment to multi-platform support&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Network protocol integration&lt;/strong&gt; needs driving API extensions in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt;, particularly for better buffered I/O patterns in database and network libraries&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-6"/><summary>Limited activity with EIO API discussions and Picos code quality improvements</summary><published>2025-02-09T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-7</id><title>Week 7, 2025: Picos gained a new Barrier synchronization primitive with poisoning support while other multicore repositories remained stable</title><updated>2025-02-16T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Barrier synchronization primitive&lt;/strong&gt; added to &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; &lt;code&gt;picos_std.sync&lt;/code&gt; module supporting multi-party coordination with configurable number of participants (&lt;a href="https://github.com/ocaml-multicore/picos/commit/65f36b18ead4d6e64add890dae67f9ccea2519ed"&gt;65f36b1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Poisoning mechanism&lt;/strong&gt; for barriers that safely handles cancelation by marking barriers as poisoned when operations are canceled (&lt;a href="https://github.com/ocaml-multicore/picos/commit/65f36b18ead4d6e64add890dae67f9ccea2519ed"&gt;65f36b1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Slim implementation&lt;/strong&gt; optimized for low overhead performance in most use cases (&lt;a href="https://github.com/ocaml-multicore/picos/commit/81669b6bbfebc8580ba2457c6b5213924a3f7ccc"&gt;81669b6&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Complete &lt;strong style="color: #cc6600;"&gt;API for barrier operations&lt;/strong&gt; including &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;await&lt;/code&gt;, &lt;code&gt;poison&lt;/code&gt;, and &lt;code&gt;parties&lt;/code&gt; functions with proper exception handling (&lt;a href="https://github.com/ocaml-multicore/picos/commit/65f36b18ead4d6e64add890dae67f9ccea2519ed"&gt;65f36b1&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; was the only active repository this week with implementation of a new Barrier synchronization primitive (&lt;a href="https://github.com/ocaml-multicore/picos/commit/65f36b18ead4d6e64add890dae67f9ccea2519ed"&gt;65f36b1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;All other multicore repositories (&lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/meio"&gt;ocaml-multicore/meio&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio-trace"&gt;ocaml-multicore/eio-trace&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt;) showed no activity during this period&lt;/li&gt;
&lt;li&gt;The new Barrier primitive extends &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; synchronization capabilities with comprehensive test coverage (&lt;a href="https://github.com/ocaml-multicore/picos/commit/65f36b18ead4d6e64add890dae67f9ccea2519ed"&gt;65f36b1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; was the sole contributor with development work focused on enhancing synchronization primitives (&lt;a href="https://github.com/ocaml-multicore/picos/commit/65f36b18ead4d6e64add890dae67f9ccea2519ed"&gt;65f36b1&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Focus on synchronization primitives&lt;/strong&gt; with the addition of Barrier support expanding the multicore synchronization toolkit in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/picos/commit/65f36b18ead4d6e64add890dae67f9ccea2519ed"&gt;65f36b1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Emphasis on poisoning mechanisms&lt;/strong&gt; for safe cancellation handling in concurrent scenarios (&lt;a href="https://github.com/ocaml-multicore/picos/commit/65f36b18ead4d6e64add890dae67f9ccea2519ed"&gt;65f36b1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization focus&lt;/strong&gt; with slim implementations targeting low overhead in common use cases (&lt;a href="https://github.com/ocaml-multicore/picos/commit/81669b6bbfebc8580ba2457c6b5213924a3f7ccc"&gt;81669b6&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Comprehensive testing approach&lt;/strong&gt; ensuring multi-domain safety and correctness for new concurrency primitives (&lt;a href="https://github.com/ocaml-multicore/picos/commit/65f36b18ead4d6e64add890dae67f9ccea2519ed"&gt;65f36b1&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-7"/><summary>Picos gained a new Barrier synchronization primitive with poisoning support while other multicore repositories remained stable</summary><published>2025-02-16T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-8</id><title>Week 8, 2025: Limited activity focused on Windows debugging in eio and documentation maintenance in picos</title><updated>2025-02-23T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Quiet week&lt;/strong&gt; with activity in only 2 of 8 repositories: &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/773" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Platform compatibility focus&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with continued investigation into Windows-specific test suite issues (&lt;a href="https://github.com/ocaml-multicore/eio/issues/773"&gt;ocaml-multicore/eio#773&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Maintenance work&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; with documentation and build system improvements across multiple commits&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;No activity&lt;/strong&gt; recorded in &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/meio"&gt;ocaml-multicore/meio&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio-trace"&gt;ocaml-multicore/eio-trace&lt;/a&gt;, or &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/773" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Root cause analysis&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio/issues/773"&gt;ocaml-multicore/eio#773&lt;/a&gt; where &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; guided systematic debugging methodology to isolate whether Windows stack overflow issues originated from Eio or MDX components&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Technical debugging process&lt;/strong&gt; discussion involving reduction of test content, direct MDX execution, and OCaml REPL verification to determine the issue appears to be Eio-related rather than MDX-specific&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Investigation outcome&lt;/strong&gt; indicating the problem occurs specifically when Eio dependencies are included in MDX tests, while tests run successfully without Eio dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Platform-specific testing challenges&lt;/strong&gt; highlighting ongoing Windows compatibility issues in the multicore ecosystem, particularly around test infrastructure and dependency interactions&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Focus on code quality and maintenance&lt;/strong&gt; with attention to documentation accuracy, build system optimization, and code stability improvements&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-8"/><summary>Limited activity focused on Windows debugging in eio and documentation maintenance in picos</summary><published>2025-02-23T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-9</id><title>Week 9, 2025: Security discussions in Eio and code refactoring in Picos were the primary activities this week</title><updated>2025-03-02T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Thread multiplexer refactoring&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; simplified recursive group structure by reorganizing handler definitions from recursive to standalone functions (&lt;a href="https://github.com/ocaml-multicore/picos/commit/e6eb88825edf1eb524ca5eacb902e71d47aae183"&gt;e6eb888&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Limited activity&lt;/strong&gt; across the multicore ecosystem with only 2 out of 8 repositories showing activity during week 9&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/797" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Security focus&lt;/strong&gt;&lt;/a&gt; emerged in &lt;a href="https://github.com/ocaml-multicore/eio/issues/797"&gt;ocaml-multicore/eio#797&lt;/a&gt; with discussions about io_uring backend safety and filesystem compatibility&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Code quality improvements&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; with structural refactoring of the thread multiplexer module&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community engagement&lt;/strong&gt; from both maintainers and external contributors addressing practical deployment concerns&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/797" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;io_uring security implications&lt;/strong&gt;&lt;/a&gt; discussed by core maintainers addressing Google's security report findings and potential ZFS filesystem issues causing unkillable processes in &lt;a href="https://github.com/ocaml-multicore/eio/issues/797"&gt;ocaml-multicore/eio#797&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/798" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Virtual filesystem handling&lt;/strong&gt;&lt;/a&gt; analyzed by &lt;a href="https://github.com/patricoferris"&gt;Patrick Ferris&lt;/a&gt; and &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; for robust &lt;code&gt;/proc&lt;/code&gt; file operations in &lt;a href="https://github.com/ocaml-multicore/eio/issues/798"&gt;ocaml-multicore/eio#798&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/797" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Production deployment concerns&lt;/strong&gt;&lt;/a&gt; shared by &lt;a href="https://github.com/toastal"&gt;@toastal&lt;/a&gt; regarding ZFS-related problems in real-world usage (&lt;a href="https://github.com/ocaml-multicore/eio/issues/797"&gt;ocaml-multicore/eio#797&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/797" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Security-first backend design&lt;/strong&gt;&lt;/a&gt; trend with discussions about making io_uring optional or environment-controlled to address security concerns in &lt;a href="https://github.com/ocaml-multicore/eio/issues/797"&gt;ocaml-multicore/eio#797&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/798" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Filesystem robustness focus&lt;/strong&gt;&lt;/a&gt; highlighting the need for comprehensive file operation handling across different filesystem types including virtual filesystems in &lt;a href="https://github.com/ocaml-multicore/eio/issues/798"&gt;ocaml-multicore/eio#798&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Code maintainability improvements&lt;/strong&gt; with structural refactoring efforts to simplify complex recursive patterns in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-9"/><summary>Security discussions in Eio and code refactoring in Picos were the primary activities this week</summary><published>2025-03-02T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-10</id><title>Week 10, 2025: None</title><updated>2025-03-09T00:00:00+00:00</updated><content type="html"/><link href="https://thicket.dev//groups/multicore/2025/week-10"/><summary>Activity report for multicore - Week 10, 2025</summary><published>2025-03-09T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-11</id><title>Week 11, 2025: None</title><updated>2025-03-16T00:00:00+00:00</updated><content type="html"/><link href="https://thicket.dev//groups/multicore/2025/week-11"/><summary>Activity report for multicore - Week 11, 2025</summary><published>2025-03-16T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-12</id><title>Week 12, 2025: None</title><updated>2025-03-23T00:00:00+00:00</updated><content type="html"/><link href="https://thicket.dev//groups/multicore/2025/week-12"/><summary>Activity report for multicore - Week 12, 2025</summary><published>2025-03-23T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-13</id><title>Week 13, 2025: No activity recorded across multicore repositories during week 13 of 2025.</title><updated>2025-03-30T00:00:00+00:00</updated><content type="html"/><link href="https://thicket.dev//groups/multicore/2025/week-13"/><summary>No activity recorded across multicore repositories during week 13 of 2025.</summary><published>2025-03-30T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-14</id><title>Week 14, 2025: Cross-repository dependency issues identified and resolved while testing infrastructure and socket options work progressed.</title><updated>2025-04-06T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;Enhanced &lt;strong style="color: #cc6600;"&gt;test scheduler&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; to include systhread-based scheduler validation on OCaml 5, expanding test coverage beyond existing fifo, multififo, and random schedulers (&lt;a href="https://github.com/ocaml-multicore/picos/commit/913175b19efef7510b2f74f22b129a71844b7a6a"&gt;913175b&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/128" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-repository dependency issue&lt;/strong&gt;&lt;/a&gt; discovered affecting &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; package constraints (&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/128"&gt;#128&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/saturn/issues/184"&gt;#184&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/322" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Socket options API&lt;/strong&gt;&lt;/a&gt; implementation guidance provided in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with draft PR available for new contributors (&lt;a href="https://github.com/ocaml-multicore/eio/issues/322"&gt;#322&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio/issues/575"&gt;#575&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Memory synchronization correctness&lt;/strong&gt;&lt;/a&gt; questioned in &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; work-stealing deque implementation (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183"&gt;#183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Testing infrastructure&lt;/strong&gt; enhanced in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; with systhread scheduler support (&lt;a href="https://github.com/ocaml-multicore/picos/commit/913175b19efef7510b2f74f22b129a71844b7a6a"&gt;913175b&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/meio/issues/70" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;CI configuration&lt;/strong&gt;&lt;/a&gt; updates continued in &lt;a href="https://github.com/ocaml-multicore/meio"&gt;ocaml-multicore/meio&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/meio/issues/70"&gt;#70&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/128" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Dependency chain issue&lt;/strong&gt;&lt;/a&gt; spanning &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; where &lt;a href="https://github.com/Sudha247"&gt;Sudha Parimala&lt;/a&gt; provided fix in domainslib repository to resolve Saturn packaging constraints (&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/128"&gt;ocaml-multicore/domainslib#128&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/saturn/issues/184"&gt;ocaml-multicore/saturn#184&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/128" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Coordinated release planning&lt;/strong&gt;&lt;/a&gt; between repositories with &lt;a href="https://github.com/Sudha247"&gt;Sudha Parimala&lt;/a&gt; committing to new domainslib version after related fixes are merged (&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/128"&gt;ocaml-multicore/domainslib#128&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Memory synchronization analysis&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/clef-men"&gt;@clef-men&lt;/a&gt; questioning correctness of work-stealing deque implementation regarding non-atomic tab field access in &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183"&gt;#183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCaml memory model explanation&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; covering caml_modify behavior and suggesting fence-based alternatives to atomic fields (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183"&gt;ocaml-multicore/saturn#183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13404" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCaml 5.4 atomic record fields&lt;/strong&gt;&lt;/a&gt; discussion as future solution referenced from &lt;a href="https://github.com/ocaml/ocaml/issues/13404"&gt;ocaml/ocaml#13404&lt;/a&gt; in context of Saturn synchronization improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Package dependency management&lt;/strong&gt; becoming critical focus with multiple repositories affected by opam constraint resolution issues&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Memory synchronization correctness&lt;/strong&gt; gaining attention as multicore OCaml adoption increases, requiring deeper analysis of existing concurrent data structures&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Testing infrastructure expansion&lt;/strong&gt; across scheduler implementations to ensure compatibility with OCaml 5 threading models&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-14"/><summary>Cross-repository dependency issues identified and resolved while testing infrastructure and socket options work progressed.</summary><published>2025-04-06T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-15</id><title>Week 15, 2025: Saturn 1.0 ecosystem upgrade in domainslib with version 0.5.2 release, plus networking issue resolution in eio</title><updated>2025-04-13T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/129" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Saturn 1.0 compatibility&lt;/strong&gt;&lt;/a&gt; upgrade in &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt; with updated API calls replacing &lt;code&gt;Saturn.Work_stealing_deque.M&lt;/code&gt; with &lt;code&gt;Saturn.Work_stealing_deque&lt;/code&gt; (&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/129"&gt;ocaml-multicore/domainslib#129&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/128" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Dependency constraint&lt;/strong&gt;&lt;/a&gt; fix upgrading minimum Saturn version from &lt;code&gt;&gt;= 0.4.0&lt;/code&gt; to &lt;code&gt;&gt;= 1.0.0&lt;/code&gt; to resolve opam installation conflicts (&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/128"&gt;ocaml-multicore/domainslib#128&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Updated installation instructions&lt;/strong&gt; in README.md changing recommended OCaml version from 5.1.0 to 5.3.0 (&lt;a href="https://github.com/ocaml-multicore/domainslib/commit/2a884868ff69c13ecef8efecca9ba1102ff11a7f"&gt;ocaml-multicore/domainslib@2a88486&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Limited activity&lt;/strong&gt; focused on two primary repositories: &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt; with Saturn 1.0 ecosystem upgrade and &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with networking issue resolution&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Release milestone&lt;/strong&gt; achieved with domainslib version 0.5.2 published, incorporating Saturn 1.0 compatibility and dependency fixes&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community support&lt;/strong&gt; provided through technical guidance for SCGI parser implementation challenges in eio&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Repository status&lt;/strong&gt; indicates most multicore projects (ocaml-uring, meio, eio-trace, picos, kcas) remain stable with no activity during this period&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/184" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Saturn ecosystem coordination&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt; addressing dependency management issues affecting both repositories (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/184"&gt;ocaml-multicore/saturn#184&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/domainslib/issues/129"&gt;ocaml-multicore/domainslib#129&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/184" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Package relationship clarification&lt;/strong&gt;&lt;/a&gt; provided by &lt;a href="https://github.com/Sudha247"&gt;Sudha Parimala&lt;/a&gt; distinguishing between saturn, lockfree, and saturn_lockfree packages and their respective dependency requirements (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/184"&gt;ocaml-multicore/saturn#184&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/129" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;API migration coordination&lt;/strong&gt;&lt;/a&gt; ensuring domainslib adaptation to Saturn 1.0 breaking changes with proper function name updates to &lt;code&gt;_exn&lt;/code&gt; variants (&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/129"&gt;ocaml-multicore/domainslib#129&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/799" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Buffer management patterns&lt;/strong&gt;&lt;/a&gt; discussion between &lt;a href="https://github.com/MarcCoquand"&gt;MarcC&lt;/a&gt; and &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; regarding proper use of &lt;code&gt;parse_exn&lt;/code&gt; vs direct &lt;code&gt;Read.of_flow&lt;/code&gt; calls for network parsing (&lt;a href="https://github.com/ocaml-multicore/eio/issues/799"&gt;ocaml-multicore/eio#799&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/799" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;SCGI protocol implementation&lt;/strong&gt;&lt;/a&gt; guidance covering content_length parameter handling and proper socket shutdown procedures in server contexts (&lt;a href="https://github.com/ocaml-multicore/eio/issues/799"&gt;ocaml-multicore/eio#799&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/184" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Dependency management&lt;/strong&gt;&lt;/a&gt; technical discussion on alcotest dependencies being installed unnecessarily when installing saturn, leading to cross-repository fix coordination (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/184"&gt;ocaml-multicore/saturn#184&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/129" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Saturn ecosystem maturation&lt;/strong&gt;&lt;/a&gt; demonstrated through the 1.0 API upgrade requiring coordinated updates across dependent packages like domainslib (&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/129"&gt;ocaml-multicore/domainslib#129&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/128" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Dependency management focus&lt;/strong&gt;&lt;/a&gt; with increased attention to proper version constraints and opam resolution behavior in complex multicore project dependency graphs (&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/128"&gt;ocaml-multicore/domainslib#128&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation maintenance&lt;/strong&gt; efforts to keep installation instructions current with latest OCaml versions, supporting ecosystem growth (&lt;a href="https://github.com/ocaml-multicore/domainslib/commit/2a884868ff69c13ecef8efecca9ba1102ff11a7f"&gt;ocaml-multicore/domainslib@2a88486&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-15"/><summary>Saturn 1.0 ecosystem upgrade in domainslib with version 0.5.2 release, plus networking issue resolution in eio</summary><published>2025-04-13T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-16</id><title>Week 16, 2025: No activity recorded across any multicore repositories during this period</title><updated>2025-04-20T00:00:00+00:00</updated><content type="html"/><link href="https://thicket.dev//groups/multicore/2025/week-16"/><summary>No activity recorded across any multicore repositories during this period</summary><published>2025-04-20T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-17</id><title>Week 17, 2025: New guarded case statements API in Picos and critical pool teardown bug reported in Domainslib</title><updated>2025-04-27T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;New &lt;strong style="color: #cc6600;"&gt;guarded case statements&lt;/strong&gt; API in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; with &lt;code&gt;Control.terminate_unless&lt;/code&gt; function for conditional fiber termination (&lt;a href="https://github.com/ocaml-multicore/picos/commit/56b1a02a75ee918e9e8acaeaf23aedceadea3328"&gt;56b1a02&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;Run.first_or_terminate&lt;/code&gt; function that runs actions as separate fibers and returns the first successful result or raises &lt;code&gt;Terminate&lt;/code&gt; if all actions terminate (&lt;a href="https://github.com/ocaml-multicore/picos/commit/56b1a02a75ee918e9e8acaeaf23aedceadea3328"&gt;56b1a02&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;New comprehensive &lt;strong style="color: #cc6600;"&gt;guards.ml example&lt;/strong&gt; demonstrating guarded case statements inspired by the Clerical language with 5 different guard patterns (&lt;a href="https://github.com/ocaml-multicore/picos/commit/56b1a02a75ee918e9e8acaeaf23aedceadea3328"&gt;56b1a02&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;?verbose&lt;/code&gt; flag to test scheduler enabling detailed scheduler information output during testing (&lt;a href="https://github.com/ocaml-multicore/picos/commit/3801d9e8f3c1009540938340cbd03ffecd0162ca"&gt;3801d9e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;New &lt;strong style="color: #cc6600;"&gt;fairness test&lt;/strong&gt; that measures yield distribution across 100 fibers performing 10,000 yields each, calculating mean, median, and standard deviation (&lt;a href="https://github.com/ocaml-multicore/picos/commit/3801d9e8f3c1009540938340cbd03ffecd0162ca"&gt;3801d9e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enhanced test scheduler with &lt;code&gt;?avoid_threads&lt;/code&gt; parameter to skip thread-based schedulers in tests (&lt;a href="https://github.com/ocaml-multicore/picos/commit/3801d9e8f3c1009540938340cbd03ffecd0162ca"&gt;3801d9e&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Limited activity across the multicore group with only 2 of 8 repositories showing activity during the week&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; led development with significant API enhancements by &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt; had a critical issue report regarding pool teardown functionality&lt;/li&gt;
&lt;li&gt;6 repositories (eio, ocaml-uring, meio, saturn, eio-trace, kcas) had no recorded activity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/131" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Pool teardown issue&lt;/strong&gt;&lt;/a&gt; reported by &lt;a href="https://github.com/mbarbin"&gt;Mathieu Barbin&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt; where calls to &lt;code&gt;teardown_pool&lt;/code&gt; hang indefinitely, preventing normal program termination and requiring kill -9 to stop the process (&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/131"&gt;ocaml-multicore/domainslib#131&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cooperative concurrency patterns&lt;/strong&gt; with emphasis on fiber-based computation inspired by functional programming languages like Clerical&lt;/li&gt;
&lt;li&gt;Enhanced &lt;strong style="color: #cc6600;"&gt;testing infrastructure&lt;/strong&gt; with verbose output capabilities and fairness measurements to validate scheduler behavior&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Thread avoidance&lt;/strong&gt; mechanisms in tests for more predictable behavior in concurrent scenarios&lt;/li&gt;
&lt;li&gt;Focus on &lt;strong style="color: #cc6600;"&gt;reliability improvements&lt;/strong&gt; in concurrent library cleanup operations&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-17"/><summary>New guarded case statements API in Picos and critical pool teardown bug reported in Domainslib</summary><published>2025-04-27T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-18</id><title>Week 18, 2025: Focused week with critical io_uring fork safety investigation in Eio and major scheduler performance improvements in Picos</title><updated>2025-05-04T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Heartbeat system&lt;/strong&gt; implementation for the multififo scheduler with configurable delay and rounds parameters in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/picos/commit/6cc8f508411fd472009829d85a2c56b94b12fe49"&gt;6cc8f508&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/picos/commit/31675f0b6b5771e0c805190c121638c5e4216105"&gt;31675f0b&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;New &lt;code&gt;Trigger.signaled&lt;/code&gt; API&lt;/strong&gt; providing a constant pre-signaled trigger for performance optimization in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/picos/commit/035e19ce51c23a03adfde8f8aaca50cb777fc8f9"&gt;035e19ce&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Lazy trigger allocation&lt;/strong&gt; for bundle representations to reduce memory overhead when triggers are not needed in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/picos/commit/0720c9c8b5657ef17b9a8b5702e301dd449cc183"&gt;0720c9c8&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced multififo scheduler API&lt;/strong&gt; with new &lt;code&gt;heartbeat_delay&lt;/code&gt; and &lt;code&gt;heartbeat_rounds&lt;/code&gt; parameters for configurable thread wake-up behavior in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/picos/commit/6cc8f508411fd472009829d85a2c56b94b12fe49"&gt;6cc8f508&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Two active repositories&lt;/strong&gt; out of eight in the multicore group, with &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; focusing on critical bug investigation and &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; delivering substantial performance improvements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/801" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Process safety focus&lt;/strong&gt;&lt;/a&gt; in Eio with investigation of io_uring corruption when sharing between parent and child processes after Unix.fork (&lt;a href="https://github.com/ocaml-multicore/eio/issues/801"&gt;ocaml-multicore/eio#801&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Scheduler optimization wave&lt;/strong&gt; in Picos with 16+ commits across 15 files implementing heartbeat systems, lazy allocation, and performance improvements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-repository implications&lt;/strong&gt; as Eio's io_uring fork safety issues could impact other multicore libraries that rely on process-level parallelism&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/801" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Process safety implications&lt;/strong&gt;&lt;/a&gt; across the multicore ecosystem as the io&lt;em&gt;uring fork safety issue discovered in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/801"&gt;ocaml-multicore/eio#801&lt;/a&gt;) could affect any multicore library using process-level parallelism with io&lt;/em&gt;uring&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Scheduler ecosystem development&lt;/strong&gt; with &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; improvements potentially benefiting other multicore libraries that depend on efficient fiber scheduling&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Potential integration opportunities&lt;/strong&gt; between Picos' new heartbeat system and Eio's event loop mechanisms for improved responsiveness in multicore applications&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Process isolation for io&lt;em&gt;uring&lt;/strong&gt; discussion in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; exploring whether child processes should automatically invalidate parent's uring or require explicit reinitialization, with &lt;a href="https://github.com/avsm"&gt;Anil Madhavapeddy&lt;/a&gt; suggesting pthread&lt;/em&gt;atfork handler approach (&lt;a href="https://github.com/ocaml-multicore/eio/issues/801"&gt;ocaml-multicore/eio#801&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/801" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fork compatibility&lt;/strong&gt;&lt;/a&gt; analysis by &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; noting that sharing uring resources between parent and child processes after fork is likely to fail and recommends Unix._exit for proper cleanup (&lt;a href="https://github.com/ocaml-multicore/eio/issues/801"&gt;ocaml-multicore/eio#801&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance-first development approach&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; with multiple commits targeting code size reduction and runtime efficiency improvements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Process safety awareness&lt;/strong&gt; growing across the multicore ecosystem as evidenced by the detailed investigation of io_uring fork behavior in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Scheduler specialization efforts&lt;/strong&gt; including heartbeat systems for better thread management and workload-specific optimizations in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Memory optimization focus&lt;/strong&gt; with lazy allocation patterns and reduced object overhead in critical paths across scheduler implementations&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-18"/><summary>Focused week with critical io_uring fork safety investigation in Eio and major scheduler performance improvements in Picos</summary><published>2025-05-04T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-19</id><title>Week 19, 2025: Benchmarking methodology improvements across saturn and picos repositories with Task.yield primitive maintenance in domainslib</title><updated>2025-05-11T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Benchmark enhancement for saturn queues and stacks&lt;/strong&gt; using heap-allocated blocks (&lt;code&gt;ref&lt;/code&gt; values) instead of immediate values to accurately measure write barrier costs in realistic scenarios (&lt;a href="https://github.com/ocaml-multicore/saturn/commit/2a653b676afa45159968a5b46bfbd465dc5b1d2a"&gt;saturn 2a653b676a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Queue benchmark improvements for picos&lt;/strong&gt; using heap allocated blocks (ref values) instead of immediate values across bounded queue, MPMC queue, MPSC queue, and stream benchmarks for more realistic performance measurements (&lt;a href="https://github.com/ocaml-multicore/picos/commit/74601764a32ecfccd17f226c09696323d69de6be"&gt;picos 74601764a32e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;OCaml 5.3 support&lt;/strong&gt; added to saturn benchmark Docker configuration for testing with the latest OCaml version (&lt;a href="https://github.com/ocaml-multicore/saturn/commit/98a718623255a1d53c91e65f55e85e0b4c6ad158"&gt;saturn 98a718623&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Limited activity&lt;/strong&gt; across the multicore group with only 3 of 8 repositories showing development activity during week 19&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Benchmarking focus&lt;/strong&gt; dominated the week with coordinated improvements to performance testing methodology in saturn and picos&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Task scheduling work&lt;/strong&gt; continued in domainslib with maintenance updates to the Task.yield primitive proposal&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Five repositories&lt;/strong&gt; (eio, ocaml-uring, meio, eio-trace, kcas) showed no activity during this period&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/pull/185" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Coordinated benchmarking improvements&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; implementing identical heap-allocated block methodology across both &lt;a href="https://github.com/ocaml-multicore/saturn/pull/185"&gt;ocaml-multicore/saturn#185&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/picos/commit/74601764a32ecfccd17f226c09696323d69de6be"&gt;ocaml-multicore/picos 74601764a32e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-project benchmark standardization&lt;/strong&gt; discussion involving saturn, multicore-bench, and picos repositories to ensure consistent performance testing methodology&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Write barrier testing alignment&lt;/strong&gt; across multiple OCaml concurrent data structure projects to address realistic memory allocation patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/pull/185" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Write barrier performance impact&lt;/strong&gt;&lt;/a&gt; discussion in &lt;a href="https://github.com/ocaml-multicore/saturn/pull/185"&gt;ocaml-multicore/saturn#185&lt;/a&gt; where &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; explained how immediate-value-only benchmarks led to poor real-world performance of a new queue implementation&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-repository benchmark consistency&lt;/strong&gt; considerations with &lt;a href="https://github.com/lyrm"&gt;Carine Morel&lt;/a&gt; noting aligned changes needed across saturn, multicore-bench, and picos repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Benchmark realism prioritization&lt;/strong&gt; with recognition that immediate-value-only testing produces misleading results for OCaml concurrent data structures&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-project coordination&lt;/strong&gt; on benchmarking standards becoming more systematic across the multicore ecosystem&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Write barrier cost awareness&lt;/strong&gt; increasing in data structure design and evaluation, particularly impacting queue implementation comparisons&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-19"/><summary>Benchmarking methodology improvements across saturn and picos repositories with Task.yield primitive maintenance in domainslib</summary><published>2025-05-11T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-20</id><title>Week 20, 2025: Performance optimizations in picos synchronization primitives and critical memory synchronization discussions in saturn</title><updated>2025-05-18T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced IO select wakeup logic&lt;/strong&gt; with refined phase state management in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt;, improving robustness of concurrent operations (&lt;a href="https://github.com/ocaml-multicore/picos/commit/5b91d9a00b1c09ad30fa47fbbf91b25169cb321d"&gt;5b91d9a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Semaphore-based bounded queue implementation&lt;/strong&gt; replacing condition variable approach in documentation examples, providing better performance characteristics (&lt;a href="https://github.com/ocaml-multicore/picos/commit/7ccd770044cab9305ae9e356b89912d8e0295faac"&gt;7ccd770&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Optimized bounded queue benchmark&lt;/strong&gt; avoiding broadcast operations and using signal instead for reduced contention (&lt;a href="https://github.com/ocaml-multicore/picos/commit/33ffdca1cbcd6556003af4b5338e077dc6b78e76"&gt;33ffdca&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Two repositories showed activity this week: &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; with performance improvements and &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; with technical discussions&lt;/li&gt;
&lt;li&gt;Focus on concurrency correctness and performance optimization across the synchronization primitive libraries&lt;/li&gt;
&lt;li&gt;Critical memory model discussions in saturn highlighting the importance of proper atomic operations in work-stealing data structures&lt;/li&gt;
&lt;li&gt;Six repositories (&lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/meio"&gt;ocaml-multicore/meio&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio-trace"&gt;ocaml-multicore/eio-trace&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt;) had no recorded activity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Common synchronization patterns&lt;/strong&gt; being refined across picos and saturn, with picos implementing optimized semaphore-based approaches that could influence saturn's work-stealing implementations&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Memory model expertise&lt;/strong&gt; from &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; applied to both picos performance optimizations and saturn memory synchronization discussions&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Shared focus on atomic operations&lt;/strong&gt; with picos improving signal-based operations and saturn investigating atomic field requirements for correctness&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Memory synchronization concerns&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; work-stealing deque implementation raised by &lt;a href="https://github.com/clef-men"&gt;@clef-men&lt;/a&gt;, with detailed technical analysis from &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; about OCaml's atomic memory operations (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183"&gt;ocaml-multicore/saturn#183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Race condition analysis&lt;/strong&gt;&lt;/a&gt; covering the non-atomic &lt;code&gt;tab&lt;/code&gt; field in &lt;code&gt;src/ws_deque.ml&lt;/code&gt; and potential issues where thieves might read invalid data during memory reallocation (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183"&gt;ocaml-multicore/saturn#183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Technical solutions proposed&lt;/strong&gt;&lt;/a&gt; including making the &lt;code&gt;.tab&lt;/code&gt; field atomic or adding atomic write operations like &lt;code&gt;Multicore_magic.fence&lt;/code&gt; before tab assignment (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183"&gt;ocaml-multicore/saturn#183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Commitment to investigation&lt;/strong&gt;&lt;/a&gt; from &lt;a href="https://github.com/lyrm"&gt;Carine Morel&lt;/a&gt; to further examine the synchronization concerns (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/183"&gt;ocaml-multicore/saturn#183&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance-oriented refactoring&lt;/strong&gt; across the multicore ecosystem, with emphasis on reducing contention in synchronization primitives and moving away from broadcast operations toward targeted signaling&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced concurrency robustness&lt;/strong&gt; through improved state management in IO operations and more precise phase tracking to handle edge cases in concurrent scenarios&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation by example&lt;/strong&gt; approach in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt;, updating interface documentation with practical implementations demonstrating best practices&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Proactive correctness analysis&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; with community members identifying and investigating potential memory model issues before they become problems&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-20"/><summary>Performance optimizations in picos synchronization primitives and critical memory synchronization discussions in saturn</summary><published>2025-05-18T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-21</id><title>Week 21, 2025: Process group support added to Eio and Saturn benchmarks improved for realistic performance testing</title><updated>2025-05-25T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/802" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Process group support&lt;/strong&gt;&lt;/a&gt; added to &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; Unix backends allowing child processes to be placed in specific process groups via new &lt;code&gt;?pgid&lt;/code&gt; parameter (&lt;a href="https://github.com/ocaml-multicore/eio/issues/802"&gt;ocaml-multicore/eio#802&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;setpgid&lt;/code&gt; fork action implemented for setting child process group ID, with support for creating new process groups when &lt;code&gt;pgid=0&lt;/code&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/commit/f6dac4a8be61db6bb2c30dbc56b4654fad41347f"&gt;f6dac4a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/802" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;API enhancement&lt;/strong&gt;&lt;/a&gt; to &lt;code&gt;spawn_unix&lt;/code&gt; function with optional &lt;code&gt;?pgid&lt;/code&gt; parameter across Linux and POSIX backends (&lt;a href="https://github.com/ocaml-multicore/eio/issues/802"&gt;ocaml-multicore/eio#802&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/185" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Benchmark improvements&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; - changed queue and stack performance testing to use heap-allocated blocks instead of immediate values for more realistic benchmarking (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/185"&gt;ocaml-multicore/saturn#185&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Two repositories active this week: &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; focused on process control enhancements and &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; on benchmark methodology improvements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/patricoferris"&gt;Patrick Ferris&lt;/a&gt; implemented process group functionality in Eio while &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; enhanced Saturn's benchmark realism&lt;/li&gt;
&lt;li&gt;Six repositories (domainslib, ocaml-uring, meio, eio-trace, picos, kcas) had no activity during this period&lt;/li&gt;
&lt;li&gt;Technical discussions addressed exception handling in parallel contexts and API design patterns for mutex operations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/804" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Exception trace analysis&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; where &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; explained how improper exception re-raising without &lt;code&gt;Printexc.get_raw_backtrace&lt;/code&gt; causes confusing backtraces (&lt;a href="https://github.com/ocaml-multicore/eio/issues/804"&gt;ocaml-multicore/eio#804&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/716" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;API design patterns&lt;/strong&gt;&lt;/a&gt; discussion around mutex wrapper functions, with &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; highlighting potential issues with partial application in multi-argument scenarios (&lt;a href="https://github.com/ocaml-multicore/eio/issues/716"&gt;ocaml-multicore/eio#716&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/185" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Benchmark methodology&lt;/strong&gt;&lt;/a&gt; discussion in &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; where &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; highlighted how immediate-value benchmarks can hide write barrier costs and lead to poor data structure choices in production (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/185"&gt;ocaml-multicore/saturn#185&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/803" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Process management expansion&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with systematic addition of Unix process control features like setuid/setgid (&lt;a href="https://github.com/ocaml-multicore/eio/issues/803"&gt;ocaml-multicore/eio#803&lt;/a&gt;) and process groups (&lt;a href="https://github.com/ocaml-multicore/eio/issues/802"&gt;ocaml-multicore/eio#802&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/804" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multi-domain debugging support&lt;/strong&gt;&lt;/a&gt; as developers encounter complex exception handling issues when migrating legacy codebases to Eio's parallel execution model (&lt;a href="https://github.com/ocaml-multicore/eio/issues/804"&gt;ocaml-multicore/eio#804&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/185" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Benchmark realism&lt;/strong&gt;&lt;/a&gt; as a development priority in &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt;, with emphasis on making performance tests reflect actual usage patterns rather than artificial scenarios (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/185"&gt;ocaml-multicore/saturn#185&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/saturn/issues/186" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform CI stability&lt;/strong&gt;&lt;/a&gt; improvements to ensure reliable testing across different operating systems (&lt;a href="https://github.com/ocaml-multicore/saturn/issues/186"&gt;ocaml-multicore/saturn#186&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-21"/><summary>Process group support added to Eio and Saturn benchmarks improved for realistic performance testing</summary><published>2025-05-25T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-22</id><title>Week 22, 2025: Community-driven discussions in ocaml-multicore/eio focused on fiber-local state inheritance and Fiber.any improvements.</title><updated>2025-06-01T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Single active repository&lt;/strong&gt;: Only &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; showed activity this week with community discussions and one PR&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Focus on concurrency patterns&lt;/strong&gt;: Technical discussions centered on multi-domain parallelism challenges and fiber coordination&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community engagement&lt;/strong&gt;: Active participation from both core maintainers and community members on challenging design questions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber-local state architecture&lt;/strong&gt;&lt;/a&gt; debate involving potential solutions for cross-domain state inheritance, including optional flags, default copying behavior, and wrapper domain managers (&lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OpenTelemetry integration challenges&lt;/strong&gt;&lt;/a&gt; highlighted by &lt;a href="https://github.com/ajbt200128"&gt;Austin Theriault&lt;/a&gt; regarding scope tracking across domains for distributed tracing (&lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/805" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber.any combine parameter&lt;/strong&gt;&lt;/a&gt; behavior analysis by &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; regarding prioritizing computed results over cancellation signals (&lt;a href="https://github.com/ocaml-multicore/eio/issues/805"&gt;ocaml-multicore/eio#805&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Domain-aware state management&lt;/strong&gt;&lt;/a&gt; patterns becoming increasingly important as users adopt multi-domain parallelism for legacy codebase migrations (&lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Integration library challenges&lt;/strong&gt;&lt;/a&gt; surfacing with third-party libraries like OpenTelemetry needing better cross-domain context propagation (&lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/805" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber coordination improvements&lt;/strong&gt;&lt;/a&gt; driven by real-world usage patterns where cancellation and result collection need better balance (&lt;a href="https://github.com/ocaml-multicore/eio/issues/805"&gt;ocaml-multicore/eio#805&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio/pull/806"&gt;ocaml-multicore/eio#806&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-22"/><summary>Community-driven discussions in ocaml-multicore/eio focused on fiber-local state inheritance and Fiber.any improvements.</summary><published>2025-06-01T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-23</id><title>Week 23, 2025: Community member from Semgrep inquired about Windows pipe fix release timing in EIO</title><updated>2025-06-08T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Minimal activity across the multicore ecosystem with only community engagement in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Industrial user feedback on Windows compatibility issues highlights real-world deployment concerns&lt;/li&gt;
&lt;li&gt;Seven repositories (domainslib, ocaml-uring, meio, saturn, eio-trace, picos, kcas) showed no activity this week&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;Community member from Semgrep provided feedback on Windows compatibility impact in &lt;a href="https://github.com/ocaml-multicore/eio/issues/792"&gt;ocaml-multicore/eio#792&lt;/a&gt;, demonstrating industrial adoption concerns&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;Industrial users actively monitoring multicore ecosystem developments for production deployments&lt;/li&gt;
&lt;li&gt;Windows platform compatibility remains a key concern for enterprise adoption&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-23"/><summary>Community member from Semgrep inquired about Windows pipe fix release timing in EIO</summary><published>2025-06-08T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-24</id><title>Week 24, 2025: Technical focus week with Fiber.any race condition analysis in eio and benchmark optimization work in picos and kcas</title><updated>2025-06-15T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Benchmark performance improvements&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt; through inlining of &lt;code&gt;Loc&lt;/code&gt; operations and loop unrolling in &lt;code&gt;bench_loc.ml&lt;/code&gt; (&lt;a href="https://github.com/ocaml-multicore/kcas/commit/7a83eb3d1900aeefde42a27c2af60e6d8b7b360e"&gt;7a83eb3&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Reference lock benchmark optimization&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; with inlined operations for improved performance measurement (&lt;a href="https://github.com/ocaml-multicore/picos/commit/cd68168145df9b3b78eb1db6ecaa2e6634264c05"&gt;cd68168&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/805" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Technical investigation focus&lt;/strong&gt;&lt;/a&gt; dominated the week with deep analysis of concurrent fiber behavior in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; through &lt;a href="https://github.com/ocaml-multicore/eio/issues/805"&gt;ocaml-multicore/eio#805&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/eio/pull/806"&gt;ocaml-multicore/eio#806&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization work&lt;/strong&gt; occurred across multiple repositories with benchmark improvements in both &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Limited activity&lt;/strong&gt; in most repositories with 5 out of 8 repositories showing no commits or discussions during this period&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Single contributor leadership&lt;/strong&gt; in optimization work with &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; driving kcas improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Benchmark optimization pattern&lt;/strong&gt; emerged across both &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt; with similar approaches to operation inlining and performance measurement improvements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Concurrent programming focus&lt;/strong&gt; with race condition investigation in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; potentially relevant to other multicore repositories dealing with similar concurrency challenges&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/805" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber.any race condition semantics&lt;/strong&gt;&lt;/a&gt; discussed between &lt;a href="https://github.com/adamchol"&gt;Adam Cholewiński&lt;/a&gt;, &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt;, and &lt;a href="https://github.com/wokalski"&gt;Wojtek Czekalski&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; focusing on behavior when combining results from nested concurrent operations (&lt;a href="https://github.com/ocaml-multicore/eio/issues/805"&gt;ocaml-multicore/eio#805&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/pull/806" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cancellation vs value preservation&lt;/strong&gt;&lt;/a&gt; debate examining whether computed values should be preserved even when parent operations are cancelled (&lt;a href="https://github.com/ocaml-multicore/eio/pull/806"&gt;ocaml-multicore/eio#806&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance-first development&lt;/strong&gt; approach with detailed attention to benchmark optimization and memory access patterns across &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Deep technical investigation&lt;/strong&gt; focus in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with collaborative problem-solving approach to complex concurrent programming challenges&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Project maintenance attention&lt;/strong&gt; with cleanup work happening alongside feature development in &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-24"/><summary>Technical focus week with Fiber.any race condition analysis in eio and benchmark optimization work in picos and kcas</summary><published>2025-06-15T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-25</id><title>Week 25, 2025: Activity focused exclusively on Eio with exception handling fixes and io_uring security discussions</title><updated>2025-06-22T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Single repository activity&lt;/strong&gt;: Only &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; showed activity during week 25, with all other repositories remaining quiet&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Production migration focus&lt;/strong&gt;: Activity centered on real-world deployment challenges as users migrate large legacy codebases to Eio&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Security and stability concerns&lt;/strong&gt;: Significant discussion around io_uring backend security implications and filesystem compatibility issues&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community collaboration&lt;/strong&gt;: Active debugging collaboration between maintainers and enterprise users encountering complex issues&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/797" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;io_uring security implications&lt;/strong&gt;&lt;/a&gt;: Comprehensive discussion initiated by &lt;a href="https://github.com/vch9"&gt;Valentin Chaboche&lt;/a&gt; regarding Google's security report and migration strategies from lwt to eio (&lt;a href="https://github.com/ocaml-multicore/eio/issues/797"&gt;ocaml-multicore/eio#797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/797" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Backend selection strategies&lt;/strong&gt;&lt;/a&gt;: Debate between &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt;, &lt;a href="https://github.com/avsm"&gt;Anil Madhavapeddy&lt;/a&gt;, and &lt;a href="https://github.com/toastal"&gt;@toastal&lt;/a&gt; regarding conservative default backend configuration and environment variable-based selection (&lt;a href="https://github.com/ocaml-multicore/eio/issues/797"&gt;ocaml-multicore/eio#797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openzfs/zfs/issues/16133" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;ZFS compatibility issues&lt;/strong&gt;&lt;/a&gt;: Technical discussion about io_uring fixed buffers causing system lockups on ZFS, referencing upstream issue &lt;a href="https://github.com/openzfs/zfs/issues/16133"&gt;openzfs/zfs#16133&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/797"&gt;ocaml-multicore/eio#797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/804" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Exception handling in multi-domain contexts&lt;/strong&gt;&lt;/a&gt;: Detailed debugging session addressing garbled stack traces during parallel execution in enterprise migration scenarios (&lt;a href="https://github.com/ocaml-multicore/eio/issues/804"&gt;ocaml-multicore/eio#804&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/804" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enterprise migration challenges&lt;/strong&gt;&lt;/a&gt;: Large-scale legacy codebase migrations to Eio revealing complex debugging scenarios with multi-domain parallelism (&lt;a href="https://github.com/ocaml-multicore/eio/issues/804"&gt;ocaml-multicore/eio#804&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/797" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Production deployment security focus&lt;/strong&gt;&lt;/a&gt;: Increased attention to io_uring security implications and filesystem-specific compatibility issues in production environments (&lt;a href="https://github.com/ocaml-multicore/eio/issues/797"&gt;ocaml-multicore/eio#797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/797" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Conservative default configuration approach&lt;/strong&gt;&lt;/a&gt;: Growing consensus toward environment variable-based backend selection and conservative defaults to address security and compatibility concerns (&lt;a href="https://github.com/ocaml-multicore/eio/issues/797"&gt;ocaml-multicore/eio#797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-organization collaboration&lt;/strong&gt;: Active collaboration between academic maintainers and enterprise users from organizations like Semgrep and Nomadic Labs for production deployment challenges&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-25"/><summary>Activity focused exclusively on Eio with exception handling fixes and io_uring security discussions</summary><published>2025-06-22T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-26</id><title>Week 26, 2025: Focused architectural discussion on fiber-local state inheritance across domains in Eio with multiple solution approaches explored</title><updated>2025-06-29T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Single active repository&lt;/strong&gt; with &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; being the only repository showing activity during this week&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Architecture-focused discussions&lt;/strong&gt;&lt;/a&gt; centered on fiber-local state inheritance across domains via &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community engagement&lt;/strong&gt; from domain experts and library maintainers exploring technical solutions for multi-domain concurrency patterns&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Real-world use cases&lt;/strong&gt; driving discussion with legacy codebase migration challenges and OpenTelemetry integration issues&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber-local state inheritance&lt;/strong&gt;&lt;/a&gt; debate on &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt; examining three potential approaches: exposing functions to grab and set complete fiber storage, wrapper domain managers copying specific bindings, or making fiber-local state copied by default across domains&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Legacy codebase migration challenges&lt;/strong&gt;&lt;/a&gt; shared by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; detailing the complexities of migrating from fork-based parallelism to Eio's concurrency model with shared mutable state managed through fiber-local storage in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OpenTelemetry tracing problems&lt;/strong&gt;&lt;/a&gt; described by &lt;a href="https://github.com/ajbt200128"&gt;Austin Theriault&lt;/a&gt; where trace context stored in fiber keys becomes orphaned when spans are created in new domains, breaking distributed tracing functionality in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Thread safety considerations&lt;/strong&gt;&lt;/a&gt; discussed regarding which fiber-local values should be shared across domains, with &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; suggesting marking values as safe to share rather than copying all values in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multi-domain concurrency adoption&lt;/strong&gt;&lt;/a&gt; driving need for better fiber-local state management as users migrate complex legacy codebases to Eio's concurrent model as discussed in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Third-party library integration challenges&lt;/strong&gt;&lt;/a&gt; becoming apparent as libraries like OpenTelemetry encounter limitations with current fiber-local state scoping across domain boundaries highlighted in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;API design evolution&lt;/strong&gt;&lt;/a&gt; toward more flexible fiber-local state sharing mechanisms to support both safety requirements and real-world usage patterns in concurrent applications explored in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-26"/><summary>Focused architectural discussion on fiber-local state inheritance across domains in Eio with multiple solution approaches explored</summary><published>2025-06-29T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-27</id><title>Week 27, 2025: FreeBSD support enhanced in Eio with domain coordination discussions and Saturn test compatibility addressed</title><updated>2025-07-06T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/810" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;FreeBSD platform support&lt;/strong&gt;&lt;/a&gt; enhanced in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with O&lt;em&gt;RESOLVE&lt;/em&gt;BENEATH flag detection and proper compilation flags by &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/810"&gt;ocaml-multicore/eio#810&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/809" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;POSIX error handling&lt;/strong&gt;&lt;/a&gt; improved in spawn_unix to properly wrap openat system calls with Eio error handling by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/809"&gt;ocaml-multicore/eio#809&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/810" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Error classification&lt;/strong&gt;&lt;/a&gt; expanded to handle ENOTCAPABLE errors on FreeBSD/capability-enabled systems (&lt;a href="https://github.com/ocaml-multicore/eio/issues/810"&gt;ocaml-multicore/eio#810&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/810" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;CI improvements&lt;/strong&gt;&lt;/a&gt; updated macOS and Windows CI to use latest OCaml 5 compiler versions in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/810"&gt;ocaml-multicore/eio#810&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber-local state inheritance&lt;/strong&gt;&lt;/a&gt; across domains discussed extensively by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; with input from &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; and community members in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt;, exploring thread-safe value sharing and API design options (&lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/811" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;RWLock implementation&lt;/strong&gt;&lt;/a&gt; requested by &lt;a href="https://github.com/jpx40"&gt;@jpx40&lt;/a&gt; for performance improvements beyond current Mutex implementation in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/811"&gt;ocaml-multicore/eio#811&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/791" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Domain management design&lt;/strong&gt;&lt;/a&gt; discussion concluded by &lt;a href="https://github.com/yawaramin"&gt;Yawar Amin&lt;/a&gt; regarding automatic multicore task scheduling versus manual domain manager usage in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/791"&gt;ocaml-multicore/eio#791&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform robustness&lt;/strong&gt; focus with FreeBSD support enhancements and error handling standardization across different Unix-like systems&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Domain coordination&lt;/strong&gt; architectural discussions suggesting need for better abstractions around fiber-local state sharing and domain management patterns&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization&lt;/strong&gt; requests focusing on concurrent primitives like RWLock for better multicore performance beyond basic synchronization&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Test compatibility&lt;/strong&gt; challenges emerging with newer OCaml versions requiring attention across the multicore ecosystem&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-27"/><summary>FreeBSD support enhanced in Eio with domain coordination discussions and Saturn test compatibility addressed</summary><published>2025-07-06T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-28</id><title>Week 28, 2025: Single documentation issue reported and resolved in ocaml-multicore/eio regarding code examples</title><updated>2025-07-13T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Minimal activity across the multicore group with only one repository showing activity during week 28&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; had a single documentation-related issue reported&lt;/li&gt;
&lt;li&gt;All other repositories (domainslib, ocaml-uring, meio, saturn, eio-trace, picos, kcas) had no recorded activity&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-28"/><summary>Single documentation issue reported and resolved in ocaml-multicore/eio regarding code examples</summary><published>2025-07-13T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-29</id><title>Week 29, 2025: Multicore group focused on Eio v1.3 release with cross-platform improvements and ongoing ZFS compatibility research</title><updated>2025-07-20T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/810" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;FreeBSD compatibility&lt;/strong&gt;&lt;/a&gt; improvements in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with &lt;code&gt;O_RESOLVE_BENEATH&lt;/code&gt; flag support and &lt;code&gt;-D__BSD_VISIBLE&lt;/code&gt; compilation fixes by &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/810"&gt;ocaml-multicore/eio#810&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/795" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Windows stdin handling&lt;/strong&gt;&lt;/a&gt; fixes in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; for broken-pipe scenarios and blocked domains with proper &lt;code&gt;EPIPE&lt;/code&gt; error handling by &lt;a href="https://github.com/bdodrem"&gt;Benoit&lt;/a&gt; and &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/795"&gt;ocaml-multicore/eio#795&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/809" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Error handling&lt;/strong&gt;&lt;/a&gt; improvements in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; &lt;code&gt;spawn_unix&lt;/code&gt; with proper error wrapping for &lt;code&gt;openat&lt;/code&gt; calls by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/809"&gt;ocaml-multicore/eio#809&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/787" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Connection reset handling&lt;/strong&gt;&lt;/a&gt; on close operations in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with &lt;code&gt;ECONNRESET&lt;/code&gt; errors now properly ignored on FreeBSD by &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/787"&gt;ocaml-multicore/eio#787&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/815" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Test robustness&lt;/strong&gt;&lt;/a&gt; enhancement in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with graceful handling of missing fixed buffers in &lt;code&gt;test_alloc_fixed_or_wait&lt;/code&gt; by &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/815"&gt;ocaml-multicore/eio#815&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Active development&lt;/strong&gt; concentrated in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with the successful v1.3 release featuring significant cross-platform compatibility improvements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Platform support expansion&lt;/strong&gt; with focused attention on FreeBSD and Windows-specific issues and proper system error handling across different operating systems&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Release engineering&lt;/strong&gt; activities including version updates, changelog finalization, and documentation infrastructure improvements across the Eio package suite&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform investigation&lt;/strong&gt; ongoing in &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt; regarding ZFS compatibility issues with fixed buffers and upstream fix availability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/810" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility research&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; coordinating platform-specific fixes across &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; and investigating related issues in &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/810"&gt;ocaml-multicore/eio#810&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/ocaml-uring/issues/113"&gt;ocaml-multicore/ocaml-uring#113&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Shared development expertise&lt;/strong&gt; with &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; contributing technical insights to both major active repositories during the week, ensuring consistency in approach to platform compatibility issues&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform focus&lt;/strong&gt; with systematic attention to FreeBSD and Windows platform-specific issues, proper error handling, and compatibility across different operating systems&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Infrastructure investment&lt;/strong&gt; in documentation and testing tools to improve long-term maintainability and developer experience across the multicore ecosystem&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Upstream collaboration&lt;/strong&gt; approach to resolving compatibility issues, as demonstrated with ZFS fixed buffer problems being addressed through upstream fixes rather than workarounds&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-29"/><summary>Multicore group focused on Eio v1.3 release with cross-platform improvements and ongoing ZFS compatibility research</summary><published>2025-07-20T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-30</id><title>Week 30, 2025: Quiet week with minimal maintenance activity across the multicore group repositories</title><updated>2025-07-27T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Limited activity&lt;/strong&gt; across the multicore group with only &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; showing any commits during the week&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Maintenance focus&lt;/strong&gt; on code cleanup rather than feature development&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Seven repositories&lt;/strong&gt; (&lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/meio"&gt;ocaml-multicore/meio&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio-trace"&gt;ocaml-multicore/eio-trace&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt;) had no development activity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Maintenance period&lt;/strong&gt; with focus on code hygiene rather than active development&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Platform-specific cleanup&lt;/strong&gt; in Windows support code indicates ongoing refinement of cross-platform implementations&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-30"/><summary>Quiet week with minimal maintenance activity across the multicore group repositories</summary><published>2025-07-27T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-31</id><title>Week 31, 2025: Limited activity focused solely on EIO fiber behavior improvements with ongoing discussion between core contributors</title><updated>2025-08-03T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Only &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; repository showed activity during week 31, with focused development work on fiber scheduling improvements&lt;/li&gt;
&lt;li&gt;Seven repositories (&lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/meio"&gt;ocaml-multicore/meio&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio-trace"&gt;ocaml-multicore/eio-trace&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt;) had no recorded activity&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-31"/><summary>Limited activity focused solely on EIO fiber behavior improvements with ongoing discussion between core contributors</summary><published>2025-08-03T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-32</id><title>Week 32, 2025: Multicore group activity focused entirely on eio with Windows build fixes and fiber concurrency improvements</title><updated>2025-08-10T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/806" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber.any behavior improvement&lt;/strong&gt;&lt;/a&gt; where value returns are prioritized over parent cancellation when a value is already available from one of the child fibers (&lt;a href="https://github.com/ocaml-multicore/eio/issues/806"&gt;ocaml-multicore/eio#806&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/817" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Windows build fix&lt;/strong&gt;&lt;/a&gt; by removing unused &lt;code&gt;unix_cstruct.ml&lt;/code&gt; file that was causing linking errors with unresolved symbols &lt;code&gt;eio_windows_cstruct_read&lt;/code&gt; and &lt;code&gt;eio_windows_cstruct_write&lt;/code&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/817"&gt;ocaml-multicore/eio#817&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/806" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Concentrated activity in eio repository&lt;/strong&gt;&lt;/a&gt; with 2 merged PRs addressing critical Windows compatibility and fiber behavior enhancements (&lt;a href="https://github.com/ocaml-multicore/eio/issues/806"&gt;ocaml-multicore/eio#806&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio/issues/817"&gt;ocaml-multicore/eio#817&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;No activity recorded&lt;/strong&gt; across the remaining 7 multicore repositories (domainslib, ocaml-uring, meio, saturn, eio-trace, picos, kcas) during this week&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community collaboration&lt;/strong&gt; between 3 contributors addressing both external user reports and long-term feature development&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/816" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Platform reliability focus&lt;/strong&gt;&lt;/a&gt; demonstrated by rapid response to Windows-specific build issues, showing commitment to cross-platform support in the multicore ecosystem (&lt;a href="https://github.com/ocaml-multicore/eio/issues/816"&gt;ocaml-multicore/eio#816&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio/issues/817"&gt;ocaml-multicore/eio#817&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/806" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Concurrency semantics refinement&lt;/strong&gt;&lt;/a&gt; through careful handling of cancellation edge cases in fiber operations, indicating maturation of fiber-based concurrency models (&lt;a href="https://github.com/ocaml-multicore/eio/issues/806"&gt;ocaml-multicore/eio#806&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community-driven development&lt;/strong&gt; with external user reports leading to immediate fixes, while long-term feature development continues through sustained contributor engagement&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-32"/><summary>Multicore group activity focused entirely on eio with Windows build fixes and fiber concurrency improvements</summary><published>2025-08-10T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-33</id><title>Week 33, 2025: Eio library improvements focused on Fiber.any behavior and process management features</title><updated>2025-08-17T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/806" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber.any cancellation behavior&lt;/strong&gt;&lt;/a&gt; improved in &lt;a href="https://github.com/ocaml-multicore/eio/issues/806"&gt;ocaml-multicore/eio#806&lt;/a&gt; to prioritize returning computed values over external cancellation, ensuring results are preserved when available even if parent context is cancelled&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Single active repository&lt;/strong&gt;: Only &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; had development activity during week 33&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Core library improvements&lt;/strong&gt;: Focus on fiber behavior refinements and process management capabilities&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Three key contributions&lt;/strong&gt;: Merged fiber cancellation improvements, process group support development, and fork error handling discussion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/802" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Process management improvements&lt;/strong&gt;&lt;/a&gt; with work on process groups and fork error handling indicating focus on making process operations more robust and predictable in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/802"&gt;ocaml-multicore/eio#802&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio/issues/818"&gt;ocaml-multicore/eio#818&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/806" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber behavior refinements&lt;/strong&gt;&lt;/a&gt; continuing with improvements to cancellation semantics and value handling in concurrent contexts (&lt;a href="https://github.com/ocaml-multicore/eio/issues/806"&gt;ocaml-multicore/eio#806&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-33"/><summary>Eio library improvements focused on Fiber.any behavior and process management features</summary><published>2025-08-17T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-34</id><title>Week 34, 2025: Process management and directory operations enhanced across eio and ocaml-uring with new Unix API features</title><updated>2025-08-24T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/802" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Process group management&lt;/strong&gt;&lt;/a&gt; functionality added to &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; enabling child processes in custom process groups via &lt;code&gt;setpgid&lt;/code&gt; parameter (&lt;a href="https://github.com/ocaml-multicore/eio/issues/802"&gt;ocaml-multicore/eio#802&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/803" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;User and group ID control&lt;/strong&gt;&lt;/a&gt; for child processes with new &lt;code&gt;setuid&lt;/code&gt; and &lt;code&gt;setgid&lt;/code&gt; fork actions in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; (&lt;a href="https://github.com/ocaml-multicore/eio/issues/803"&gt;ocaml-multicore/eio#803&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/ocaml-uring/issues/120" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;mkdirat API function&lt;/strong&gt;&lt;/a&gt; added to &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt; enabling asynchronous directory creation through io_uring (&lt;a href="https://github.com/ocaml-multicore/ocaml-uring/issues/120"&gt;ocaml-multicore/ocaml-uring#120&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Active development focused on &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with process management enhancements and &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt; with directory operations&lt;/li&gt;
&lt;li&gt;Six repositories (domainslib, meio, saturn, eio-trace, picos, kcas) showed no activity during this week&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/patricoferris"&gt;Patrick Ferris&lt;/a&gt; contributed across both active repositories with Unix API enhancements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/patricoferris"&gt;Patrick Ferris&lt;/a&gt; contributed Unix system API enhancements to both &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt;, indicating coordinated development of Unix integration features across the multicore ecosystem&lt;/li&gt;
&lt;li&gt;Process management work in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; complements directory operations in &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt;, both enhancing Unix system call coverage for concurrent applications&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber-local state inheritance&lt;/strong&gt;&lt;/a&gt; discussion in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; initiated by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; addressing cross-domain context preservation challenges (&lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Domain spawning behavior&lt;/strong&gt; analysis in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; discussing thread safety concerns for effect-based concurrent systems&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Third-party library integration&lt;/strong&gt;&lt;/a&gt; challenges highlighted in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt;, particularly affecting OpenTelemetry tracing across domains (&lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced Unix system call coverage&lt;/strong&gt; with focus on security-conscious process isolation through granular control over process groups, user IDs, and group IDs&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Domain-aware programming patterns&lt;/strong&gt; highlighting complexity of cross-domain state management in effect-based concurrent systems and need for systematic solutions&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Coordinated Unix API development&lt;/strong&gt; across &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt; improving system-level integration for multicore OCaml applications&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-34"/><summary>Process management and directory operations enhanced across eio and ocaml-uring with new Unix API features</summary><published>2025-08-24T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-35</id><title>Week 35, 2025: Limited activity focused on io_uring concurrency debugging and Eio tracing integration work</title><updated>2025-08-31T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Activity was concentrated in two repositories: &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/meio"&gt;ocaml-multicore/meio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; had intensive debugging of io_uring-related system call interruption affecting parallel stdout operations (&lt;a href="https://github.com/ocaml-multicore/eio/issues/788"&gt;ocaml-multicore/eio#788&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/meio"&gt;ocaml-multicore/meio&lt;/a&gt; saw continued development on Eio tracing events integration (&lt;a href="https://github.com/ocaml-multicore/meio/pull/71"&gt;ocaml-multicore/meio#71&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Six repositories showed no activity: &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio-trace"&gt;ocaml-multicore/eio-trace&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt;, and &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;The io&lt;em&gt;uring debugging work in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; identified potential need for io&lt;/em&gt;uring setup flags support in &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt; library as a workaround for the kernel-level concurrency issue (&lt;a href="https://github.com/ocaml-multicore/eio/issues/788"&gt;ocaml-multicore/eio#788&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The tracing work in &lt;a href="https://github.com/ocaml-multicore/meio"&gt;ocaml-multicore/meio&lt;/a&gt; depends on eio&gt;=0.14 runtime event types, showing integration between the Eio ecosystem components (&lt;a href="https://github.com/ocaml-multicore/meio/pull/71"&gt;ocaml-multicore/meio#71&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/788" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Complex io_uring concurrency issue&lt;/strong&gt;&lt;/a&gt; investigation involving &lt;a href="https://github.com/wildfield"&gt;Wildfield&lt;/a&gt;, &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt;, and &lt;a href="https://github.com/patricoferris"&gt;Patrick Ferris&lt;/a&gt; analyzing "Interrupted system call" errors in parallel stdout operations (&lt;a href="https://github.com/ocaml-multicore/eio/issues/788"&gt;ocaml-multicore/eio#788&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/788" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Root cause analysis&lt;/strong&gt;&lt;/a&gt; traced the issue to liburing behavior with concurrent WRITEV operations across multiple domains, with detailed uring trace analysis and bpftrace debugging tools (&lt;a href="https://github.com/ocaml-multicore/eio/issues/788"&gt;ocaml-multicore/eio#788&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/788" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Proposed solution&lt;/strong&gt;&lt;/a&gt; discussion around adding io_uring setup flags support to address the kernel-level issue (&lt;a href="https://github.com/ocaml-multicore/eio/issues/788"&gt;ocaml-multicore/eio#788&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Low activity period&lt;/strong&gt; with most repositories showing no activity during this week across the multicore ecosystem&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Focus on stability and debugging&lt;/strong&gt; rather than new feature development, with detailed investigation of concurrency issues in the io_uring layer&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-repository dependencies&lt;/strong&gt; becoming apparent as debugging reveals potential need for library enhancements in &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt; to support &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; use cases&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-35"/><summary>Limited activity focused on io_uring concurrency debugging and Eio tracing integration work</summary><published>2025-08-31T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-36</id><title>Week 36, 2025: Process security enhancements and io_uring improvements across Eio ecosystem with setuid/setgid, Setup_flags, and Nix support</title><updated>2025-09-07T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/803" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Process security controls&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; with setuid and setgid fork actions for privilege dropping and user/group ID management (&lt;a href="https://github.com/ocaml-multicore/eio/issues/803"&gt;ocaml-multicore/eio#803&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Setup&lt;em&gt;flags module&lt;/strong&gt; in &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt; providing comprehensive io&lt;/em&gt;uring configuration options including single&lt;em&gt;issuer, defer&lt;/em&gt;taskrun, and coop_taskrun flags (&lt;a href="https://github.com/ocaml-multicore/ocaml-uring/issues/122"&gt;ocaml-multicore/ocaml-uring#122&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/ocaml-uring/issues/120" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;mkdirat system call&lt;/strong&gt;&lt;/a&gt; support added to ocaml-uring for asynchronous directory creation operations (&lt;a href="https://github.com/ocaml-multicore/ocaml-uring/issues/120"&gt;ocaml-multicore/ocaml-uring#120&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio-trace/issues/45" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Nix flake support&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio-trace"&gt;ocaml-multicore/eio-trace&lt;/a&gt; enabling direct execution with &lt;code&gt;nix run github:ocaml-multicore/eio-trace&lt;/code&gt; (&lt;a href="https://github.com/ocaml-multicore/eio-trace/issues/45"&gt;ocaml-multicore/eio-trace#45&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Three active repositories&lt;/strong&gt; contributed new features and improvements: &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt;, and &lt;a href="https://github.com/ocaml-multicore/eio-trace"&gt;ocaml-multicore/eio-trace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Process security focus&lt;/strong&gt; with implementation of setuid/setgid fork actions for better privilege management in spawned processes&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;io_uring ecosystem enhancements&lt;/strong&gt; including performance optimization flags and expanded system call coverage&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Development tooling improvements&lt;/strong&gt; with Nix ecosystem integration and build system cleanup&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-project collaboration&lt;/strong&gt; on debugging "Interrupted system call" issues affecting concurrent I/O operations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/ocaml-uring/issues/122" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Eio-uring integration&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/ocaml-multicore/ocaml-uring/issues/122"&gt;ocaml-multicore/ocaml-uring#122&lt;/a&gt; Setup_flags addressing performance issues referenced in &lt;a href="https://github.com/ocaml-multicore/eio/issues/788"&gt;ocaml-multicore/eio#788&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Shared debugging effort&lt;/strong&gt; between &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; and &lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt; investigating EINTR handling in uring system calls&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Common contributor coordination&lt;/strong&gt; with &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; working across eio, ocaml-uring, and eio-trace repositories, and &lt;a href="https://github.com/patricoferris"&gt;Patrick Ferris&lt;/a&gt; contributing to both eio and ocaml-uring&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/803" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Security-focused development&lt;/strong&gt;&lt;/a&gt; with emphasis on process privilege management and secure process spawning mechanisms (&lt;a href="https://github.com/ocaml-multicore/eio/issues/803"&gt;ocaml-multicore/eio#803&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/ocaml-uring/issues/122" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization initiatives&lt;/strong&gt;&lt;/a&gt; targeting io_uring backend efficiency through configuration flags and system call expansion (&lt;a href="https://github.com/ocaml-multicore/ocaml-uring/issues/122"&gt;ocaml-multicore/ocaml-uring#122&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio-trace/issues/45" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform tooling integration&lt;/strong&gt;&lt;/a&gt; with Nix ecosystem support improving developer experience and distribution methods (&lt;a href="https://github.com/ocaml-multicore/eio-trace/issues/45"&gt;ocaml-multicore/eio-trace#45&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Collaborative debugging approach&lt;/strong&gt; with coordinated investigation of system-level issues spanning multiple repositories and upstream projects&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-36"/><summary>Process security enhancements and io_uring improvements across Eio ecosystem with setuid/setgid, Setup_flags, and Nix support</summary><published>2025-09-07T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/multicore/2025/week-37</id><title>Week 37, 2025: Fiber-local state inheritance discussion in Eio and ThreadSanitizer data race issue reported in domainslib affecting production usage</title><updated>2025-09-14T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Active technical discussion in &lt;a href="https://github.com/ocaml-multicore/eio"&gt;ocaml-multicore/eio&lt;/a&gt; regarding fiber-local state inheritance across domain boundaries via &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Critical ThreadSanitizer data race violation reported in &lt;a href="https://github.com/ocaml-multicore/domainslib"&gt;ocaml-multicore/domainslib&lt;/a&gt; affecting all programs using work-stealing pools via &lt;a href="https://github.com/ocaml-multicore/domainslib/issues/132"&gt;ocaml-multicore/domainslib#132&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Six repositories (&lt;a href="https://github.com/ocaml-multicore/ocaml-uring"&gt;ocaml-multicore/ocaml-uring&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/meio"&gt;ocaml-multicore/meio&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/eio-trace"&gt;ocaml-multicore/eio-trace&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/picos"&gt;ocaml-multicore/picos&lt;/a&gt;, &lt;a href="https://github.com/ocaml-multicore/kcas"&gt;ocaml-multicore/kcas&lt;/a&gt;) had no activity this week&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;ThreadSanitizer issue in &lt;a href="https://github.com/ocaml-multicore/domainslib/issues/132"&gt;ocaml-multicore/domainslib#132&lt;/a&gt; traces back to &lt;a href="https://github.com/ocaml-multicore/saturn"&gt;ocaml-multicore/saturn&lt;/a&gt; work-stealing deque implementation, referencing previous unresolved issue &lt;a href="https://github.com/ocaml-multicore/saturn/issues/39"&gt;ocaml-multicore/saturn#39&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fiber-local state discussion in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt; has implications for &lt;a href="https://github.com/ocaml-multicore/eio-trace"&gt;ocaml-multicore/eio-trace&lt;/a&gt; and other tracing libraries that depend on context preservation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fiber-local state inheritance&lt;/strong&gt;&lt;/a&gt; debate in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt; with &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; providing detailed migration context from Semgrep's transition from fork-based to fiber-based concurrency&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OpenTelemetry integration challenges&lt;/strong&gt;&lt;/a&gt; raised by &lt;a href="https://github.com/ajbt200128"&gt;Austin Theriault&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt; showing how distributed tracing breaks when spans lose parent context across domain boundaries&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;API design proposals&lt;/strong&gt;&lt;/a&gt; from &lt;a href="https://github.com/talex5"&gt;Thomas Leonard&lt;/a&gt; in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt; suggesting thread-safe sharing mechanisms and custom domain manager wrappers with backward compatibility considerations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Production migration challenges&lt;/strong&gt;&lt;/a&gt; emerging as teams like Semgrep adopt Eio for large-scale applications, revealing gaps in cross-domain state management via &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Third-party library integration&lt;/strong&gt;&lt;/a&gt; issues becoming apparent with libraries like OpenTelemetry requiring consistent context across domain boundaries via &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/domainslib/issues/132" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;ThreadSanitizer compatibility&lt;/strong&gt;&lt;/a&gt; concerns highlighted in &lt;a href="https://github.com/ocaml-multicore/domainslib/issues/132"&gt;ocaml-multicore/domainslib#132&lt;/a&gt; suggesting need for formal verification and testing infrastructure improvements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml-multicore/eio/issues/807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;API design discussion&lt;/strong&gt;&lt;/a&gt; trending toward optional thread-safe sharing mechanisms rather than breaking changes, with focus on backward compatibility in &lt;a href="https://github.com/ocaml-multicore/eio/issues/807"&gt;ocaml-multicore/eio#807&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/multicore/2025/week-37"/><summary>Fiber-local state inheritance discussion in Eio and ThreadSanitizer data race issue reported in domainslib affecting production usage</summary><published>2025-09-14T00:00:00+00:00</published></entry></feed>