<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>https://thicket.dev//feeds/core.xml</id><title>OCaml Core - Weekly Activity</title><updated>2025-09-14T00:00:00+00:00</updated><author><name>Anil Madhavapeddy</name><email>anil@recoil.org</email></author><link href="https://thicket.dev//feeds/core.xml" rel="self"/><link href="https://thicket.dev//groups/core" rel="alternate"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Core OCaml language, compiler, and essential tooling</subtitle><entry><id>https://thicket.dev//groups/core/2025/week-5</id><title>Week 5, 2025: OCaml Language Committee formally established while compiler gained structured diagnostics and Flambda optimizations</title><updated>2025-02-02T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCaml Language Committee establishment&lt;/strong&gt;&lt;/a&gt; with comprehensive governance documentation including member roles, decision-making processes, and community interaction guidelines (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13766" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Structured diagnostics framework&lt;/strong&gt;&lt;/a&gt; introduced to enable machine-readable compiler diagnostics with JSON schema support, addressing tool integration challenges (&lt;a href="https://github.com/ocaml/ocaml/issues/13766"&gt;ocaml/ocaml#13766&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Flambda optimization&lt;/strong&gt; for unboxing static catch parameters with enhanced value kind propagation, improving performance for pattern matching and exception handling (&lt;a href="https://github.com/ocaml/ocaml/commit/8fe740dd1c5b4d5496a9b0f9ed38755036ed13a9"&gt;8fe740dd1c5b&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13767" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Seq module documentation&lt;/strong&gt;&lt;/a&gt; improvements describing termination behavior for functions with infinite sequences, clarifying that functions like &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;for_all&lt;/code&gt;, &lt;code&gt;exists&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt; may not terminate (&lt;a href="https://github.com/ocaml/ocaml/issues/13767"&gt;ocaml/ocaml#13767&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Governance milestone&lt;/strong&gt;&lt;/a&gt; achieved with formal establishment of the OCaml Language Committee, providing structured decision-making processes for language evolution (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13766" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Compiler tooling advancement&lt;/strong&gt;&lt;/a&gt; through structured diagnostics framework enabling better IDE and developer tool integration with machine-readable output (&lt;a href="https://github.com/ocaml/ocaml/issues/13766"&gt;ocaml/ocaml#13766&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization progress&lt;/strong&gt; with Flambda improvements for static catch parameter unboxing and enhanced middle-end optimizations (&lt;a href="https://github.com/ocaml/ocaml/commit/8fe740dd1c5b4d5496a9b0f9ed38755036ed13a9"&gt;8fe740dd1c5b&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community collaboration&lt;/strong&gt; involving multiple stakeholders from academic and industrial sectors in both governance establishment and technical development&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Coordinated governance leadership&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; serving as both Language Committee chair in &lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt; and leading structured diagnostics development in &lt;a href="https://github.com/ocaml/ocaml/issues/13766"&gt;ocaml/ocaml#13766&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform announcement planning&lt;/strong&gt;&lt;/a&gt; between Language Committee formation and compiler development communities, ensuring coordinated communication for governance changes (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Industrial stakeholder involvement&lt;/strong&gt; with representatives from Jane Street, LexiFi, and Tarides participating in both governance discussions and technical development across repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Committee scope clarification&lt;/strong&gt;&lt;/a&gt; discussion led by &lt;a href="https://github.com/jberdine"&gt;Josh Berdine&lt;/a&gt; regarding compiler flags and CLI interface changes being within committee purview, resulting in documentation updates (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Community support confirmation&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; and &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; expressing strong support for the committee as a solution to stalled proposals and consensus challenges (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Implementation timeline discussion&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; and &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; regarding committee launch coordination and cross-platform announcements (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Governance formalization&lt;/strong&gt;&lt;/a&gt; trend with establishment of structured committee-based decision making for language evolution, moving beyond informal developer meetings and adopting proven models from the Haskell/GHC ecosystem (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13766" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Tooling integration focus&lt;/strong&gt;&lt;/a&gt; with structured diagnostics enabling better IDE and developer tool support, representing a shift toward improving the developer experience through machine-readable compiler output (&lt;a href="https://github.com/ocaml/ocaml/issues/13766"&gt;ocaml/ocaml#13766&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Industrial involvement in governance&lt;/strong&gt;&lt;/a&gt; with significant representation from commercial users (Jane Street, LexiFi, Tarides) in committee formation, indicating industry investment in language direction (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13767" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Documentation precision emphasis&lt;/strong&gt;&lt;/a&gt; with clearer specifications about function behavior on infinite data structures, improving API clarity for developers (&lt;a href="https://github.com/ocaml/ocaml/issues/13767"&gt;ocaml/ocaml#13767&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-5"/><summary>OCaml Language Committee formally established while compiler gained structured diagnostics and Flambda optimizations</summary><published>2025-02-02T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-6</id><title>Week 6, 2025: Major week featuring immutable arrays implementation and OCaml Language Committee formation with community governance structure.</title><updated>2025-02-09T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13097" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Immutable arrays module&lt;/strong&gt;&lt;/a&gt; provides comprehensive API for immutable array operations including creation, access, iteration, and functional operations like map/fold (&lt;a href="https://github.com/ocaml/ocaml/issues/13097"&gt;ocaml/ocaml#13097&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13753" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Stdlib.phys_equal function&lt;/strong&gt;&lt;/a&gt; added as explicit alternative to &lt;code&gt;==&lt;/code&gt; operator for physical equality testing with improved documentation (&lt;a href="https://github.com/ocaml/ocaml/issues/13753"&gt;ocaml/ocaml#13753&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Sys.io&lt;em&gt;buffer&lt;/em&gt;size constant&lt;/strong&gt; exposes the size of internal C buffers used by runtime system and unix library for IO operations (&lt;a href="https://github.com/ocaml/ocaml/issues/13589"&gt;ocaml/ocaml#13589&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13764" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Keywords flag support&lt;/strong&gt;&lt;/a&gt; added to ocamldep and ocamlprof tools mirroring the &lt;code&gt;--keywords&lt;/code&gt; functionality from ocamlc/ocamlopt (&lt;a href="https://github.com/ocaml/ocaml/issues/13764"&gt;ocaml/ocaml#13764&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13779"&gt;ocaml/ocaml#13779&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13776" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Nanosleep threading improvements&lt;/strong&gt;&lt;/a&gt; for systhreads tick thread when nanosleep is available on the platform (&lt;a href="https://github.com/ocaml/ocaml/issues/13776"&gt;ocaml/ocaml#13776&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13735" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Assembly directives detection&lt;/strong&gt;&lt;/a&gt; with configure-based detection of &lt;code&gt;.size&lt;/code&gt;, &lt;code&gt;.type&lt;/code&gt; directives and &lt;code&gt;.note.GNU-stack&lt;/code&gt; section support (&lt;a href="https://github.com/ocaml/ocaml/issues/13735"&gt;ocaml/ocaml#13735&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13736" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Major GC pacing fix&lt;/strong&gt;&lt;/a&gt; resolving bug triggered by synchronous collections that affected GC timing (&lt;a href="https://github.com/ocaml/ocaml/issues/13736"&gt;ocaml/ocaml#13736&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13782" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type.Id performance improvement&lt;/strong&gt;&lt;/a&gt; using &lt;code&gt;[%extension_constructor]&lt;/code&gt; instead of Obj.Extension&lt;em&gt;constructor.of&lt;/em&gt;val for better type safety (&lt;a href="https://github.com/ocaml/ocaml/issues/13782"&gt;ocaml/ocaml#13782&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13786" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Unicode error message formatting&lt;/strong&gt;&lt;/a&gt; improvement respecting Unicode notation standards in error output (&lt;a href="https://github.com/ocaml/ocaml/issues/13786"&gt;ocaml/ocaml#13786&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13775" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Ocamltest line number accuracy&lt;/strong&gt;&lt;/a&gt; fix for multiline comments and strings in test output (&lt;a href="https://github.com/ocaml/ocaml/issues/13775"&gt;ocaml/ocaml#13775&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13769" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Dynlink error string escaping&lt;/strong&gt;&lt;/a&gt; fix addressing potential issues with special characters in error messages (&lt;a href="https://github.com/ocaml/ocaml/issues/13769"&gt;ocaml/ocaml#13769&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13097" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language implementation progress&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; delivering immutable arrays module, standard library enhancements, and multiple runtime improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/13097"&gt;ocaml/ocaml#13097&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Governance structure establishment&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; formalizing the OCaml Language Committee to provide structured decision-making for language evolution (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Core development team collaboration&lt;/strong&gt; between compiler implementation work and governance framework creation, establishing foundation for future language evolution decisions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13791" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility focus&lt;/strong&gt;&lt;/a&gt; with Windows build improvements, WSL compilation investigation, and assembly directive detection across multiple operating systems (&lt;a href="https://github.com/ocaml/ocaml/issues/13791"&gt;ocaml/ocaml#13791&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/discussions/11953"&gt;ocaml/ocaml#11953&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Governance and implementation alignment&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; establishing language committee structure in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; while simultaneously contributing to compiler development discussions in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Review coordination&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/octachron"&gt;@octachron&lt;/a&gt; serving both as committee chair for governance framework and active reviewer for compiler feature development across repositories (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Community consensus building&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; and &lt;a href="https://github.com/nojb"&gt;Nicolás Ojeda Bär&lt;/a&gt; contributing to governance discussions while maintaining active involvement in compiler development and build system improvements (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13791"&gt;ocaml/ocaml#13791&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language evolution coordination&lt;/strong&gt;&lt;/a&gt; establishing structured decision-making process for future RFC proposals that affect compiler implementation, bridging governance framework with technical development (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language Committee scope boundaries&lt;/strong&gt;&lt;/a&gt; debated by &lt;a href="https://github.com/jberdine"&gt;Josh Berdine&lt;/a&gt; regarding compiler flags inclusion in committee purview, clarifying that command-line interface changes may warrant consideration for language proposals (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Windows Subsystem for Linux compilation&lt;/strong&gt; investigation by &lt;a href="https://github.com/MisterDA"&gt;Antonin Décimo&lt;/a&gt; exploring OCaml compilation under WSL using MSVC64 and mingw-w64, documenting specific challenges with executable resolution and preprocessor handling (&lt;a href="https://github.com/ocaml/ocaml/discussions/11953"&gt;ocaml/ocaml#11953&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Community approval process&lt;/strong&gt;&lt;/a&gt; clarified by &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; confirming committee formation readiness without requiring formal GitHub approvals, emphasizing consensus-building over formal voting mechanisms (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Consensus mechanism benefits&lt;/strong&gt;&lt;/a&gt; highlighted by contributors as solution to stalled proposals lacking clear resolution paths, with committee providing structured decision-making when community discussion reaches impasse (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13097" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Immutable data structure expansion&lt;/strong&gt;&lt;/a&gt; with addition of immutable arrays indicating potential broader adoption of immutable collection types in standard library and ecosystem development (&lt;a href="https://github.com/ocaml/ocaml/issues/13097"&gt;ocaml/ocaml#13097&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Governance formalization&lt;/strong&gt;&lt;/a&gt; following successful GHC Steering Committee model for complex technical consensus-building, establishing structured committee approach to language evolution decisions (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13753" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;API modernization efforts&lt;/strong&gt;&lt;/a&gt; including explicit function names for previously operator-only functionality like phys_equal, improving code readability and documentation clarity (&lt;a href="https://github.com/ocaml/ocaml/issues/13753"&gt;ocaml/ocaml#13753&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13735" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform build robustness&lt;/strong&gt;&lt;/a&gt; with configure-based feature detection, improved Windows CI infrastructure, and WSL compatibility investigation addressing diverse deployment environments (&lt;a href="https://github.com/ocaml/ocaml/issues/13735"&gt;ocaml/ocaml#13735&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13791"&gt;ocaml/ocaml#13791&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13764" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Developer tooling consistency&lt;/strong&gt;&lt;/a&gt; ensuring feature parity across compilation and analysis tools, improving overall developer experience across the toolchain (&lt;a href="https://github.com/ocaml/ocaml/issues/13764"&gt;ocaml/ocaml#13764&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13779"&gt;ocaml/ocaml#13779&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Community representation emphasis&lt;/strong&gt;&lt;/a&gt; through diverse committee composition representing developers, educators, industrial users, researchers, and tooling developers for broad perspective inclusion (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-6"/><summary>Major week featuring immutable arrays implementation and OCaml Language Committee formation with community governance structure.</summary><published>2025-02-09T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-7</id><title>Week 7, 2025: Major labeled tuples language feature and OCaml Language Committee establishment formalize language evolution governance</title><updated>2025-02-16T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13498" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Labeled tuples&lt;/strong&gt;&lt;/a&gt; syntax added to the language allowing optional labels on tuple fields for improved code clarity (&lt;a href="https://github.com/ocaml/ocaml/issues/13498"&gt;ocaml/ocaml#13498&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/12871" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;New Pqueue module&lt;/strong&gt;&lt;/a&gt; added to stdlib implementing priority queues with min/max heap operations and polymorphic variants (&lt;a href="https://github.com/ocaml/ocaml/issues/12871"&gt;ocaml/ocaml#12871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13760" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;String.edit_distance&lt;/strong&gt;&lt;/a&gt; and &lt;strong style="color: #cc6600;"&gt;String.spellcheck&lt;/strong&gt; functions for computing edit distance and finding spelling corrections (&lt;a href="https://github.com/ocaml/ocaml/issues/13760"&gt;ocaml/ocaml#13760&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Either.get&lt;em&gt;left&lt;/strong&gt; and &lt;strong style="color: #cc6600;"&gt;Either.get&lt;/em&gt;right&lt;/strong&gt; functions for extracting values from Either types with exceptions on mismatch (&lt;a href="https://github.com/ocaml/ocaml/issues/13768"&gt;ocaml/ocaml#13768&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Uchar.utf&lt;em&gt;8&lt;/em&gt;decode&lt;em&gt;length&lt;/em&gt;of&lt;em&gt;byte&lt;/strong&gt; and &lt;strong style="color: #cc6600;"&gt;Uchar.max&lt;/em&gt;utf&lt;em&gt;8&lt;/em&gt;decode_length&lt;/strong&gt; functions for UTF-8 byte length analysis (&lt;a href="https://github.com/ocaml/ocaml/issues/13796"&gt;ocaml/ocaml#13796&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCaml Language Committee documentation&lt;/strong&gt;&lt;/a&gt; added with comprehensive governance framework, member list, and decision-making processes for language and stdlib proposals (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Major language evolution&lt;/strong&gt; with labeled tuples representing the most significant syntax addition, complemented by formal governance establishment through the OCaml Language Committee&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Comprehensive stdlib expansion&lt;/strong&gt; including priority queues, string processing utilities, UTF-8 functions, and improved Either type support across multiple practical domains&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance and reliability improvements&lt;/strong&gt; with software prefetching enabled for ARM64, s390x, PPC64 and RiscV architectures, plus enhanced build system reliability&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Governance modernization&lt;/strong&gt;&lt;/a&gt; through formation of 9-member Language Committee following GHC model to address consensus challenges in language evolution (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13795" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Committee documentation coordination&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; adding Language Committee information to &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13795"&gt;ocaml/ocaml#13795&lt;/a&gt;) and &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; establishing the committee in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Governance framework linkage&lt;/strong&gt; with plans to cross-reference committee documentation across both repositories for better contributor awareness of language proposal processes&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Decision-making process alignment&lt;/strong&gt; establishing clear boundaries between RFC governance and compiler implementation details, affecting future work coordination between repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Committee scope clarification&lt;/strong&gt;&lt;/a&gt; regarding compiler flags and user interface boundaries, with &lt;a href="https://github.com/jberdine"&gt;Josh Berdine&lt;/a&gt; raising concerns about command-line interface inclusion in Language Committee purview (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Community support confirmation&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; and &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; expressing support for addressing stalled proposals and reaching consensus through formal structure (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Implementation timeline discussion&lt;/strong&gt;&lt;/a&gt; with committee officially launching after document approval and announcement plans across multiple community channels (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Language expressiveness focus&lt;/strong&gt; with labeled tuples representing a move toward more self-documenting code similar to labeled function arguments, enhancing readability without breaking compatibility&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Formal governance adoption&lt;/strong&gt;&lt;/a&gt; following GHC Committee model to address consensus challenges in OCaml language and stdlib evolution, establishing structured decision-making processes (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13582" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization across architectures&lt;/strong&gt;&lt;/a&gt; with software prefetching and GC improvements targeting ARM64, s390x, PPC64 and RiscV platforms for broader hardware support (&lt;a href="https://github.com/ocaml/ocaml/issues/13582"&gt;ocaml/ocaml#13582&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Stdlib API practical expansion&lt;/strong&gt; continuing with utility functions for string processing, priority queues, and better Either type support addressing real-world development needs&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform reliability&lt;/strong&gt; improvements with enhanced Windows support validation and simplified cross-compiler builds for better developer experience&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-7"/><summary>Major labeled tuples language feature and OCaml Language Committee establishment formalize language evolution governance</summary><published>2025-02-16T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-8</id><title>Week 8, 2025: Standard library expansion and RFC discussions focused on debugging improvements and language expressiveness</title><updated>2025-02-23T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13569" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Format.format_text function&lt;/strong&gt;&lt;/a&gt; for automatically adding break hints to format string literals, replacing spaces and newlines with appropriate formatting directives (&lt;a href="https://github.com/ocaml/ocaml/issues/13569"&gt;ocaml/ocaml#13569&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Runtime&lt;em&gt;events.Timestamp.get&lt;/em&gt;current&lt;/strong&gt; function providing access to current nanosecond-precision timestamps for runtime event monitoring (&lt;a href="https://github.com/ocaml/ocaml/issues/13785"&gt;ocaml/ocaml#13785&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13807" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;ARM64 unaligned memory access&lt;/strong&gt;&lt;/a&gt; support improving performance on ARM64 platforms (&lt;a href="https://github.com/ocaml/ocaml/issues/13807"&gt;ocaml/ocaml#13807&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13578" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Windows random seed improvement&lt;/strong&gt;&lt;/a&gt; using OS CSPRNG to seed Stdlib.Random generator for better security (&lt;a href="https://github.com/ocaml/ocaml/issues/13578"&gt;ocaml/ocaml#13578&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13302" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Longident location storage&lt;/strong&gt;&lt;/a&gt; improvements providing more precise error locations for module paths (&lt;a href="https://github.com/ocaml/ocaml/issues/13302"&gt;ocaml/ocaml#13302&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13813" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Spellchecking hint improvements&lt;/strong&gt;&lt;/a&gt; preserving module context in suggestions, so &lt;code&gt;Fun.protact&lt;/code&gt; suggests &lt;code&gt;Fun.protect&lt;/code&gt; instead of just &lt;code&gt;protect&lt;/code&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13813"&gt;ocaml/ocaml#13813&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13569" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Standard library modernization&lt;/strong&gt;&lt;/a&gt; with new utility functions like Format.format&lt;em&gt;text and Runtime&lt;/em&gt;events timestamp access by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; and &lt;a href="https://github.com/scrooloose"&gt;@scrooloose&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13569"&gt;ocaml/ocaml#13569&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13785"&gt;ocaml/ocaml#13785&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13806" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type system enhancements&lt;/strong&gt;&lt;/a&gt; with polymorphic parameters support and first-class module improvements by &lt;a href="https://github.com/voodoos"&gt;Ulysse&lt;/a&gt; and &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13806"&gt;ocaml/ocaml#13806&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13809"&gt;ocaml/ocaml#13809&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13578" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform robustness&lt;/strong&gt;&lt;/a&gt; improvements for Windows random seeding and ARM64 unaligned access by &lt;a href="https://github.com/MisterDA"&gt;Antonin Décimo&lt;/a&gt; and &lt;a href="https://github.com/matthewelse"&gt;Matthew Else&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13578"&gt;ocaml/ocaml#13578&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13807"&gt;ocaml/ocaml#13807&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language feature proposals&lt;/strong&gt;&lt;/a&gt; including implicit source positions RFC for better debugging support by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Debugging and error reporting alignment&lt;/strong&gt;&lt;/a&gt; between the implicit source positions RFC (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;) and compiler improvements to error message locations (&lt;a href="https://github.com/ocaml/ocaml/issues/13302"&gt;ocaml/ocaml#13302&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13813"&gt;ocaml/ocaml#13813&lt;/a&gt;), showing coordinated effort to improve developer experience&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/43" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type system evolution&lt;/strong&gt;&lt;/a&gt; with RFC discussions on module system extensions (&lt;a href="https://github.com/ocaml/RFCs/issues/43"&gt;ocaml/RFCs#43&lt;/a&gt;) complementing active compiler work on polymorphic parameters and first-class modules (&lt;a href="https://github.com/ocaml/ocaml/issues/13806"&gt;ocaml/ocaml#13806&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13809"&gt;ocaml/ocaml#13809&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13825" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;POSIX signals expansion&lt;/strong&gt;&lt;/a&gt; request by &lt;a href="https://github.com/za3k"&gt;Zachary Vance&lt;/a&gt; for adding missing signals like SIGWINCH to the standard library enum, with extensive discussion about signal numbering portability and API design (&lt;a href="https://github.com/ocaml/ocaml/issues/13825"&gt;ocaml/ocaml#13825&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;BUILD&lt;em&gt;PATH&lt;/em&gt;PREFIX_MAP limitations&lt;/strong&gt; ongoing discussion about improving absolute path handling for more reproducible builds, highlighted by &lt;a href="https://github.com/dbuenzli"&gt;Daniel Bünzli&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/8665"&gt;ocaml/ocaml#8665&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Implicit source positions RFC&lt;/strong&gt;&lt;/a&gt; design discussion focusing on type representations and performance considerations, with &lt;a href="https://github.com/dbuenzli"&gt;Daniel Bünzli&lt;/a&gt; questioning storage costs and &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; advocating for flexible type support (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/43" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Include functor syntax debate&lt;/strong&gt;&lt;/a&gt; examining the distinction between functor applications in structures versus signatures, with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; proposing GADT-based alternatives for parametrized signatures (&lt;a href="https://github.com/ocaml/RFCs/issues/43"&gt;ocaml/RFCs#43&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced debugging and developer experience&lt;/strong&gt;&lt;/a&gt; through language features like implicit source positions RFC (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;) and compiler improvements to error reporting (&lt;a href="https://github.com/ocaml/ocaml/issues/13302"&gt;ocaml/ocaml#13302&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13813"&gt;ocaml/ocaml#13813&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13806" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type system expressiveness expansion&lt;/strong&gt;&lt;/a&gt; through polymorphic parameters (&lt;a href="https://github.com/ocaml/ocaml/issues/13806"&gt;ocaml/ocaml#13806&lt;/a&gt;) and better module type handling (&lt;a href="https://github.com/ocaml/ocaml/issues/13809"&gt;ocaml/ocaml#13809&lt;/a&gt;), continuing toward more flexible type abstractions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13578" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform robustness focus&lt;/strong&gt;&lt;/a&gt; with Windows security improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/13578"&gt;ocaml/ocaml#13578&lt;/a&gt;) and ARM64 performance enhancements (&lt;a href="https://github.com/ocaml/ocaml/issues/13807"&gt;ocaml/ocaml#13807&lt;/a&gt;), showing commitment to platform diversity&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13569" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Standard library API modernization&lt;/strong&gt;&lt;/a&gt; with new utility functions for formatting (&lt;a href="https://github.com/ocaml/ocaml/issues/13569"&gt;ocaml/ocaml#13569&lt;/a&gt;) and runtime monitoring (&lt;a href="https://github.com/ocaml/ocaml/issues/13785"&gt;ocaml/ocaml#13785&lt;/a&gt;), emphasizing developer productivity improvements&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-8"/><summary>Standard library expansion and RFC discussions focused on debugging improvements and language expressiveness</summary><published>2025-02-23T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-9</id><title>Week 9, 2025: Runtime fixes and compiler improvements in ocaml/ocaml with detailed design discussion for implicit source positions RFC</title><updated>2025-03-02T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;Fixed &lt;a href="https://github.com/ocaml/ocaml/issues/13819" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;field initialization bug&lt;/strong&gt;&lt;/a&gt; in runtime events subsystem preventing potential crashes during event handling (&lt;a href="https://github.com/ocaml/ocaml/issues/13819"&gt;ocaml/ocaml#13819&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &lt;a href="https://github.com/ocaml/ocaml/issues/13823" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;warning output&lt;/strong&gt;&lt;/a&gt; when thread naming operations fail, improving debugging for threading issues across platforms (&lt;a href="https://github.com/ocaml/ocaml/issues/13823"&gt;ocaml/ocaml#13823&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enhanced &lt;a href="https://github.com/ocaml/ocaml/issues/13817" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;spellcheck hint alignment&lt;/strong&gt;&lt;/a&gt; in error messages to improve readability and user experience (&lt;a href="https://github.com/ocaml/ocaml/issues/13817"&gt;ocaml/ocaml#13817&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Optimized &lt;a href="https://github.com/ocaml/ocaml/issues/13827" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;ephemeron marking&lt;/strong&gt;&lt;/a&gt; to avoid re-marking ephemerons with trivial data, improving garbage collection performance (&lt;a href="https://github.com/ocaml/ocaml/issues/13827"&gt;ocaml/ocaml#13827&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &lt;a href="https://github.com/ocaml/ocaml/issues/13814" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;unused type declaration warning&lt;/strong&gt;&lt;/a&gt; for patterns like &lt;code&gt;t as 'a&lt;/code&gt; where the type variable is not used elsewhere (&lt;a href="https://github.com/ocaml/ocaml/issues/13814"&gt;ocaml/ocaml#13814&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;a href="https://github.com/ocaml/ocaml/issues/13816" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;TSan test stability&lt;/strong&gt;&lt;/a&gt; by skipping native debugger tests when ThreadSanitizer is enabled (&lt;a href="https://github.com/ocaml/ocaml/issues/13816"&gt;ocaml/ocaml#13816&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13819" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime stability improvements&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with fixes for runtime events and thread naming operations (&lt;a href="https://github.com/ocaml/ocaml/issues/13819"&gt;ocaml/ocaml#13819&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13823"&gt;ocaml/ocaml#13823&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13817" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Compiler error message enhancements&lt;/strong&gt;&lt;/a&gt; improving developer experience through better spellcheck alignment and warning systems (&lt;a href="https://github.com/ocaml/ocaml/issues/13817"&gt;ocaml/ocaml#13817&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13814"&gt;ocaml/ocaml#13814&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13827" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimizations&lt;/strong&gt;&lt;/a&gt; in garbage collection with ephemeron marking improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/13827"&gt;ocaml/ocaml#13827&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language design discussion&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; with detailed technical analysis of implicit source positions feature (&lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13816" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Test infrastructure maintenance&lt;/strong&gt;&lt;/a&gt; addressing ThreadSanitizer compatibility and CI reliability (&lt;a href="https://github.com/ocaml/ocaml/issues/13816"&gt;ocaml/ocaml#13816&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13840"&gt;ocaml/ocaml#13840&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language feature coordination&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt; implicit source positions discussion and potential implementation in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Jane Street collaboration&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; providing industrial usage statistics to inform RFC design decisions affecting upstream OCaml (&lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Core team involvement&lt;/strong&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; contributing to both compiler improvements in ocaml/ocaml and RFC design analysis in ocaml/RFCs&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance impact analysis&lt;/strong&gt; discussion in RFC process considering real-world deployment constraints that would affect main compiler implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13825" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Signal handling enhancement proposals&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/13825"&gt;ocaml/ocaml#13825&lt;/a&gt; discussing addition of missing POSIX signals like &lt;code&gt;SIGWINCH&lt;/code&gt; with detailed platform compatibility analysis by &lt;a href="https://github.com/tmcgilchrist"&gt;Tim McGilchrist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13123" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Memory regression investigation&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/13123"&gt;ocaml/ocaml#13123&lt;/a&gt; examining garbage collection behavior changes between OCaml 4.14.2 and 5.1.1, with &lt;a href="https://github.com/toots"&gt;Romain Beauxis&lt;/a&gt; reporting significant memory footprint increases&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13739" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Parallel GC stability concerns&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/13739"&gt;ocaml/ocaml#13739&lt;/a&gt; about &lt;code&gt;Gc.compact&lt;/code&gt; causing segfaults and deadlocks in multicore environments, with detailed debugging by &lt;a href="https://github.com/jmid"&gt;Jan Midtgaard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Memory footprint analysis&lt;/strong&gt;&lt;/a&gt; requested in &lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt; by &lt;a href="https://github.com/dbuenzli"&gt;Daniel Bünzli&lt;/a&gt; to quantify real-world costs of different position representations in Jane Street's executables&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;API design convergence&lt;/strong&gt;&lt;/a&gt; discussion led by &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; seeking consensus on whether to support both position types or focus on a single abstract interface (&lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13819" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime system hardening&lt;/strong&gt;&lt;/a&gt; with multiple commits addressing crash scenarios and improving error handling in threading and garbage collection subsystems (&lt;a href="https://github.com/ocaml/ocaml/issues/13819"&gt;ocaml/ocaml#13819&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13823"&gt;ocaml/ocaml#13823&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13817" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Developer experience focus&lt;/strong&gt;&lt;/a&gt; through improved error messages, better warning systems, and enhanced diagnostic output for common programming issues (&lt;a href="https://github.com/ocaml/ocaml/issues/13817"&gt;ocaml/ocaml#13817&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13814"&gt;ocaml/ocaml#13814&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance-driven design approach&lt;/strong&gt;&lt;/a&gt; with emphasis on quantifying real-world costs before making API decisions in language features (&lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Industrial usage influence&lt;/strong&gt;&lt;/a&gt; where Jane Street's large-scale deployment (65+ million lines of OCaml) significantly impacts upstream design decisions and RFC discussions (&lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13123" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore stability work&lt;/strong&gt;&lt;/a&gt; with ongoing investigations into garbage collection and threading issues affecting production workloads (&lt;a href="https://github.com/ocaml/ocaml/issues/13123"&gt;ocaml/ocaml#13123&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13739"&gt;ocaml/ocaml#13739&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-9"/><summary>Runtime fixes and compiler improvements in ocaml/ocaml with detailed design discussion for implicit source positions RFC</summary><published>2025-03-02T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-10</id><title>Week 10, 2025: Runtime safety fixes and compiler improvements in ocaml/ocaml while include functor RFC continues design discussions</title><updated>2025-03-09T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;Fixed &lt;strong style="color: #cc6600;"&gt;root safety issue&lt;/strong&gt; in &lt;code&gt;caml_register_named_value&lt;/code&gt; runtime function to prevent crashes during concurrent access (&lt;a href="https://github.com/ocaml/ocaml/commit/addec6564b1246b9d03ac33fd866aeacda5837d8"&gt;ocaml/ocaml commit addec65&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enhanced &lt;strong style="color: #cc6600;"&gt;spellchecking error messages&lt;/strong&gt; with improved alignment between error locations and hints for better readability (&lt;a href="https://github.com/ocaml/ocaml/commit/c67b1830597e84b5c48f08ff340d592f7cdb95a0"&gt;ocaml/ocaml commit c67b183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;strong style="color: #cc6600;"&gt;untypeast/pprintast bug&lt;/strong&gt; for value bindings with polymorphic type annotations affecting compiler debugging tools (&lt;a href="https://github.com/ocaml/ocaml/commit/5a4e4bb99bf4622120be76b52acc56d19b542c85"&gt;ocaml/ocaml commit 5a4e4bb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &lt;strong style="color: #cc6600;"&gt;&lt;code&gt;-dtypedtree&lt;/code&gt; location printing&lt;/strong&gt; for 'extra' nodes to improve compiler debugging output (&lt;a href="https://github.com/ocaml/ocaml/commit/672b91bbc9ec58d1fa279369490bb452bf2a4e75"&gt;ocaml/ocaml commit 672b91b&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exposed &lt;strong style="color: #cc6600;"&gt;&lt;code&gt;Printast.pattern&lt;/code&gt;&lt;/strong&gt; function for enhanced debugging capabilities (&lt;a href="https://github.com/ocaml/ocaml/commit/5fe9ecc09c3b233ff12a6c4cc7e25b12c9f2b6f7"&gt;ocaml/ocaml commit 5fe9ecc&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &lt;strong style="color: #cc6600;"&gt;dune support for iarray&lt;/strong&gt; placeholder functionality (&lt;a href="https://github.com/ocaml/ocaml/commit/41ace2f0cf3a0509a026db3ab79bf6b2da630837"&gt;ocaml/ocaml commit 41ace2f&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;&lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; focused on runtime stability with critical safety fixes and developer experience improvements through better error messaging and debugging tools&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; continued intensive design discussions on the &lt;code&gt;include functor&lt;/code&gt; proposal with detailed technical analysis of expansion semantics (&lt;a href="https://github.com/ocaml/RFCs/issues/43"&gt;ocaml/RFCs#43&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Strong participation from core OCaml team members including &lt;a href="https://github.com/ccasin"&gt;Chris Casinghino&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt;, and &lt;a href="https://github.com/fpottier"&gt;François Pottier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Performance investigation efforts addressing OCaml 5 migration challenges with hashcons behavior analysis (&lt;a href="https://github.com/ocaml/ocaml/issues/13849"&gt;ocaml/ocaml#13849&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;&lt;a href="https://github.com/ccasin"&gt;Chris Casinghino&lt;/a&gt;&lt;/strong&gt; contributed to both repositories: implementing compiler debugging improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; while authoring and refining the &lt;code&gt;include functor&lt;/code&gt; RFC in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;&lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;&lt;/strong&gt; provided documentation improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; and participated in detailed technical analysis of the &lt;code&gt;include functor&lt;/code&gt; proposal in &lt;a href="https://github.com/ocaml/RFCs/issues/43"&gt;ocaml/RFCs#43&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Core team members maintained consistent focus on language design and implementation quality across both core language development and future feature planning&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/43" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Include functor expansion semantics&lt;/strong&gt;&lt;/a&gt;: &lt;a href="https://github.com/fpottier"&gt;François Pottier&lt;/a&gt; requested explicit explanation of how &lt;code&gt;include functor&lt;/code&gt; in structures expands to existing language constructs, questioning whether it's "just sugar" (&lt;a href="https://github.com/ocaml/RFCs/issues/43"&gt;ocaml/RFCs#43&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13849" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Hashcons performance analysis&lt;/strong&gt;&lt;/a&gt; where investigators identified that repeated terms with identical hashes but different equality cause linear complexity degradation in OCaml 5's weak table implementation (&lt;a href="https://github.com/ocaml/ocaml/issues/13849"&gt;ocaml/ocaml#13849&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13825" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Signal type abstraction debate&lt;/strong&gt;&lt;/a&gt; examining whether to make signal types opaque versus maintaining backward compatibility, with proposals for &lt;code&gt;Sys.signal_of_int&lt;/code&gt; and string conversion functions (&lt;a href="https://github.com/ocaml/ocaml/issues/13825"&gt;ocaml/ocaml#13825&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/43" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Signature versus structure behavior&lt;/strong&gt;&lt;/a&gt;: &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; expressed concerns about the naturality of &lt;code&gt;include functor&lt;/code&gt; in signatures compared to structures, arguing that signature-returning functors might be more expressive (&lt;a href="https://github.com/ocaml/RFCs/issues/43"&gt;ocaml/RFCs#43&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Runtime safety emphasis&lt;/strong&gt; with multiple fixes targeting thread safety and memory management issues in core runtime functions across &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Developer experience improvements&lt;/strong&gt; through enhanced error message formatting, better compiler debugging output, and expanded documentation in the core language implementation&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Language design rigor&lt;/strong&gt; demonstrated in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; discussions with detailed semantic analysis and expansion examples for proposed features&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance investigation workflows&lt;/strong&gt; for complex OCaml 5 migration scenarios, particularly around weak reference and hashcons behavior affecting real-world projects&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-10"/><summary>Runtime safety fixes and compiler improvements in ocaml/ocaml while include functor RFC continues design discussions</summary><published>2025-03-09T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-11</id><title>Week 11, 2025: OCaml 5 performance optimization efforts and language feature design discussions dominated development activity</title><updated>2025-03-16T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;New &lt;a href="https://github.com/ocaml/ocaml/issues/13820" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;-i-variance command-line option&lt;/strong&gt;&lt;/a&gt; prints variance information for every type parameter, helping developers understand covariance and contravariance relationships (&lt;a href="https://github.com/ocaml/ocaml/issues/13820"&gt;ocaml/ocaml#13820&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13820" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Bivariance syntax support&lt;/strong&gt;&lt;/a&gt; with &lt;code&gt;+-&lt;/code&gt; and &lt;code&gt;-+&lt;/code&gt; notation for type parameters that are both covariant and contravariant, improving expressiveness in type definitions (&lt;a href="https://github.com/ocaml/ocaml/issues/13820"&gt;ocaml/ocaml#13820&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enhanced &lt;strong style="color: #cc6600;"&gt;CMT file indexing&lt;/strong&gt; to include all path components in compilation metadata, improving IDE support and code navigation tools (&lt;a href="https://github.com/ocaml/ocaml/commit/314018bba1c34688c650d26f5778a445ea04cdd8"&gt;ocaml/ocaml commit 314018b&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Core OCaml development&lt;/strong&gt; focused on performance optimization and developer experience improvements across compiler tooling and language features&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Language design discussions&lt;/strong&gt; centered on implicit source positions RFC with detailed technical debate on API design and performance implications&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance regression investigations&lt;/strong&gt; targeting OCaml 5 GC behavior and memory overhead issues affecting production deployments&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation and accessibility improvements&lt;/strong&gt; including PDF manual typography updates and cross-device readability considerations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language feature standardization&lt;/strong&gt;&lt;/a&gt; effort between &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; RFC discussions (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;) and &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; implementation work, with industry partners providing production testing feedback&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization coordination&lt;/strong&gt;&lt;/a&gt; where OCaml 5 runtime issues discussed in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13849"&gt;ocaml/ocaml#13849&lt;/a&gt;) inform RFC design considerations for performance-conscious language features&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13871" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;PDF manual typography improvements&lt;/strong&gt;&lt;/a&gt; initiated by &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; presenting three font options (Palladio, Schoolbook, Utopia) for better PDF readability, with community feedback favoring Utopia for overall readability (&lt;a href="https://github.com/ocaml/ocaml/issues/13871"&gt;ocaml/ocaml#13871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Implicit source positions RFC&lt;/strong&gt;&lt;/a&gt; design discussions by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; with detailed technical debate on performance implications and API representation choices (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization&lt;/strong&gt;&lt;/a&gt; debate between &lt;a href="https://github.com/dbuenzli"&gt;Daniel Bünzli&lt;/a&gt; and &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; regarding memory footprint and runtime costs of different location representation approaches (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Jane Street implementation&lt;/strong&gt;&lt;/a&gt; experience shared by &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; covering practical usage patterns across 65+ million lines of OCaml code and technical debt considerations (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCaml 5 performance optimization efforts&lt;/strong&gt;&lt;/a&gt; with multiple real-world projects (Semgrep, EasyCrypt) reporting performance regressions, prompting investigation into GC pacing and weak table behavior improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13849"&gt;ocaml/ocaml#13849&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Industry-academia collaboration&lt;/strong&gt;&lt;/a&gt; between Jane Street and OCaml core developers to standardize production-tested language features, with &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; representing industry experience (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13820" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced developer tooling&lt;/strong&gt;&lt;/a&gt; through improved variance inspection capabilities (&lt;a href="https://github.com/ocaml/ocaml/issues/13820"&gt;ocaml/ocaml#13820&lt;/a&gt;) and better CMT file indexing for IDE integration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance-conscious language design&lt;/strong&gt;&lt;/a&gt; emphasizing measurement and optimization of memory and runtime characteristics before feature adoption, driven by &lt;a href="https://github.com/dbuenzli"&gt;Daniel Bünzli&lt;/a&gt;'s advocacy for empirical evaluation (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-11"/><summary>OCaml 5 performance optimization efforts and language feature design discussions dominated development activity</summary><published>2025-03-16T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-12</id><title>Week 12, 2025: Major compiler improvements with new Dynarray features, lazy value fixes, and active RFC discussions on implicit source positions</title><updated>2025-03-23T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13885" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Dynarray API expansion&lt;/strong&gt;&lt;/a&gt; with &lt;code&gt;exists2&lt;/code&gt; and &lt;code&gt;for_all2&lt;/code&gt; functions for two-argument predicates by &lt;a href="https://github.com/hirrolot"&gt;@hirrolot&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13885"&gt;ocaml/ocaml#13885&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13864" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Float.Array.fill performance optimization&lt;/strong&gt;&lt;/a&gt; with &lt;code&gt;@noalloc&lt;/code&gt; attribute and inlining improvements by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13864"&gt;ocaml/ocaml#13864&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;New &lt;code&gt;-i-variance&lt;/code&gt; compiler option&lt;/strong&gt; to print variance of type parameters with support for &lt;code&gt;+-&lt;/code&gt; and &lt;code&gt;-+&lt;/code&gt; syntax (&lt;a href="https://github.com/ocaml/ocaml/issues/13820"&gt;ocaml/ocaml#13820&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13867" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Lazy value recursion bug fix&lt;/strong&gt;&lt;/a&gt; addressing incorrect handling of recursive bindings by Guillaume Bury and &lt;a href="https://github.com/lthls"&gt;Vincent Laviron&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13867"&gt;ocaml/ocaml#13867&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13875" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Mutable variable access improvements&lt;/strong&gt;&lt;/a&gt; in Cmm with dedicated &lt;code&gt;Cvar_mut&lt;/code&gt; constructor to prevent coeffects bugs by &lt;a href="https://github.com/lthls"&gt;Vincent Laviron&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13875"&gt;ocaml/ocaml#13875&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13878"&gt;ocaml/ocaml#13878&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13880" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Object stat counters atomicity&lt;/strong&gt;&lt;/a&gt; fix for thread safety by Dimitris Mostrous (&lt;a href="https://github.com/ocaml/ocaml/issues/13880"&gt;ocaml/ocaml#13880&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13879" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Windows test infrastructure&lt;/strong&gt;&lt;/a&gt; improvements with new ocamltest actions for better cross-platform testing by &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13879"&gt;ocaml/ocaml#13879&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13877" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCamldoc LaTeX escaping&lt;/strong&gt;&lt;/a&gt; with new &lt;code&gt;-latex-escape-underscore&lt;/code&gt; flag for underscore handling compatibility by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13877"&gt;ocaml/ocaml#13877&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Major compiler development&lt;/strong&gt; with significant internal improvements to type system, standard library, and cross-platform support across &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Active RFC discussions&lt;/strong&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; focusing on implicit source positions design with detailed technical analysis by core team and Jane Street&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization focus&lt;/strong&gt; targeting specific bottlenecks in Float.Array operations and GC behavior tuning for production environments&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform reliability improvements&lt;/strong&gt; particularly enhancing Windows development support and testing infrastructure&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Type system enhancements&lt;/strong&gt; including package type refactoring, error message improvements, and new variance printing capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13864" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Compiler-RFC alignment&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; contributing both to &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; Float.Array optimizations (&lt;a href="https://github.com/ocaml/ocaml/issues/13864"&gt;ocaml/ocaml#13864&lt;/a&gt;) and &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; design discussions on GADT-based position representations (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Jane Street involvement&lt;/strong&gt;&lt;/a&gt; spanning both repositories with &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; analyzing migration feasibility for RFC changes while Jane Street's existing codebase has 5,827 &lt;code&gt;[%call_pos]&lt;/code&gt; usages that would be affected (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Position API implications&lt;/strong&gt; where RFC discussions on implicit source positions could influence future compiler development and standard library design decisions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13871" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Documentation coordination&lt;/strong&gt;&lt;/a&gt; with manual typography improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13871"&gt;ocaml/ocaml#13871&lt;/a&gt;) potentially informing RFC presentation standards&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCaml 5 GC performance&lt;/strong&gt;&lt;/a&gt; discussion initiated by &lt;a href="https://github.com/nmote"&gt;Nat Mote&lt;/a&gt; from Semgrep reporting memory overhead issues requiring &lt;code&gt;space_overhead=40&lt;/code&gt; tuning for production use (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13871" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;PDF manual typography&lt;/strong&gt;&lt;/a&gt; feedback collection by &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; featuring font comparisons (Palladio, Schoolbook, Utopia) with community input on readability preferences (&lt;a href="https://github.com/ocaml/ocaml/issues/13871"&gt;ocaml/ocaml#13871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Position vs location representation&lt;/strong&gt;&lt;/a&gt; debate examining whether to use single positions (&lt;code&gt;Lexing.position&lt;/code&gt;) or location spans with start/end positions in RFC discussions (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance and space optimization&lt;/strong&gt;&lt;/a&gt; analysis of executable size impact and runtime costs of different position representation choices for implicit source positions (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;GADT-based design proposal&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; to support multiple position types through compile-time type selection (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Type system modernization&lt;/strong&gt; with package type refactoring and improved error messages indicating ongoing efforts to enhance developer experience across compiler internals&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization focus&lt;/strong&gt; targeting specific bottlenecks like Float.Array operations and GC behavior tuning, with production feedback from companies like Semgrep driving improvements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform reliability&lt;/strong&gt; improvements particularly for Windows development environments, ensuring OCaml works consistently across all major platforms&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Internal code quality&lt;/strong&gt; enhancements with better invariant checking, atomic operations for thread safety, and more robust evaluation order handling&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation and tooling&lt;/strong&gt; improvements including manual presentation enhancements and developer-facing compiler options like variance printing&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;RFC process maturity&lt;/strong&gt; with detailed technical discussions involving both core maintainers and major OCaml users like Jane Street, ensuring changes meet real-world requirements&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-12"/><summary>Major compiler improvements with new Dynarray features, lazy value fixes, and active RFC discussions on implicit source positions</summary><published>2025-03-23T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-13</id><title>Week 13, 2025: Documentation improvements and RFC submission for relocatable OCaml with continued work on core language features</title><updated>2025-03-30T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13908" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Documentation fix&lt;/strong&gt;&lt;/a&gt; for &lt;code&gt;Array.compare&lt;/code&gt; and related functions clarifying that they use &lt;strong style="color: #cc6600;"&gt;shortlex ordering&lt;/strong&gt; (shorter arrays are smaller, equal-sized arrays compared lexicographically) rather than pure lexicographic ordering (&lt;a href="https://github.com/ocaml/ocaml/issues/13908"&gt;ocaml/ocaml#13908&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13912" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fibonacci examples correction&lt;/strong&gt;&lt;/a&gt; in parallelism manual fixing mathematical definition from &lt;code&gt;if n &lt; 2 then 1&lt;/code&gt; to &lt;code&gt;if n &lt; 2 then n&lt;/code&gt; for proper Fibonacci sequence (&lt;a href="https://github.com/ocaml/ocaml/issues/13912"&gt;ocaml/ocaml#13912&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;BUILD&lt;em&gt;PATH&lt;/em&gt;PREFIX_MAP support&lt;/strong&gt; in cmt files now applies to &lt;code&gt;Sys.argv.(0)&lt;/code&gt; for reproducible builds (&lt;a href="https://github.com/ocaml/ocaml/issues/13828"&gt;ocaml/ocaml#13828&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13906" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore test tagging&lt;/strong&gt;&lt;/a&gt; with new &lt;code&gt;multicore&lt;/code&gt; tag in ocamltest for tests requiring multiple cores (&lt;a href="https://github.com/ocaml/ocaml/issues/13906"&gt;ocaml/ocaml#13906&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13884" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module indexing improvements&lt;/strong&gt;&lt;/a&gt; in constructor and label paths for better IDE support (&lt;a href="https://github.com/ocaml/ocaml/issues/13884"&gt;ocaml/ocaml#13884&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13895" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;C++ header compatibility&lt;/strong&gt;&lt;/a&gt; fix for &lt;code&gt;_Atomic&lt;/code&gt; declarations to avoid compilation errors with C++ (&lt;a href="https://github.com/ocaml/ocaml/issues/13895"&gt;ocaml/ocaml#13895&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13882" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Evaluation order consistency&lt;/strong&gt;&lt;/a&gt; for generic applications when using non-flambda native compiler (&lt;a href="https://github.com/ocaml/ocaml/issues/13882"&gt;ocaml/ocaml#13882&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Main repository&lt;/strong&gt; (&lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;) focused on documentation quality improvements and build system reliability enhancements while maintaining ongoing development of core language features&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;RFC repository&lt;/strong&gt; (&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;) saw submission of significant infrastructure proposal for relocatable OCaml compiler distributions addressing deployment challenges&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation emphasis&lt;/strong&gt; across both repositories with manual improvements in main repository and clear technical documentation in RFC submission receiving positive community feedback&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Infrastructure improvements&lt;/strong&gt; spanning reproducible builds in main repository and proposed distribution portability in RFC repository&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Infrastructure coordination&lt;/strong&gt; between main repository build system improvements and RFC proposal for relocatable distributions addressing complementary aspects of OCaml deployment challenges&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation standards&lt;/strong&gt; alignment with quality improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; manual content and RFC submission in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; receiving praise for clarity and accessibility&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community engagement&lt;/strong&gt; patterns showing coordinated feedback mechanisms across both repositories with RFC discussions informing main repository development priorities&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/gperdutoutmoncodetipe"&gt;@gperdutoutmoncodetipe&lt;/a&gt; seeking &lt;a href="https://github.com/ocaml/ocaml/issues/7628" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;contributor guidance&lt;/strong&gt;&lt;/a&gt; for newcomers looking to modify OCaml source code, with interest in issue &lt;a href="https://github.com/ocaml/ocaml/issues/7628"&gt;ocaml/ocaml#7628&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13901"&gt;ocaml/ocaml#13901&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DemiMarie"&gt;Demi Marie Obenour&lt;/a&gt; discussing &lt;a href="https://github.com/ocaml/ocaml/issues/11957" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Menhir .messages file&lt;/strong&gt;&lt;/a&gt; addition for better syntax error messages in the parser (&lt;a href="https://github.com/ocaml/ocaml/issues/11957"&gt;ocaml/ocaml#11957&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shindere"&gt;Sébastien Hinderer&lt;/a&gt; provided positive feedback on the &lt;a href="https://github.com/ocaml/RFCs/issues/53" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Relocatable OCaml&lt;/strong&gt;&lt;/a&gt; RFC, specifically commending the explanation's readability and digestibility compared to the complex underlying technical work (&lt;a href="https://github.com/ocaml/RFCs/issues/53"&gt;ocaml/RFCs#53&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; initiated &lt;a href="https://github.com/ocaml/ocaml/issues/13871" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;PDF manual font improvements&lt;/strong&gt;&lt;/a&gt; discussion proposing three font options (Palladio, Schoolbook, Utopia) for better typography (&lt;a href="https://github.com/ocaml/ocaml/issues/13871"&gt;ocaml/ocaml#13871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/johnwhitington"&gt;John Whitington&lt;/a&gt; reported &lt;a href="https://github.com/ocaml/ocaml/issues/13896" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCamldoc rendering issues&lt;/strong&gt;&lt;/a&gt; in OCaml 5 compared to OCaml 4 with vertical alignment problems (&lt;a href="https://github.com/ocaml/ocaml/issues/13896"&gt;ocaml/ocaml#13896&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation quality focus&lt;/strong&gt; with multiple improvements to manual content and API documentation clarity across different areas, complemented by RFC documentation receiving positive community feedback&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Build system reliability&lt;/strong&gt; improvements including reproducible builds and CI infrastructure enhancements for cross-platform compatibility, with proposed distribution portability addressing deployment challenges&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;IDE tooling support&lt;/strong&gt; enhancements with better module indexing and shape analysis for language server features reflecting increased focus on developer experience&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Multicore testing infrastructure&lt;/strong&gt; maturation with proper test categorization and platform-specific requirements supporting the ongoing multicore OCaml initiative&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Infrastructure modernization&lt;/strong&gt; spanning both build processes and distribution mechanisms addressing current OCaml deployment and development workflow challenges&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-13"/><summary>Documentation improvements and RFC submission for relocatable OCaml with continued work on core language features</summary><published>2025-03-30T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-14</id><title>Week 14, 2025: Standard library enhancements and RFC design discussions dominated OCaml core development activity</title><updated>2025-04-06T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13932" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;New singleton functions&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; added &lt;code&gt;List.singleton&lt;/code&gt; and &lt;code&gt;Seq.singleton&lt;/code&gt; functions for creating single-element collections (&lt;a href="https://github.com/ocaml/ocaml/issues/13932"&gt;ocaml/ocaml#13932&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13720" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced Result module&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/dbuenzli"&gt;Daniel Bünzli&lt;/a&gt; contributed &lt;code&gt;Result.get_ok'&lt;/code&gt; for better error handling with string messages and &lt;code&gt;Result.error_to_failure&lt;/code&gt; for converting errors to Failure exceptions (&lt;a href="https://github.com/ocaml/ocaml/issues/13720"&gt;ocaml/ocaml#13720&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13362" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Float array runtime improvements&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; exposed &lt;code&gt;{uniform_,float}array_concat&lt;/code&gt; functions and integrated them into Float.Array for complete runtime support parity (&lt;a href="https://github.com/ocaml/ocaml/issues/13362"&gt;ocaml/ocaml#13362&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/12452" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Comprehensive Fun module documentation&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/hyphenrf"&gt;Haz&lt;/a&gt; added detailed usage examples for all combinators including &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;flip&lt;/code&gt;, &lt;code&gt;compose&lt;/code&gt;, and &lt;code&gt;negate&lt;/code&gt; with practical code samples (&lt;a href="https://github.com/ocaml/ocaml/issues/12452"&gt;ocaml/ocaml#12452&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13934" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fixed documentation annotations&lt;/strong&gt;&lt;/a&gt; restored missing &lt;code&gt;@since 5.0&lt;/code&gt; annotations in Domain and Effect modules ensuring version information appears correctly (&lt;a href="https://github.com/ocaml/ocaml/issues/13934"&gt;ocaml/ocaml#13934&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Main development focus&lt;/strong&gt; was on standard library ergonomics improvements with multiple convenience functions added to core modules in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;RFC design discussions&lt;/strong&gt; continued on implicit source positions RFC with detailed technical debate about representation choices in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Critical compiler bugs&lt;/strong&gt; were identified and reported, particularly around lazy evaluation and recursive definitions&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility&lt;/strong&gt; received attention with Windows build system improvements and documentation fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Shared contributors&lt;/strong&gt; &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; and &lt;a href="https://github.com/dbuenzli"&gt;Daniel Bünzli&lt;/a&gt; participated actively in both standard library development in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; and RFC design discussions in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Design coordination&lt;/strong&gt;&lt;/a&gt; RFC discussions in &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt; about implicit source positions may influence future standard library API design patterns&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance considerations&lt;/strong&gt; RFC discussions about representation efficiency align with ongoing work in the main compiler to optimize standard library functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13253" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Typing system backwards compatibility&lt;/strong&gt;&lt;/a&gt; extensive technical discussion on &lt;a href="https://github.com/ocaml/ocaml/issues/13253"&gt;ocaml/ocaml#13253&lt;/a&gt; involving &lt;a href="https://github.com/v-gb"&gt;@v-gb&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, and &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; about optional argument handling in labeled functions and potential semantic changes to improve API evolution&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Implicit source positions RFC&lt;/strong&gt;&lt;/a&gt; continued design discussion on &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt; between &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt;, and &lt;a href="https://github.com/dbuenzli"&gt;Daniel Bünzli&lt;/a&gt; focused on representation alternatives and performance tradeoffs for Jane Street's existing usage with 5,827 &lt;code&gt;[%call_pos]&lt;/code&gt; occurrences&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13896" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCamldoc rendering improvements&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/johnwhitington"&gt;John Whitington&lt;/a&gt; reported and discussed visual formatting issues in generated documentation between OCaml 4 and 5, with analysis of HTML DOCTYPE changes affecting CSS rendering (&lt;a href="https://github.com/ocaml/ocaml/issues/13896"&gt;ocaml/ocaml#13896&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Standard library ergonomics&lt;/strong&gt; continues to be prioritized with convenience functions like singleton creators and better error handling utilities being added to core modules&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation quality initiatives&lt;/strong&gt; active effort to improve both API documentation with examples and fix missing version annotations, building on previous consistency work&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Compiler stability focus&lt;/strong&gt; multiple critical bugs being identified and addressed, particularly around advanced features like lazy evaluation and recursive definitions&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform robustness&lt;/strong&gt; ongoing attention to Windows-specific build and testing issues, ensuring OCaml works reliably across platforms&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;RFC process maturation&lt;/strong&gt; increasingly detailed technical discussions about language feature design with attention to performance implications and backwards compatibility&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-14"/><summary>Standard library enhancements and RFC design discussions dominated OCaml core development activity</summary><published>2025-04-06T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-15</id><title>Week 15, 2025: Focused development on runtime stability fixes and transparent ascription RFC with extensive technical discussions</title><updated>2025-04-13T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13862" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;List.sort_uniq behavior change&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; to preserve first occurrences of duplicates instead of arbitrary ones (&lt;a href="https://github.com/ocaml/ocaml/issues/13862"&gt;ocaml/ocaml#13862&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13930" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced lazy evaluation&lt;/strong&gt;&lt;/a&gt; in recursive values with new &lt;code&gt;caml_update_dummy_lazy&lt;/code&gt; runtime primitive and &lt;code&gt;CamlinternalLazy.indirect&lt;/code&gt; function for thread-safe copying (&lt;a href="https://github.com/ocaml/ocaml/issues/13930"&gt;ocaml/ocaml#13930&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13933"&gt;ocaml/ocaml#13933&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Improved debugger printer integration&lt;/strong&gt; with shared &lt;code&gt;Topprinters.find_printer&lt;/code&gt; functionality between toplevel and debugger (&lt;a href="https://github.com/ocaml/ocaml/commit/c7ad501d707aa2eeb4984fc165cb1eb3dba26eb4"&gt;c7ad501&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13944" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Better handling of deeply nested unboxed types&lt;/strong&gt;&lt;/a&gt; in typeopt preventing stack overflow issues (&lt;a href="https://github.com/ocaml/ocaml/issues/13944"&gt;ocaml/ocaml#13944&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13952" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime domain safety improvements&lt;/strong&gt;&lt;/a&gt; with enhanced documentation and checks for &lt;code&gt;caml_domain_alone&lt;/code&gt; function (&lt;a href="https://github.com/ocaml/ocaml/issues/13952"&gt;ocaml/ocaml#13952&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Runtime stability&lt;/strong&gt; was the primary focus in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with fixes for lazy evaluation, domain safety, and type system improvements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Module system advancement&lt;/strong&gt; through &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; with transparent ascription RFC ready for prototype implementation&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-cutting impact&lt;/strong&gt; of module system changes affecting both implementation work and advanced language features like modular implicits&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module system coordination&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; implementation work and &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; design discussions, with transparent ascription RFC (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;) addressing aliasing bugs in the main repository&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Modular implicits integration&lt;/strong&gt;&lt;/a&gt; highlighted by &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; showing how transparent ascription (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;) benefits modular explicit resolution (&lt;a href="https://github.com/ocaml/ocaml/issues/13275"&gt;ocaml/ocaml#13275&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13806" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Shared contributor expertise&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt; providing guidance on both polymorphic parameters (&lt;a href="https://github.com/ocaml/ocaml/issues/13806"&gt;ocaml/ocaml#13806&lt;/a&gt;) and transparent ascription linking behavior (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module aliasing semantics&lt;/strong&gt;&lt;/a&gt; debate in &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt; between static and dynamic aliases with &lt;a href="https://github.com/diremy"&gt;Didier Remy&lt;/a&gt; advocating for explicit user choice rather than inference&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance implications&lt;/strong&gt;&lt;/a&gt; discussion by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; comparing transparent ascription with lazy module strengthening used at Jane Street (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Backward compatibility strategy&lt;/strong&gt;&lt;/a&gt; analysis by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; emphasizing need for careful transition due to manual mapping files in projects like the standard library and Coccinelle (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13275" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Modular explicits implementation&lt;/strong&gt;&lt;/a&gt; continues with detailed technical discussions about dependent function types and error message improvements in &lt;a href="https://github.com/ocaml/ocaml/issues/13275"&gt;ocaml/ocaml#13275&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13712" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type_external feature&lt;/strong&gt;&lt;/a&gt; advancement with runtime compatibility considerations and build system testing in &lt;a href="https://github.com/ocaml/ocaml/issues/13712"&gt;ocaml/ocaml#13712&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13930" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced concurrency safety&lt;/strong&gt;&lt;/a&gt; across both repositories with multiple fixes addressing thread-safety issues in lazy evaluation (&lt;a href="https://github.com/ocaml/ocaml/issues/13930"&gt;ocaml/ocaml#13930&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13933"&gt;ocaml/ocaml#13933&lt;/a&gt;) and domain handling (&lt;a href="https://github.com/ocaml/ocaml/issues/13952"&gt;ocaml/ocaml#13952&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Implementation-ready RFC process&lt;/strong&gt;&lt;/a&gt; with transparent ascription moving toward prototype development phase following thorough technical review (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13275" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Advanced type system development&lt;/strong&gt;&lt;/a&gt; with continued work on modular explicits (&lt;a href="https://github.com/ocaml/ocaml/issues/13275"&gt;ocaml/ocaml#13275&lt;/a&gt;), polymorphic parameters (&lt;a href="https://github.com/ocaml/ocaml/issues/13806"&gt;ocaml/ocaml#13806&lt;/a&gt;), and type externals (&lt;a href="https://github.com/ocaml/ocaml/issues/13712"&gt;ocaml/ocaml#13712&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Ecosystem compatibility focus&lt;/strong&gt; with detailed consideration of migration paths for existing codebases using manual module aliases and toolchain integration&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-15"/><summary>Focused development on runtime stability fixes and transparent ascription RFC with extensive technical discussions</summary><published>2025-04-13T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-16</id><title>Week 16, 2025: Major signal handling enhancements and GC controls merged while transparent ascription RFC gained core team endorsement</title><updated>2025-04-20T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13843" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Signal handling enhancements&lt;/strong&gt;&lt;/a&gt; including new &lt;code&gt;Sys.signal&lt;/code&gt; type with platform-independent signal numbers, additional signals &lt;code&gt;sigio&lt;/code&gt; and &lt;code&gt;sigwinch&lt;/code&gt;, and conversion functions &lt;code&gt;signal_of_int&lt;/code&gt;/&lt;code&gt;signal_to_int&lt;/code&gt;/&lt;code&gt;signal_to_string&lt;/code&gt; via &lt;a href="https://github.com/ocaml/ocaml/issues/13843"&gt;ocaml/ocaml#13843&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13861" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;GC ramp-up and ramp-down controls&lt;/strong&gt;&lt;/a&gt; via &lt;code&gt;Gc.ramp_up&lt;/code&gt; and &lt;code&gt;Gc.ramp_down&lt;/code&gt; functions for managing collection work during memory growth phases through &lt;a href="https://github.com/ocaml/ocaml/issues/13861"&gt;ocaml/ocaml#13861&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed &lt;strong style="color: #cc6600;"&gt;&lt;code&gt;@@@effect&lt;/code&gt; attribute syntax&lt;/strong&gt; by allowing 'effect' as an attribute identifier, resolving breaking change in OCaml 5.3 via &lt;a href="https://github.com/ocaml/ocaml/issues/13957"&gt;ocaml/ocaml#13957&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13751" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Profiling manual improvements&lt;/strong&gt;&lt;/a&gt; with consolidated perf profiling chapter and better integration guidance addressing &lt;a href="https://github.com/ocaml/ocaml/issues/13751"&gt;ocaml/ocaml#13751&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;ocamlopt &lt;code&gt;-fPIC&lt;/code&gt; compilation fix&lt;/strong&gt; ensuring C files are compiled with &lt;code&gt;-fPIC&lt;/code&gt; flag consistently across bytecode and native compilation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;High development velocity&lt;/strong&gt; with 13 PRs merged in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; covering major platform compatibility improvements and runtime enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Advanced language feature planning&lt;/strong&gt; progressing in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; with transparent ascription RFC receiving core team endorsement for implementation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13948" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Platform compatibility focus&lt;/strong&gt;&lt;/a&gt; addressing Windows-specific issues including MinGW builds and native debugger functionality via &lt;a href="https://github.com/ocaml/ocaml/issues/13948"&gt;ocaml/ocaml#13948&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Runtime system modernization&lt;/strong&gt; with enhanced signal handling architecture and fine-grained GC control mechanisms&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module system development coordination&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; transparent ascription RFC (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;) and ongoing &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; module alias subtyping crash investigations (&lt;a href="https://github.com/ocaml/ocaml/issues/13976"&gt;ocaml/ocaml#13976&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13861" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Core contributor engagement&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; implementing GC features in &lt;a href="https://github.com/ocaml/ocaml/issues/13861"&gt;ocaml/ocaml#13861&lt;/a&gt; while endorsing RFC implementation in &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13976" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Shared maintenance responsibilities&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/clementblaudeau"&gt;Clément Blaudeau&lt;/a&gt; reporting compiler issues in &lt;a href="https://github.com/ocaml/ocaml/issues/13976"&gt;ocaml/ocaml#13976&lt;/a&gt; while authoring module system improvements in &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13960" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Code review management tooling&lt;/strong&gt;&lt;/a&gt; discussion by &lt;a href="https://github.com/mbarbin"&gt;Mathieu Barbin&lt;/a&gt; exploring automation for CR comments embedded in OCaml source code using established syntax patterns (&lt;a href="https://github.com/ocaml/ocaml/issues/13960"&gt;ocaml/ocaml#13960&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Transparent ascription RFC consensus&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; and &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; endorsing progression to prototype implementation as part of OCaml Foundation-funded work (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Technical implementation planning&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt; providing detailed feedback on linking behavior for explicit static aliases and transition strategy for the &lt;code&gt;-no-alias-deps&lt;/code&gt; flag (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance implications analysis&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; questioning relationship to lazy module strengthening used at Jane Street (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Platform-specific compatibility focus&lt;/strong&gt; with multiple Windows-related fixes addressing MinGW builds, function name decoration issues, and native development tools functionality&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Runtime system modernization&lt;/strong&gt; through enhanced signal handling architecture moving toward platform-independent management with proper type safety and conversion functions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13861" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Advanced garbage collection controls&lt;/strong&gt;&lt;/a&gt; providing developers with fine-grained control over collection behavior during application lifecycle phases via &lt;a href="https://github.com/ocaml/ocaml/issues/13861"&gt;ocaml/ocaml#13861&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module system advancement&lt;/strong&gt;&lt;/a&gt; with transparent ascription RFC gaining momentum through core team endorsement and OCaml Foundation funding for implementation work (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Industry-academia collaboration&lt;/strong&gt; evident in RFC discussions with Jane Street's &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt; providing practical implementation insights alongside academic contributors&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-16"/><summary>Major signal handling enhancements and GC controls merged while transparent ascription RFC gained core team endorsement</summary><published>2025-04-20T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-17</id><title>Week 17, 2025: Coordinated work on module system improvements with compiler refactoring and transparent ascription RFC advancing to implementation phase</title><updated>2025-04-27T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;Refactored &lt;a href="https://github.com/ocaml/ocaml/issues/13980" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;type approximation system&lt;/strong&gt;&lt;/a&gt; in the OCaml compiler to improve error locations and fix regression issues in recursive function typing (&lt;a href="https://github.com/ocaml/ocaml/commit/c681cd75440c3403ef442c6f9cf0c4c52d85af8a"&gt;ocaml/ocaml c681cd75&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13980"&gt;ocaml/ocaml#13980&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Renamed internal &lt;strong style="color: #cc6600;"&gt;no&lt;em&gt;alias&lt;/em&gt;deps flag&lt;/strong&gt; representation from &lt;code&gt;transparent_modules&lt;/code&gt; to &lt;code&gt;no_alias_deps&lt;/code&gt; to avoid confusion with transparent signatures, affecting direct users of Clflags API (&lt;a href="https://github.com/ocaml/ocaml/issues/13972"&gt;ocaml/ocaml#13972&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Updated &lt;strong style="color: #cc6600;"&gt;version information&lt;/strong&gt; and release calendar as part of OCaml 5.4 branching process (&lt;a href="https://github.com/ocaml/ocaml/commit/bec870ad15a89acb898327e2d5ca5c105e67b9b0"&gt;ocaml/ocaml bec870a&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module system improvements&lt;/strong&gt;&lt;/a&gt; coordinated across compiler implementation and RFC development, with &lt;a href="https://github.com/clementblaudeau"&gt;Clément Blaudeau&lt;/a&gt; leading work on both transparent ascription RFC (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;) and related compiler cleanup (&lt;a href="https://github.com/ocaml/ocaml/issues/13972"&gt;ocaml/ocaml#13972&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13980" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type system maintenance&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; with extensive refactoring of type approximation affecting recursive functions (&lt;a href="https://github.com/ocaml/ocaml/issues/13980"&gt;ocaml/ocaml#13980&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Implementation consensus&lt;/strong&gt; reached among core developers to advance transparent ascription from RFC discussion to prototype development phase&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13993" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Documentation and tooling&lt;/strong&gt;&lt;/a&gt; improvements addressing build system issues (&lt;a href="https://github.com/ocaml/ocaml/issues/13993"&gt;ocaml/ocaml#13993&lt;/a&gt;) and manual organization (&lt;a href="https://github.com/ocaml/ocaml/issues/13992"&gt;ocaml/ocaml#13992&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Transparent ascription development&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/clementblaudeau"&gt;Clément Blaudeau&lt;/a&gt; simultaneously working on RFC design (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;) and preparing compiler implementation through flag renaming (&lt;a href="https://github.com/ocaml/ocaml/issues/13972"&gt;ocaml/ocaml#13972&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module aliasing coordination&lt;/strong&gt;&lt;/a&gt; between RFC discussions on static aliasing restrictions and compiler work on no&lt;em&gt;alias&lt;/em&gt;deps flag behavior (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13972"&gt;ocaml/ocaml#13972&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Implementation planning&lt;/strong&gt; with core team members &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, and &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt; providing technical guidance across both repositories&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;OCaml Foundation funding&lt;/strong&gt; supporting the transition from RFC discussion to implementation prototype development for transparent ascription&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Transparent ascription syntax design&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/diremy"&gt;Didier Remy&lt;/a&gt; advocating for explicit user control over static versus dynamic alias behavior (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance implications&lt;/strong&gt;&lt;/a&gt; discussion by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; comparing transparent ascription with Jane Street's lazy module strengthening (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Modular implicits integration&lt;/strong&gt;&lt;/a&gt; analysis by &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; on reducing false ambiguities through transparent ascription (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Backward compatibility planning&lt;/strong&gt;&lt;/a&gt; for manual module alias mapping files used by stdlib and Coccinelle projects (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;RFC-to-implementation pipeline&lt;/strong&gt;&lt;/a&gt; acceleration with transparent ascription moving from design phase to implementation consensus in a single week (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13972" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module system focus&lt;/strong&gt;&lt;/a&gt; across both repositories with coordinated work on aliasing, type approximation, and transparent signatures (&lt;a href="https://github.com/ocaml/ocaml/issues/13972"&gt;ocaml/ocaml#13972&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Foundation-funded development&lt;/strong&gt;&lt;/a&gt; enabling rapid progression from RFC discussion to prototype implementation planning (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13992" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Developer documentation improvements&lt;/strong&gt;&lt;/a&gt; with multiple proposals for better accessibility and organization (&lt;a href="https://github.com/ocaml/ocaml/issues/13992"&gt;ocaml/ocaml#13992&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13994"&gt;ocaml/ocaml#13994&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-17"/><summary>Coordinated work on module system improvements with compiler refactoring and transparent ascription RFC advancing to implementation phase</summary><published>2025-04-27T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-18</id><title>Week 18, 2025: OCaml compiler improvements with new language constructs, enhanced documentation, and runtime stability fixes.</title><updated>2025-05-04T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13839" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Unified let construct&lt;/strong&gt;&lt;/a&gt; reimplementation of &lt;code&gt;let open&lt;/code&gt;, &lt;code&gt;let module&lt;/code&gt; and &lt;code&gt;let exception&lt;/code&gt; in terms of a single construct by &lt;a href="https://github.com/nojb"&gt;Nicolás Ojeda Bär&lt;/a&gt;, improving parser consistency (&lt;a href="https://github.com/ocaml/ocaml/issues/13839"&gt;ocaml/ocaml#13839&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14008"&gt;ocaml/ocaml#14008&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14002" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Web API documentation anchors&lt;/strong&gt;&lt;/a&gt; added to items and headings by &lt;a href="https://github.com/nojb"&gt;Nicolás Ojeda Bär&lt;/a&gt; for easier linking to specific documentation sections (&lt;a href="https://github.com/ocaml/ocaml/issues/14002"&gt;ocaml/ocaml#14002&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced In&lt;em&gt;channel and Out&lt;/em&gt;channel documentation&lt;/strong&gt; by &lt;a href="https://github.com/NicholasLYang"&gt;Nicholas Yang&lt;/a&gt; with clearer descriptions and examples for file and terminal operations (&lt;a href="https://github.com/ocaml/ocaml/issues/13982"&gt;ocaml/ocaml#13982&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documented &lt;code&gt;[@remove_aliases]&lt;/code&gt; attribute&lt;/strong&gt; for signatures, making this built-in attribute visible and properly documented (&lt;a href="https://github.com/ocaml/ocaml/issues/13975"&gt;ocaml/ocaml#13975&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Active development in ocaml/ocaml&lt;/strong&gt; with 7 merged PRs focusing on compiler improvements, documentation enhancements, and runtime fixes&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;No activity in ocaml/RFCs&lt;/strong&gt; during this week&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Core language improvements&lt;/strong&gt; including unified let construct implementation and debugger enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation quality focus&lt;/strong&gt; with web anchor additions and API documentation improvements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Runtime stability efforts&lt;/strong&gt; addressing GC-related issues and memory management problems&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13739" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Parallel GC compaction crashes&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/13739"&gt;ocaml/ocaml#13739&lt;/a&gt; with extensive debugging by &lt;a href="https://github.com/jmid"&gt;Jan Midtgaard&lt;/a&gt; revealing segfaults and deadlocks on macOS ARM64 when running tests with random allocations and &lt;code&gt;Gc.compact&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14007" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Heap corruption during demarshaling&lt;/strong&gt;&lt;/a&gt; reported in &lt;a href="https://github.com/ocaml/ocaml/issues/14007"&gt;ocaml/ocaml#14007&lt;/a&gt; by &lt;a href="https://github.com/bvaugon"&gt;Benoît Vaugon&lt;/a&gt; with detailed analysis of GC-triggered corruption when exceptions occur during Marshal operations&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14006" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Trunk manual deployment discussion&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/14006"&gt;ocaml/ocaml#14006&lt;/a&gt; about using GitHub Pages to deploy development documentation, with concerns about search engine indexing of pre-release content&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13739" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime robustness focus&lt;/strong&gt;&lt;/a&gt; with multiple issues addressing GC-related crashes and memory management problems in parallel execution contexts (&lt;a href="https://github.com/ocaml/ocaml/issues/13739"&gt;ocaml/ocaml#13739&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14007"&gt;ocaml/ocaml#14007&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14002" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Documentation enhancement efforts&lt;/strong&gt;&lt;/a&gt; improving both API documentation accessibility and manual content quality for better developer experience (&lt;a href="https://github.com/ocaml/ocaml/issues/14002"&gt;ocaml/ocaml#14002&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13982"&gt;ocaml/ocaml#13982&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13911" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Code organization improvements&lt;/strong&gt;&lt;/a&gt; through systematic refactoring of complex compiler internals, particularly in module constraint handling (&lt;a href="https://github.com/ocaml/ocaml/issues/13911"&gt;ocaml/ocaml#13911&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14000"&gt;ocaml/ocaml#14000&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-18"/><summary>OCaml compiler improvements with new language constructs, enhanced documentation, and runtime stability fixes.</summary><published>2025-05-04T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-19</id><title>Week 19, 2025: Major atomic record fields feature merged in ocaml/ocaml while transparent ascription RFC gained implementation approval in ocaml/RFCs</title><updated>2025-05-11T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13404" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Atomic record fields&lt;/strong&gt;&lt;/a&gt; enable concurrent programming with &lt;code&gt;[@atomic]&lt;/code&gt; attribute on mutable record fields, allowing operations like &lt;code&gt;Atomic.Loc.fetch_and_add [%atomic.loc data.readers] 1&lt;/code&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13404"&gt;ocaml/ocaml#13404&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14020" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Unix.unsetenv function&lt;/strong&gt;&lt;/a&gt; removes environment variables from process environment, complementing existing putenv functionality (&lt;a href="https://github.com/ocaml/ocaml/issues/14020"&gt;ocaml/ocaml#14020&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13916" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Option.product and Option.Syntax&lt;/strong&gt;&lt;/a&gt; provide monadic operations for combining optional values with &lt;code&gt;let*&lt;/code&gt; and &lt;code&gt;and*&lt;/code&gt; binding operators (&lt;a href="https://github.com/ocaml/ocaml/issues/13916"&gt;ocaml/ocaml#13916&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Dynarray.unsafe&lt;em&gt;to&lt;/em&gt;iarray&lt;/strong&gt; enables building immutable arrays from dynamic arrays without copying when capacity equals length (&lt;a href="https://github.com/ocaml/ocaml/issues/13909"&gt;ocaml/ocaml#13909&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14015" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Memory corruption fix&lt;/strong&gt;&lt;/a&gt; during demarshaling prevents segfaults when GC triggers during exception allocation (&lt;a href="https://github.com/ocaml/ocaml/issues/14015"&gt;ocaml/ocaml#14015&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14025" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Domain termination safety&lt;/strong&gt;&lt;/a&gt; improvements prevent race conditions in compaction code and domain creation deadlocks (&lt;a href="https://github.com/ocaml/ocaml/issues/14025"&gt;ocaml/ocaml#14025&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13953"&gt;ocaml/ocaml#13953&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13404" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Core compiler development&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; delivered major concurrent programming enhancements with atomic record fields (&lt;a href="https://github.com/ocaml/ocaml/issues/13404"&gt;ocaml/ocaml#13404&lt;/a&gt;) alongside standard library additions and critical runtime stability fixes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language design progress&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; achieved consensus on transparent ascription RFC (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;) with maintainer approval to proceed to prototype implementation&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-repository coordination&lt;/strong&gt; evident through shared contributors like &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; and &lt;a href="https://github.com/clementblaudeau"&gt;Clément Blaudeau&lt;/a&gt; working on both implementation and design aspects&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module system expertise&lt;/strong&gt;&lt;/a&gt; shared between repositories with &lt;a href="https://github.com/clementblaudeau"&gt;Clément Blaudeau&lt;/a&gt; authoring transparent ascription RFC (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;) while implementing type system refactoring in compiler (&lt;a href="https://github.com/ocaml/ocaml/issues/13911"&gt;ocaml/ocaml#13911&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13991" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Core maintainer coordination&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; contributing to both atomic record fields documentation (&lt;a href="https://github.com/ocaml/ocaml/issues/13991"&gt;ocaml/ocaml#13991&lt;/a&gt;) and encouraging RFC prototype implementation as part of OCaml Foundation-funded work (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Implementation pathway alignment&lt;/strong&gt; with RFC discussions referencing concrete compiler work and Foundation funding supporting transition from design to implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Transparent ascription RFC&lt;/strong&gt;&lt;/a&gt; discussions in &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt; with detailed technical feedback from &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt;, &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, and other core maintainers&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Implementation encouragement&lt;/strong&gt;&lt;/a&gt; from &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; after technical discussions, confirming the transparent ascription proposal is well-designed and ready for prototype development (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance implications&lt;/strong&gt;&lt;/a&gt; discussion by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; comparing transparent ascription to lazy module strengthening approaches (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Backward compatibility&lt;/strong&gt;&lt;/a&gt; concerns addressed by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; noting Dune adaptation capabilities while manual alias projects need careful transition planning (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Concurrent programming emphasis&lt;/strong&gt; with atomic record fields representing a substantial addition to OCaml's parallel programming capabilities alongside domain safety improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module system modernization&lt;/strong&gt;&lt;/a&gt; focus through transparent ascription RFC (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;) addressing aliasing bugs and providing cleaner alternatives to static aliases&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Implementation-ready RFC process&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt; demonstrating thorough technical review leading to maintainer consensus and Foundation-funded implementation pathway&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14015" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime stability prioritization&lt;/strong&gt;&lt;/a&gt; through systematic fixes for memory corruption (&lt;a href="https://github.com/ocaml/ocaml/issues/14015"&gt;ocaml/ocaml#14015&lt;/a&gt;), GC race conditions (&lt;a href="https://github.com/ocaml/ocaml/issues/14025"&gt;ocaml/ocaml#14025&lt;/a&gt;), and domain lifecycle management&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14013" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform robustness&lt;/strong&gt;&lt;/a&gt; improvements including Windows-specific fixes, Alpine Linux compatibility, and expanded CI test coverage (&lt;a href="https://github.com/ocaml/ocaml/issues/14013"&gt;ocaml/ocaml#14013&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-19"/><summary>Major atomic record fields feature merged in ocaml/ocaml while transparent ascription RFC gained implementation approval in ocaml/RFCs</summary><published>2025-05-11T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-20</id><title>Week 20, 2025: Active week focused on runtime optimizations, AST refactoring, and platform compatibility improvements across multiple architectures</title><updated>2025-05-18T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13594" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Generational stack scanning&lt;/strong&gt;&lt;/a&gt; for ARM 64-bit, POWER, and RISC-V architectures reduces minor GC work with deep call stacks (&lt;a href="https://github.com/ocaml/ocaml/issues/13594"&gt;ocaml/ocaml#13594&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13728" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Sys.runtime_executable&lt;/strong&gt;&lt;/a&gt; API provides full path to currently executing runtime, useful for distinguishing native vs bytecode execution (&lt;a href="https://github.com/ocaml/ocaml/issues/13728"&gt;ocaml/ocaml#13728&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Gc.Memprof Map&lt;em&gt;file&lt;/strong&gt; allocation source tracking for Unix.map&lt;/em&gt;file memory mapping (&lt;a href="https://github.com/ocaml/ocaml/issues/13675"&gt;ocaml/ocaml#13675&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14009" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Extension point/attribute&lt;/strong&gt;&lt;/a&gt; placement fixes for local structure items - infix extensions now attach to AST nodes correctly (&lt;a href="https://github.com/ocaml/ocaml/issues/14009"&gt;ocaml/ocaml#14009&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13987" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;TSan data race&lt;/strong&gt;&lt;/a&gt; fix for major GC read/write operations (&lt;a href="https://github.com/ocaml/ocaml/issues/13987"&gt;ocaml/ocaml#13987&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13853" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Format module&lt;/strong&gt;&lt;/a&gt; fix for premature line breaks with end-positioned break hints (&lt;a href="https://github.com/ocaml/ocaml/issues/13853"&gt;ocaml/ocaml#13853&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13594" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime performance focus&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; implementing generational stack scanning across ARM64, POWER, and RISC-V architectures (&lt;a href="https://github.com/ocaml/ocaml/issues/13594"&gt;ocaml/ocaml#13594&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14028" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;AST refactoring completion&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/nojb"&gt;Nicolás Ojeda Bär&lt;/a&gt; cleaning up dead code following Pexp&lt;em&gt;struct&lt;/em&gt;item/Texp&lt;em&gt;struct&lt;/em&gt;item introduction (&lt;a href="https://github.com/ocaml/ocaml/issues/14028"&gt;ocaml/ocaml#14028&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Platform compatibility improvements&lt;/strong&gt; across Windows, ARM64, POWER, and RISC-V with ThreadSanitizer fixes and FlexDLL enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Language modernization&lt;/strong&gt; discussions including field getter syntax proposals and let expression expansions&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;No RFC activity&lt;/strong&gt; recorded during this period&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14042" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Field getter syntax&lt;/strong&gt;&lt;/a&gt; exploration by &lt;a href="https://github.com/malekbr"&gt;Malek Ben Romdhane&lt;/a&gt; proposing &lt;code&gt;.foo&lt;/code&gt; syntax as sugar for &lt;code&gt;fun x -&gt; x.foo&lt;/code&gt; with type-directed disambiguation (&lt;a href="https://github.com/ocaml/ocaml/issues/14042"&gt;ocaml/ocaml#14042&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14040" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Let expression&lt;/strong&gt;&lt;/a&gt; expansion by &lt;a href="https://github.com/nojb"&gt;Nicolás Ojeda Bär&lt;/a&gt; allowing arbitrary structure items in let expressions except let bindings and includes (&lt;a href="https://github.com/ocaml/ocaml/issues/14040"&gt;ocaml/ocaml#14040&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13739" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Parallel GC&lt;/strong&gt;&lt;/a&gt; crash investigation by &lt;a href="https://github.com/jmid"&gt;Jan Midtgaard&lt;/a&gt; with detailed analysis of segfaults and deadlocks with Gc.compact in multicore environments (&lt;a href="https://github.com/ocaml/ocaml/issues/13739"&gt;ocaml/ocaml#13739&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization&lt;/strong&gt; emphasis with generational stack scanning and GC improvements targeting multicore workloads across multiple architectures&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Language modernization&lt;/strong&gt; through syntax extensions and AST improvements enabling more flexible programming patterns&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Platform robustness&lt;/strong&gt; work ensuring compatibility across ARM64, POWER, RISC-V, and Windows environments with comprehensive testing&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Developer experience&lt;/strong&gt; improvements through better error messages, debugger enhancements, and tooling fixes&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-20"/><summary>Active week focused on runtime optimizations, AST refactoring, and platform compatibility improvements across multiple architectures</summary><published>2025-05-18T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-21</id><title>Week 21, 2025: Runtime improvements and Windows behavior changes merged alongside multicore performance discussions.</title><updated>2025-05-25T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14046" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Unix.kill Windows behavior change&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/nojb"&gt;Nicolás Ojeda Bär&lt;/a&gt; - processes killed with &lt;code&gt;Sys.sigkill&lt;/code&gt; now exit with code &lt;code&gt;ERROR_PROCESS_ABORTED&lt;/code&gt; (1067) instead of 0, improving compatibility with Windows standards (&lt;a href="https://github.com/ocaml/ocaml/issues/14046"&gt;ocaml/ocaml#14046&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14025" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime domain shutdown improvements&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; - orphan shared heap before stop-the-world exit to prevent memory management issues during domain termination (&lt;a href="https://github.com/ocaml/ocaml/issues/14025"&gt;ocaml/ocaml#14025&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/10570" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Special constructor for %sys_argv primitive&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/Keryan-dev"&gt;Keryan Didier&lt;/a&gt; - internal bytecode optimization for system argument handling (&lt;a href="https://github.com/ocaml/ocaml/issues/10570"&gt;ocaml/ocaml#10570&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;BUILD&lt;em&gt;PATH&lt;/em&gt;PREFIX_MAP improvements&lt;/strong&gt; by &lt;a href="https://github.com/pirbo"&gt;Pierre Boutillier&lt;/a&gt; - enhanced debug event path rewriting while disabling problematic shebang rewrites (&lt;a href="https://github.com/ocaml/ocaml/issues/14045"&gt;ocaml/ocaml#14045&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Type system scope handling&lt;/strong&gt; by Jacques Garrigue - improved internal type node scope management during abbreviation expansion rather than unification recursion&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation updates&lt;/strong&gt; - updated &lt;code&gt;Changes&lt;/code&gt; file with detailed entries for Windows process exit codes, Unix library additions, and build path mapping enhancements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Concentrated activity in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; with runtime improvements, Windows compatibility enhancements, and multicore performance investigations (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;No activity in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; during this week&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Eight contributors&lt;/strong&gt; involved in merging features, investigating performance bottlenecks, and proposing improvements to domain management and standard library access&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Focus on production readiness&lt;/strong&gt; with Windows platform compatibility and multicore runtime optimization discussions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore performance bottlenecks&lt;/strong&gt;&lt;/a&gt; with extensive analysis by &lt;a href="https://github.com/ngorogiannis"&gt;Nikos Gorogiannis&lt;/a&gt; revealing 55% of execution time spent in lock waits, leading to community investigation of stop-the-world synchronization overhead and minor heap tuning strategies (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14044" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Domain count optimization strategy&lt;/strong&gt;&lt;/a&gt; initiated by &lt;a href="https://github.com/zapashcanon"&gt;@zapashcanon&lt;/a&gt; with experimental evidence suggesting physical core count performs better than logical core count for cache-sensitive workloads, seeking expert input from runtime maintainers (&lt;a href="https://github.com/ocaml/ocaml/issues/14044"&gt;ocaml/ocaml#14044&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore performance optimization&lt;/strong&gt;&lt;/a&gt; becoming a key focus with detailed profiling and community collaboration to address runtime overhead in real-world applications like Infer static analysis (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14046" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Windows platform compatibility&lt;/strong&gt;&lt;/a&gt; improvements with behavior changes to match Windows standards for process termination codes (&lt;a href="https://github.com/ocaml/ocaml/issues/14046"&gt;ocaml/ocaml#14046&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14045" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Build tooling refinements&lt;/strong&gt;&lt;/a&gt; including enhanced path mapping and debug information handling for better cross-platform development experience (&lt;a href="https://github.com/ocaml/ocaml/issues/14045"&gt;ocaml/ocaml#14045&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-21"/><summary>Runtime improvements and Windows behavior changes merged alongside multicore performance discussions.</summary><published>2025-05-25T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-22</id><title>Week 22, 2025: Active week focusing on multicore performance optimizations, TSan bug fixes, and language enhancements in ocaml/ocaml repository</title><updated>2025-06-01T00:00:00+00:00</updated><content type="html">&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Primary activity concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with multicore performance investigations by &lt;a href="https://github.com/ngorogiannis"&gt;Nikos Gorogiannis&lt;/a&gt; addressing runtime lock wait issues in &lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ThreadSanitizer reliability improvements led by &lt;a href="https://github.com/oliviernicole"&gt;@oliviernicole&lt;/a&gt; investigating data races in weak array tests through &lt;a href="https://github.com/ocaml/ocaml/issues/14061"&gt;ocaml/ocaml#14061&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Language syntax extensions under development including field getter syntax by &lt;a href="https://github.com/malekbr"&gt;Malek Ben Romdhane&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/pull/14042"&gt;ocaml/ocaml#14042&lt;/a&gt; and parser enhancements by &lt;a href="https://github.com/nojb"&gt;Nicolás Ojeda Bär&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/pull/14040"&gt;ocaml/ocaml#14040&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Type system improvements with module alias validation by &lt;a href="https://github.com/clementblaudeau"&gt;Clément Blaudeau&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/pull/14066"&gt;ocaml/ocaml#14066&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Standard library enhancements including hashtable functions by &lt;a href="https://github.com/giltho"&gt;Sacha Ayoun&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/pull/14060"&gt;ocaml/ocaml#14060&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;No activity recorded in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; during this period&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14052" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;AI contribution policy debate&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/pull/14052"&gt;ocaml/ocaml#14052&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; proposing guidelines for AI-assisted contributions, generating substantial discussion on disclosure requirements and legal implications&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14043" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Concurrent lazy computation&lt;/strong&gt;&lt;/a&gt; discussion in &lt;a href="https://github.com/ocaml/ocaml/pull/14043"&gt;ocaml/ocaml#14043&lt;/a&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; on &lt;code&gt;Lazy.Atomic_repeating&lt;/code&gt; for concurrency-safe initialization, debating trade-offs between computation repetition vs blocking&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14054" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type representation deprecation&lt;/strong&gt;&lt;/a&gt; proposal by &lt;a href="https://github.com/v-gb"&gt;@v-gb&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/pull/14054"&gt;ocaml/ocaml#14054&lt;/a&gt; for &lt;code&gt;@@deprecated_repr&lt;/code&gt; attribute to ease transition from concrete to abstract types&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/13951" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Unicode character literals&lt;/strong&gt;&lt;/a&gt; design discussion by &lt;a href="https://github.com/octachron"&gt;@octachron&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/pull/13951"&gt;ocaml/ocaml#13951&lt;/a&gt; on Uchar.t syntax with type-directed disambiguation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore GC optimization&lt;/strong&gt;&lt;/a&gt; technical exchange in &lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt; involving &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, &lt;a href="https://github.com/tmcgilchrist"&gt;Tim McGilchrist&lt;/a&gt;, and &lt;a href="https://github.com/kayceesrk"&gt;KC Sivaramakrishnan&lt;/a&gt; on minor heap sizing strategies&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore performance optimization&lt;/strong&gt;&lt;/a&gt; becoming central focus with detailed analysis of GC parameters, heap sizing strategies, and domain synchronization overhead as seen in &lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14061" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;ThreadSanitizer integration&lt;/strong&gt;&lt;/a&gt; receiving enhanced attention for race condition detection, with systematic improvements to test reliability and runtime instrumentation through &lt;a href="https://github.com/ocaml/ocaml/issues/14061"&gt;ocaml/ocaml#14061&lt;/a&gt; and &lt;a href="https://github.com/ocaml/ocaml/pull/14059"&gt;ocaml/ocaml#14059&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14042" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language syntax extensions&lt;/strong&gt;&lt;/a&gt; under active consideration, including field getters in &lt;a href="https://github.com/ocaml/ocaml/pull/14042"&gt;ocaml/ocaml#14042&lt;/a&gt;, structure items in let expressions in &lt;a href="https://github.com/ocaml/ocaml/pull/14040"&gt;ocaml/ocaml#14040&lt;/a&gt;, and Unicode literal support in &lt;a href="https://github.com/ocaml/ocaml/pull/13951"&gt;ocaml/ocaml#13951&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14066" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type system safety improvements&lt;/strong&gt;&lt;/a&gt; with enhanced error reporting and validation mechanisms for module aliases through &lt;a href="https://github.com/ocaml/ocaml/pull/14066"&gt;ocaml/ocaml#14066&lt;/a&gt; and first-class module constraints&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14043" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Concurrent programming patterns&lt;/strong&gt;&lt;/a&gt; being refined through lazy computation alternatives in &lt;a href="https://github.com/ocaml/ocaml/pull/14043"&gt;ocaml/ocaml#14043&lt;/a&gt; and atomic operations for library initialization&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-22"/><summary>Active week focusing on multicore performance optimizations, TSan bug fixes, and language enhancements in ocaml/ocaml repository</summary><published>2025-06-01T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-23</id><title>Week 23, 2025: Standard library enhancement with Option.blend, Apple Silicon performance optimizations, and runtime reliability improvements</title><updated>2025-06-08T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13995" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Option.blend function&lt;/strong&gt;&lt;/a&gt; added to standard library by &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; for combining optional values with a blending function (&lt;a href="https://github.com/ocaml/ocaml/issues/13995"&gt;ocaml/ocaml#13995&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Sixtyfour memory chunk&lt;/strong&gt; introduced to CMM for handling 64-bit integer accesses that don't follow OCaml's relaxed memory model (&lt;a href="https://github.com/ocaml/ocaml/commit/5f2b948a56124aa0864e202e0270475fbf97e21c"&gt;5f2b948&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Apple Silicon performance improvement&lt;/strong&gt; by &lt;a href="https://github.com/kayceesrk"&gt;KC Sivaramakrishnan&lt;/a&gt; with &lt;code&gt;stlr&lt;/code&gt; instruction emitted instead of &lt;code&gt;dmb ishld; str&lt;/code&gt; for stores, reducing memory barrier overhead (&lt;a href="https://github.com/ocaml/ocaml/commit/48b9b736ee719a5645de0a30db86710edb87751a"&gt;48b9b73&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14063" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced debugger source lookup&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/pirbo"&gt;Pierre Boutillier&lt;/a&gt; with fallback mechanism to search for module files in the loadpath, improving hit rate for installed packages (&lt;a href="https://github.com/ocaml/ocaml/issues/14063"&gt;ocaml/ocaml#14063&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Primary activity&lt;/strong&gt; concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; repository with significant standard library enhancements, platform-specific optimizations, and runtime improvements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;No activity&lt;/strong&gt; recorded in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; repository during this week&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Standard library evolution&lt;/strong&gt; continues with new utility functions and enhanced debugging capabilities&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance focus&lt;/strong&gt; on Apple Silicon platform with ARM-specific optimizations&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Quality improvements&lt;/strong&gt; across error messages, documentation, and runtime reliability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14078" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Alert attribute confusion&lt;/strong&gt;&lt;/a&gt; identified by &lt;a href="https://github.com/shonfeder"&gt;Shon Feder&lt;/a&gt; highlighting inconsistencies between documentation and actual usage patterns, particularly around item-attributes vs pattern-attributes (&lt;a href="https://github.com/ocaml/ocaml/issues/14078"&gt;ocaml/ocaml#14078&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore performance investigation&lt;/strong&gt;&lt;/a&gt; continues with &lt;a href="https://github.com/ngorogiannis"&gt;Nikos Gorogiannis&lt;/a&gt; analyzing runtime lock waits in multicore analysis, showing significant performance gaps between multiprocessing and domain-based approaches in Infer (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13989" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Manual documentation modernization&lt;/strong&gt;&lt;/a&gt; discussion initiated by &lt;a href="https://github.com/NicholasLYang"&gt;Nicholas Yang&lt;/a&gt; exploring conversion to odoc format for improved contributor experience (&lt;a href="https://github.com/ocaml/ocaml/issues/13989"&gt;ocaml/ocaml#13989&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Apple Silicon platform optimization&lt;/strong&gt; gaining attention with performance-specific fixes for ARM-based macOS systems, reflecting growing adoption of M1/M2 hardware in OCaml development&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;ThreadSanitizer reliability improvements&lt;/strong&gt; showing commitment to making multicore OCaml more robust through better testing infrastructure and false-positive elimination&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Error message quality focus&lt;/strong&gt; with multiple PRs dedicated to improving type error reporting, particularly for universal variables and labeled constructs&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation accuracy emphasis&lt;/strong&gt; with systematic fixes to inconsistencies in manual examples and attribute usage guidelines&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-23"/><summary>Standard library enhancement with Option.blend, Apple Silicon performance optimizations, and runtime reliability improvements</summary><published>2025-06-08T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-24</id><title>Week 24, 2025: Performance improvements for Apple Silicon, new internal APIs, type system enhancements, and ongoing ThreadSanitizer debugging work.</title><updated>2025-06-15T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance improvement&lt;/strong&gt; for Apple Silicon macOS by emitting &lt;code&gt;stlr&lt;/code&gt; instead of &lt;code&gt;dmb ishld; str&lt;/code&gt; instructions, addressing performance issues (&lt;a href="https://github.com/ocaml/ocaml/commit/f1c31807fd9d56880bef5e64c8b2aec175dcbc10"&gt;f1c31807&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;New Config module APIs&lt;/strong&gt; including &lt;code&gt;Config.c_compiler_vendor&lt;/code&gt; for identifying C compiler vendor and version, and &lt;code&gt;Config.shebangscripts&lt;/code&gt; for platform shebang script support (&lt;a href="https://github.com/ocaml/ocaml/commit/a1d28e1cc3da0e17d3bd64f14baf9d716d94b351"&gt;a1d28e1c&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced bytecode linking&lt;/strong&gt; with new &lt;code&gt;Bytelink.read_runtime_launch_info&lt;/code&gt; API for reading runtime launch information and improved &lt;code&gt;Dll.search_path&lt;/code&gt; function (&lt;a href="https://github.com/ocaml/ocaml/commit/88d803f5dedffd883d7addee4a0261a2feaa089e"&gt;88d803f5&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/79071c4ddd659a33b917101a6d451e888063e8ef"&gt;79071c4d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Type system improvements&lt;/strong&gt; with better error messages for mismatched universal variables and enhanced alias constraint handling (&lt;a href="https://github.com/ocaml/ocaml/commit/08c3d0c4474b4b613463b27ebe5d344f2293fc13"&gt;08c3d0c4&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/5607fc429d6a45bf4802c175c2950a5c8ba3711a"&gt;5607fc42&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;New standard library additions&lt;/strong&gt; including &lt;code&gt;Misc.Stdlib.String.to_utf_8_seq&lt;/code&gt; for UTF-8 sequence conversion (&lt;a href="https://github.com/ocaml/ocaml/commit/b48ba73a22dbf499133dcb1dbd8464be41f5e8a8"&gt;b48ba73a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Comprehensive in-prefix testing infrastructure&lt;/strong&gt; with new testing framework for compiler installation verification (&lt;a href="https://github.com/ocaml/ocaml/commit/9585ef98182f0159a6ceb00e0824ff11cf3237c0"&gt;9585ef98&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/a28e47bd42ad6a1f8ca3c26345aa27e7809bb66a"&gt;a28e47bd&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Core compiler development&lt;/strong&gt; focused on &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with significant performance improvements for Apple Silicon platforms and internal API enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Platform-specific optimizations&lt;/strong&gt; addressing real-world performance bottlenecks on macOS ARM64 architecture&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Internal API expansion&lt;/strong&gt; with new Config module capabilities and enhanced bytecode linking infrastructure&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation and safety improvements&lt;/strong&gt; including ongoing external types manual work and Dynarray module enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Debugging infrastructure development&lt;/strong&gt; with continued ThreadSanitizer integration efforts and DWARF debugging discussions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;DWARF debugging support&lt;/strong&gt; inquiry by &lt;a href="https://github.com/joelreymont"&gt;Joel Reymont&lt;/a&gt; regarding source code visibility in lldb on macOS, seeking clarification on existing issues and potential contribution opportunities (&lt;a href="https://github.com/ocaml/ocaml/discussions/14062"&gt;ocaml/ocaml#14062&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Platform-specific optimizations&lt;/strong&gt; with targeted performance improvements for Apple Silicon architecture addressing real-world performance bottlenecks&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Internal API expansion&lt;/strong&gt; trend continuing with new Config module capabilities and bytecode linking enhancements for better tooling support&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;ThreadSanitizer integration&lt;/strong&gt; efforts showing sustained focus on improving debugging and analysis capabilities despite technical challenges&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-24"/><summary>Performance improvements for Apple Silicon, new internal APIs, type system enhancements, and ongoing ThreadSanitizer debugging work.</summary><published>2025-06-15T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-25</id><title>Week 25, 2025: Several standard library enhancements merged with new Domain.count function, Option predicates, and Dynarray reverse iterators</title><updated>2025-06-22T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14086" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Domain.count function&lt;/strong&gt;&lt;/a&gt; added to get the number of currently running domains (&lt;a href="https://github.com/ocaml/ocaml/issues/14086"&gt;ocaml/ocaml#14086&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13920" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Option.for_all and Option.exists predicates&lt;/strong&gt;&lt;/a&gt; added for consistency with List module functionality (&lt;a href="https://github.com/ocaml/ocaml/issues/13920"&gt;ocaml/ocaml#13920&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Dynarray.rev&lt;em&gt;iter and rev&lt;/em&gt;iteri functions&lt;/strong&gt; added for reverse iteration over dynamic arrays (&lt;a href="https://github.com/ocaml/ocaml/issues/12877"&gt;ocaml/ocaml#12877&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13447" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Improved Unix module error handling&lt;/strong&gt;&lt;/a&gt; with symmetrized functions between sys and unix modules for better consistency (&lt;a href="https://github.com/ocaml/ocaml/issues/13447"&gt;ocaml/ocaml#13447&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14014" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced testsuite infrastructure&lt;/strong&gt;&lt;/a&gt; with new in-prefix testing tools for comprehensive testing scenarios (&lt;a href="https://github.com/ocaml/ocaml/issues/14014"&gt;ocaml/ocaml#14014&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Core repository activity&lt;/strong&gt;: &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; saw significant standard library enhancements and compiler reliability improvements this week&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;RFC repository status&lt;/strong&gt;: &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; had no recorded activity during this period&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Development focus&lt;/strong&gt;: Multiple contributors worked on expanding standard library APIs and addressing runtime reliability issues&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Merge activity&lt;/strong&gt;: Five major feature additions were successfully integrated into the main codebase&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced testing frameworks&lt;/strong&gt; with comprehensive testsuite tooling for different execution modes and installation scenarios in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14059" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime reliability improvements&lt;/strong&gt;&lt;/a&gt; addressing thread sanitizer issues and memory safety concerns in concurrent scenarios (&lt;a href="https://github.com/ocaml/ocaml/issues/14059"&gt;ocaml/ocaml#14059&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14075"&gt;ocaml/ocaml#14075&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13447" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform standardization&lt;/strong&gt;&lt;/a&gt; efforts particularly for Windows and Unix system integration with improved error handling (&lt;a href="https://github.com/ocaml/ocaml/issues/13447"&gt;ocaml/ocaml#13447&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13920" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Standard library API expansion&lt;/strong&gt;&lt;/a&gt; with consistent predicates and iteration functions across modules (&lt;a href="https://github.com/ocaml/ocaml/issues/13920"&gt;ocaml/ocaml#13920&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/12877"&gt;ocaml/ocaml#12877&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-25"/><summary>Several standard library enhancements merged with new Domain.count function, Option predicates, and Dynarray reverse iterators</summary><published>2025-06-22T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-26</id><title>Week 26, 2025: Runtime improvements with C99 integer types, memory profiling fixes, and I/O channel close bug fixes merged in ocaml/ocaml</title><updated>2025-06-29T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13656" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;C99 integer types&lt;/strong&gt;&lt;/a&gt; modernization throughout OCaml runtime and libraries, replacing custom integer definitions with standardized &lt;code&gt;stdint.h&lt;/code&gt; and &lt;code&gt;inttypes.h&lt;/code&gt; types (&lt;a href="https://github.com/ocaml/ocaml/issues/13656"&gt;ocaml/ocaml#13656&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14114"&gt;ocaml/ocaml#14114&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14057" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Memory profiling timing&lt;/strong&gt;&lt;/a&gt; fix to prevent premature memory profiler updates during minor GC cycles, ensuring accurate heap statistics (&lt;a href="https://github.com/ocaml/ocaml/issues/14057"&gt;ocaml/ocaml#14057&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14093" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;I/O channel robustness&lt;/strong&gt;&lt;/a&gt; improvement fixing crashes when channels are closed during flush operations (&lt;a href="https://github.com/ocaml/ocaml/issues/14093"&gt;ocaml/ocaml#14093&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14105" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;PPrint AST hang&lt;/strong&gt;&lt;/a&gt; fix preventing infinite loops when printing isolated constructor &lt;code&gt;(::)&lt;/code&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14105"&gt;ocaml/ocaml#14105&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13988" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Build system enhancements&lt;/strong&gt;&lt;/a&gt; with unified header file implementation for cross-platform bytecode executables (&lt;a href="https://github.com/ocaml/ocaml/issues/13988"&gt;ocaml/ocaml#13988&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14102" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Compiler warnings&lt;/strong&gt;&lt;/a&gt; disabled temporarily for MSVC C5387 and Clang cast-function-type-mismatch to improve build compatibility (&lt;a href="https://github.com/ocaml/ocaml/issues/14102"&gt;ocaml/ocaml#14102&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14109"&gt;ocaml/ocaml#14109&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Single active repository&lt;/strong&gt;: All development activity occurred in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with no changes in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; this week&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13656" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime modernization focus&lt;/strong&gt;&lt;/a&gt;: Comprehensive C99 integer types adoption led by &lt;a href="https://github.com/MisterDA"&gt;Antonin Décimo&lt;/a&gt; affecting runtime, bigarray, and platform-specific code (&lt;a href="https://github.com/ocaml/ocaml/issues/13656"&gt;ocaml/ocaml#13656&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13988" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility&lt;/strong&gt;&lt;/a&gt;: &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; unified bytecode header implementations and addressed compiler warnings across Windows and Unix platforms (&lt;a href="https://github.com/ocaml/ocaml/issues/13988"&gt;ocaml/ocaml#13988&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14102"&gt;ocaml/ocaml#14102&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14093" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Bug fixes and stability&lt;/strong&gt;&lt;/a&gt;: Critical I/O channel fixes by &lt;a href="https://github.com/stedolan"&gt;Stephen Dolan&lt;/a&gt; and memory profiling improvements by &lt;a href="https://github.com/NickBarnes"&gt;Nick Barnes&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14093"&gt;ocaml/ocaml#14093&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14057"&gt;ocaml/ocaml#14057&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14083" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Thread sanitizer crashes&lt;/strong&gt;&lt;/a&gt; under investigation by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; and &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; affecting both Semgrep and dune builds, with potential workarounds involving compiler flag adjustments (&lt;a href="https://github.com/ocaml/ocaml/issues/14083"&gt;ocaml/ocaml#14083&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14104" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance profiling regression&lt;/strong&gt;&lt;/a&gt; reported by &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; where OCaml 5.4 breaks flamegraph.pl compatibility due to UTF-8 character encoding issues, resolved in later 5.4 builds (&lt;a href="https://github.com/ocaml/ocaml/issues/14104"&gt;ocaml/ocaml#14104&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13656" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime modernization&lt;/strong&gt;&lt;/a&gt; continuing with systematic adoption of C99 standards across OCaml's C codebase, improving portability and reducing maintenance burden through standardized integer types (&lt;a href="https://github.com/ocaml/ocaml/issues/13656"&gt;ocaml/ocaml#13656&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13988" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility&lt;/strong&gt;&lt;/a&gt; emphasis on maintaining consistent behavior between Windows and Unix builds through code unification and warning management (&lt;a href="https://github.com/ocaml/ocaml/issues/13988"&gt;ocaml/ocaml#13988&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14104" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance tooling stability&lt;/strong&gt;&lt;/a&gt; addressing regressions that affect developer workflow tools like perf and flamegraph, ensuring OCaml 5.4 compatibility (&lt;a href="https://github.com/ocaml/ocaml/issues/14104"&gt;ocaml/ocaml#14104&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-26"/><summary>Runtime improvements with C99 integer types, memory profiling fixes, and I/O channel close bug fixes merged in ocaml/ocaml</summary><published>2025-06-29T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-27</id><title>Week 27, 2025: Major stdlib enhancements and transparent ascription RFC received implementation approval from core maintainers</title><updated>2025-07-06T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14118" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;New stdlib functions&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;Set.S.is_singleton&lt;/code&gt; and &lt;code&gt;Map.S.is_singleton&lt;/code&gt; for efficiently testing single-element collections (&lt;a href="https://github.com/ocaml/ocaml/issues/14118"&gt;ocaml/ocaml#14118&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14124" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;List functions made total&lt;/strong&gt;&lt;/a&gt; - &lt;code&gt;List.take&lt;/code&gt; and &lt;code&gt;List.drop&lt;/code&gt; no longer raise exceptions on negative inputs, returning empty list or original list respectively (&lt;a href="https://github.com/ocaml/ocaml/issues/14124"&gt;ocaml/ocaml#14124&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14128" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fixed Float.frexp documentation&lt;/strong&gt;&lt;/a&gt; to correctly specify &lt;code&gt;0.5 &lt;= abs x &lt; 1.0&lt;/code&gt; instead of &lt;code&gt;0.5 &lt;= x &lt; 1.0&lt;/code&gt; for negative numbers (&lt;a href="https://github.com/ocaml/ocaml/issues/14128"&gt;ocaml/ocaml#14128&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14090" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Clarified Char.compare behavior&lt;/strong&gt;&lt;/a&gt; in documentation to explicitly state it uses ASCII/byte order (&lt;a href="https://github.com/ocaml/ocaml/issues/14090"&gt;ocaml/ocaml#14090&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14117" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Fixed module constraint bug&lt;/strong&gt;&lt;/a&gt; where non-destructive &lt;code&gt;with type&lt;/code&gt; constraints with type constraints incorrectly failed (&lt;a href="https://github.com/ocaml/ocaml/issues/14117"&gt;ocaml/ocaml#14117&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14118" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Major stdlib improvements&lt;/strong&gt;&lt;/a&gt; across core modules with 6 PRs merged in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;, including new Set/Map utility functions and safer List operations (&lt;a href="https://github.com/ocaml/ocaml/issues/14118"&gt;ocaml/ocaml#14118&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14124"&gt;ocaml/ocaml#14124&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14100" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module system advancement&lt;/strong&gt;&lt;/a&gt; with extensive fixes to recursive module signature constraints and transparent ascription RFC receiving implementation approval (&lt;a href="https://github.com/ocaml/ocaml/issues/14100"&gt;ocaml/ocaml#14100&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance focus&lt;/strong&gt;&lt;/a&gt; on multicore optimization investigations and GC behavior analysis for real-world applications (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14128" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Documentation quality improvements&lt;/strong&gt;&lt;/a&gt; with multiple clarifications to core module behavior and edge cases (&lt;a href="https://github.com/ocaml/ocaml/issues/14128"&gt;ocaml/ocaml#14128&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14090"&gt;ocaml/ocaml#14090&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Coordinated transparent ascription implementation&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/clementblaudeau"&gt;Clément Blaudeau&lt;/a&gt; leading both RFC refinement in &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt; and preparatory implementation work in &lt;a href="https://github.com/ocaml/ocaml/issues/14064"&gt;ocaml/ocaml#14064&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCaml Foundation-funded module system work&lt;/strong&gt;&lt;/a&gt; driving both RFC discussions and core implementation, with &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; and &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; providing implementation approval for transparent ascription (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Integrated feedback process&lt;/strong&gt;&lt;/a&gt; with core maintainers actively reviewing and guiding RFC development to ensure smooth implementation transitions from specification to code (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/44"&gt;ocaml/RFCs#44&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore GC optimization strategies&lt;/strong&gt;&lt;/a&gt; with detailed performance analysis showing 32x larger minor heap sizes needed to approach multiprocess performance, extensive discussion between &lt;a href="https://github.com/ngorogiannis"&gt;Nikos Gorogiannis&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, and &lt;a href="https://github.com/tmcgilchrist"&gt;Tim McGilchrist&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Module system implementation strategy&lt;/strong&gt;&lt;/a&gt; discussion between &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, and &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt; regarding transparent ascription's relationship to lazy module strengthening and performance implications (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Backward compatibility planning&lt;/strong&gt;&lt;/a&gt; for transparent ascription RFC with focus on Dune integration and manual mapping file transitions, highlighting impact on large projects like the standard library (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14129" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Record update evaluation order semantics&lt;/strong&gt;&lt;/a&gt; discussion initiated by &lt;a href="https://github.com/Gbury"&gt;Guillaume Bury&lt;/a&gt; and &lt;a href="https://github.com/lthls"&gt;Vincent Laviron&lt;/a&gt; about making field evaluation order more predictable when mixing record updates with mutable fields (&lt;a href="https://github.com/ocaml/ocaml/issues/14129"&gt;ocaml/ocaml#14129&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCaml Foundation-funded development&lt;/strong&gt;&lt;/a&gt; driving significant module system improvements, with transparent ascription RFC moving toward implementation phase (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14124" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Stdlib API evolution toward safety&lt;/strong&gt;&lt;/a&gt; with functions like List.take/drop being made total rather than partial, reflecting broader trend toward safer default behaviors (&lt;a href="https://github.com/ocaml/ocaml/issues/14124"&gt;ocaml/ocaml#14124&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance-conscious language evolution&lt;/strong&gt;&lt;/a&gt; with discussions balancing new features like transparent ascription against existing optimizations such as lazy module strengthening (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore performance focus&lt;/strong&gt;&lt;/a&gt; with detailed investigations into GC behavior and runtime synchronization overhead indicating active optimization efforts (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Developer ergonomics improvements&lt;/strong&gt;&lt;/a&gt; emerging as key theme, with both transparent ascription and primitive aliases targeting reduction of boilerplate and error-prone patterns (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/44"&gt;ocaml/RFCs#44&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-27"/><summary>Major stdlib enhancements and transparent ascription RFC received implementation approval from core maintainers</summary><published>2025-07-06T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-28</id><title>Week 28, 2025: Thread Sanitizer compatibility work and governance policy development dominated core group activity this week</title><updated>2025-07-13T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14082" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Thread Sanitizer compatibility&lt;/strong&gt;&lt;/a&gt; improvements with support for multiple &lt;code&gt;__tsan_func_exit()&lt;/code&gt; signatures to handle different TSan versions (&lt;a href="https://github.com/ocaml/ocaml/issues/14082"&gt;ocaml/ocaml#14082&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/220981bdb4c9f9bc168fe4909fb698abef6f162d"&gt;220981bdb4c9f9bc168fe4909fb698abef6f162d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;a href="https://github.com/ocaml/ocaml/issues/14091" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;non-deterministic code generation&lt;/strong&gt;&lt;/a&gt; in pattern matching by ensuring consistent selection of maximal case counts, improving build reproducibility (&lt;a href="https://github.com/ocaml/ocaml/issues/14091"&gt;ocaml/ocaml#14091&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/dce8e77e7d90a33ae975b62cce20013b81d7c4f5"&gt;dce8e77e7d90a33ae975b62cce20013b81d7c4f5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14119" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization&lt;/strong&gt;&lt;/a&gt; in Set and Map modules by replacing &lt;code&gt;cardinal = 0&lt;/code&gt; checks with more efficient &lt;code&gt;is_empty&lt;/code&gt; calls (&lt;a href="https://github.com/ocaml/ocaml/issues/14119"&gt;ocaml/ocaml#14119&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/c064ea2694b661065a7388174431ee3dcc3c0c0d"&gt;c064ea2694b661065a7388174431ee3dcc3c0c0d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;strong style="color: #cc6600;"&gt;typechecker internal error&lt;/strong&gt; due to wrong exception handling in module compilation (&lt;a href="https://github.com/ocaml/ocaml/commit/fa858d9d631782d95d7d5a9c5abe595e8ea506a6"&gt;fa858d9d631782d95d7d5a9c5abe595e8ea506a6&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Corrected &lt;strong style="color: #cc6600;"&gt;Float.frexp documentation&lt;/strong&gt; to specify &lt;code&gt;0.5 &lt;= abs x &lt; 1.0&lt;/code&gt; instead of &lt;code&gt;0.5 &lt;= x &lt; 1.0&lt;/code&gt; for proper absolute value handling (&lt;a href="https://github.com/ocaml/ocaml/commit/c064ea2694b661065a7388174431ee3dcc3c0c0d"&gt;c064ea2694b661065a7388174431ee3dcc3c0c0d&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Technical focus&lt;/strong&gt; centered on runtime debugging tools with extensive Thread Sanitizer integration work across multiple compatibility issues in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Governance development&lt;/strong&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; with conflict of interest policy proposal for the OCaml Language Committee addressing transparency and disclosure requirements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Quality improvements&lt;/strong&gt; spanning type system refinements, compiler performance optimizations, and documentation corrections with strong community engagement&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility&lt;/strong&gt; work addressing multiple architectures and runtime environments, reflecting commitment to broad ecosystem support&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Leadership coordination&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; contributing significantly to both repositories: implementing Thread Sanitizer fixes in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; while authoring governance policy in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14135" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Technical expertise sharing&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; providing type system analysis in &lt;a href="https://github.com/ocaml/ocaml/issues/14135"&gt;ocaml/ocaml#14135&lt;/a&gt; and governance policy feedback in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt; including disclosure of institutional relationships&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community engagement patterns&lt;/strong&gt; showing consistent involvement from core maintainers across both technical implementation and governance discussions, ensuring alignment between language development and committee procedures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation fragmentation&lt;/strong&gt; discussion initiated by &lt;a href="https://github.com/dbuenzli"&gt;Daniel Bünzli&lt;/a&gt; about consolidating OCaml documentation scattered across multiple repositories and improving discoverability for users (&lt;a href="https://github.com/ocaml/ocaml/discussions/123"&gt;ocaml/ocaml Discussion #123&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Conflict of interest policy design&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; providing analysis of institutional differences between public institutions like INRIA versus private companies, and disclosure of Jane Street funding relationships&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14082" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Thread Sanitizer debugging&lt;/strong&gt;&lt;/a&gt; collaborative troubleshooting involving &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, and community members to resolve runtime compatibility issues (&lt;a href="https://github.com/ocaml/ocaml/issues/14082"&gt;ocaml/ocaml#14082&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Implementation pragmatism&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/yallop"&gt;Jeremy Yallop&lt;/a&gt; in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt; emphasizing need for operational committee policies over lengthy deliberation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Runtime debugging tools&lt;/strong&gt; emphasis with extensive Thread Sanitizer integration work reflecting increased focus on memory safety and concurrent programming support across multiple compatibility scenarios&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Governance maturity&lt;/strong&gt; development with formal conflict of interest policies and transparency requirements for the OCaml Language Committee, showing institutional development of the language governance&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility&lt;/strong&gt; improvements across multiple architectures (AMD64, ARM64, PowerPC, RISC-V, S390X) demonstrating commitment to broad platform support in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community-driven quality&lt;/strong&gt; improvements with detailed issue reports, collaborative debugging, and thorough testing by external contributors working alongside core maintainers&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Deterministic compilation&lt;/strong&gt; work addressing build reproducibility concerns important for packaging and distribution, reflecting ecosystem maturity needs&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-28"/><summary>Thread Sanitizer compatibility work and governance policy development dominated core group activity this week</summary><published>2025-07-13T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-29</id><title>Week 29, 2025: Compiler improvements with enhanced error messages, C++ compatibility fixes, and code quality improvements</title><updated>2025-07-20T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;Enhanced &lt;a href="https://github.com/ocaml/ocaml/issues/14146" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;error messages&lt;/strong&gt;&lt;/a&gt; for external declarations with non-syntactic arity, replacing internal errors with clear user-facing messages (&lt;a href="https://github.com/ocaml/ocaml/issues/14146"&gt;ocaml/ocaml#14146&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improved &lt;a href="https://github.com/ocaml/ocaml/issues/14139" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;C++ header compatibility&lt;/strong&gt;&lt;/a&gt; by moving atomic type definitions to misc.h for better integration with C++ codebases (&lt;a href="https://github.com/ocaml/ocaml/issues/14139"&gt;ocaml/ocaml#14139&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14155" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Compiler test auditing&lt;/strong&gt;&lt;/a&gt; with fixes for unexecuted phrases in expect tests ensuring test suite reliability (&lt;a href="https://github.com/ocaml/ocaml/issues/14155"&gt;ocaml/ocaml#14155&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Primary activity concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with compiler improvements and developer experience enhancements (&lt;a href="https://github.com/ocaml/ocaml/issues/14146"&gt;ocaml/ocaml#14146&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14139"&gt;ocaml/ocaml#14139&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Focus on error reporting improvements replacing internal compiler errors with user-friendly messages (&lt;a href="https://github.com/ocaml/ocaml/issues/14146"&gt;ocaml/ocaml#14146&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Code quality initiatives including variable renaming for better maintainability (&lt;a href="https://github.com/ocaml/ocaml/issues/14141"&gt;ocaml/ocaml#14141&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Runtime system discussions around memory management and GC optimization (&lt;a href="https://github.com/ocaml/ocaml/issues/14153"&gt;ocaml/ocaml#14153&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;GC performance tuning&lt;/strong&gt;&lt;/a&gt; discussion on OCaml 5 behavior requiring &lt;code&gt;space_overhead&lt;/code&gt; adjustments for production applications by &lt;a href="https://github.com/nmote"&gt;Nat Mote&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14151" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime events reliability&lt;/strong&gt;&lt;/a&gt; issues in high-frequency environments with corrupted streams reported by &lt;a href="https://github.com/mattiasdrp"&gt;Mattias&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14151"&gt;ocaml/ocaml#14151&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14153" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Minor heap memory reservation&lt;/strong&gt;&lt;/a&gt; optimization proposals by &lt;a href="https://github.com/kayceesrk"&gt;KC Sivaramakrishnan&lt;/a&gt; to reduce virtual memory usage for single-domain programs (&lt;a href="https://github.com/ocaml/ocaml/issues/14153"&gt;ocaml/ocaml#14153&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14146" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced error reporting&lt;/strong&gt;&lt;/a&gt; with clearer messages replacing internal compiler errors for better developer experience (&lt;a href="https://github.com/ocaml/ocaml/issues/14146"&gt;ocaml/ocaml#14146&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14153" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime system optimization&lt;/strong&gt;&lt;/a&gt; discussions around memory management and GC behavior in multicore environments (&lt;a href="https://github.com/ocaml/ocaml/issues/14153"&gt;ocaml/ocaml#14153&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14141" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Code maintainability&lt;/strong&gt;&lt;/a&gt; efforts through systematic renaming and cleanup of internal structures (&lt;a href="https://github.com/ocaml/ocaml/issues/14141"&gt;ocaml/ocaml#14141&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14148"&gt;ocaml/ocaml#14148&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14139" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility&lt;/strong&gt;&lt;/a&gt; improvements especially for C++ integration (&lt;a href="https://github.com/ocaml/ocaml/issues/14139"&gt;ocaml/ocaml#14139&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-29"/><summary>Compiler improvements with enhanced error messages, C++ compatibility fixes, and code quality improvements</summary><published>2025-07-20T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-30</id><title>Week 30, 2025: Major hashtable API additions and shared heap optimizations merged this week</title><updated>2025-07-27T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14060" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Hashtable API expansion&lt;/strong&gt;&lt;/a&gt; with new &lt;code&gt;find_and_remove&lt;/code&gt; and &lt;code&gt;find_and_replace&lt;/code&gt; functions by &lt;a href="https://github.com/giltho"&gt;Sacha Ayoun&lt;/a&gt; that return previous bindings, eliminating need for separate find+remove operations (&lt;a href="https://github.com/ocaml/ocaml/issues/14060"&gt;ocaml/ocaml#14060&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14149" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Pattern matching improvement&lt;/strong&gt;&lt;/a&gt; for first-class modules to distinguish &lt;code&gt;(module M : S)&lt;/code&gt; from &lt;code&gt;(module M) : (module S)&lt;/code&gt; by &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt;, enabling future modular explicit features (&lt;a href="https://github.com/ocaml/ocaml/issues/14149"&gt;ocaml/ocaml#14149&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13616" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Shared heap optimization&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/sadiqj"&gt;Sadiq Jaffer&lt;/a&gt; using run-length encoding for free blocks, providing substantial speedups for sparse heaps while maintaining performance for dense ones (&lt;a href="https://github.com/ocaml/ocaml/issues/13616"&gt;ocaml/ocaml#13616&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Primary activity&lt;/strong&gt; concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with significant user-facing features and runtime improvements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Seven contributors&lt;/strong&gt; delivered major standard library enhancements, runtime fixes, and parser infrastructure updates&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;No activity&lt;/strong&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; during this week&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Focus areas&lt;/strong&gt; included hashtable API ergonomics, multicore runtime stability, and type system preparation for advanced features&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14158" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime robustness&lt;/strong&gt;&lt;/a&gt; emphasis with multiple fixes to domain management and memory handling edge cases in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;, showing maturation of multicore support through work on (&lt;a href="https://github.com/ocaml/ocaml/issues/14158"&gt;ocaml/ocaml#14158&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14164"&gt;ocaml/ocaml#14164&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14060" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;API ergonomics&lt;/strong&gt;&lt;/a&gt; improvements like hashtable functions that eliminate common find+remove patterns in (&lt;a href="https://github.com/ocaml/ocaml/issues/14060"&gt;ocaml/ocaml#14060&lt;/a&gt;), reflecting user feedback incorporation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14149" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Parser infrastructure&lt;/strong&gt;&lt;/a&gt; enhancements preparing for advanced features like modular explicits through (&lt;a href="https://github.com/ocaml/ocaml/issues/14149"&gt;ocaml/ocaml#14149&lt;/a&gt;), indicating ongoing type system evolution&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-30"/><summary>Major hashtable API additions and shared heap optimizations merged this week</summary><published>2025-07-27T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-31</id><title>Week 31, 2025: Major GC performance improvements and OCaml Language Committee governance policy development dominate this week</title><updated>2025-08-03T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14168" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Stack memory tracking&lt;/strong&gt;&lt;/a&gt; restored in &lt;code&gt;Gc.stat&lt;/code&gt; with new &lt;code&gt;live_stacks_words&lt;/code&gt; field for monitoring fiber memory usage (&lt;a href="https://github.com/ocaml/ocaml/issues/14168"&gt;ocaml/ocaml#14168&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14053" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced memory profiling&lt;/strong&gt;&lt;/a&gt; with &lt;code&gt;Gc.Memprof.start&lt;/code&gt; now allowing profile replacement without stopping in all domains, plus new &lt;code&gt;is_sampling&lt;/code&gt; function (&lt;a href="https://github.com/ocaml/ocaml/issues/14053"&gt;ocaml/ocaml#14053&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13580" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Mark-delay GC performance improvement&lt;/strong&gt;&lt;/a&gt; introducing sweep-only phase at start of major GC cycle, reducing latent garbage delay by approximately half a major GC cycle (&lt;a href="https://github.com/ocaml/ocaml/issues/13580"&gt;ocaml/ocaml#13580&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14169" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime fiber cache optimization&lt;/strong&gt;&lt;/a&gt; ensuring aligned fibers are hosted in cache whenever possible, fixing corner cases where small fibers avoided the cache on reallocation (&lt;a href="https://github.com/ocaml/ocaml/issues/14169"&gt;ocaml/ocaml#14169&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14175" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Ephemeron performance optimization&lt;/strong&gt;&lt;/a&gt; by removing duplicate status check in &lt;code&gt;orph_ephe_list_verify_status&lt;/code&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14175"&gt;ocaml/ocaml#14175&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14147" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Row type error message improvements&lt;/strong&gt;&lt;/a&gt; showing type aliases for row types in error messages, e.g. &lt;code&gt;&lt; foo : int; .. as $0&gt;&lt;/code&gt; when &lt;code&gt;$0&lt;/code&gt; is introduced by a GADT constructor (&lt;a href="https://github.com/ocaml/ocaml/issues/14147"&gt;ocaml/ocaml#14147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14029" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Nonexpansive %identity primitive&lt;/strong&gt;&lt;/a&gt; recognition allowing compiler to properly handle &lt;code&gt;Obj.magic&lt;/code&gt; and similar primitives without value restriction (&lt;a href="https://github.com/ocaml/ocaml/issues/14029"&gt;ocaml/ocaml#14029&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14176" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced deprecation alerts&lt;/strong&gt;&lt;/a&gt; now include filename location for implicit uses of bundled libraries (unix, re, threads, dynlink) (&lt;a href="https://github.com/ocaml/ocaml/issues/14176"&gt;ocaml/ocaml#14176&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Performance-focused development&lt;/strong&gt; with multiple runtime optimizations in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; targeting garbage collection efficiency, fiber management, and memory profiling capabilities&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Governance formalization&lt;/strong&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; with the OCaml Language Committee establishing formal conflict of interest policies and transparency requirements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14029" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Jane Street feature integration&lt;/strong&gt;&lt;/a&gt; continuing with &lt;code&gt;%identity&lt;/code&gt; nonexpansive recognition and include functor implementation from OxCaml in &lt;a href="https://github.com/ocaml/ocaml/issues/14029"&gt;ocaml/ocaml#14029&lt;/a&gt; and &lt;a href="https://github.com/ocaml/ocaml/issues/14177"&gt;ocaml/ocaml#14177&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Developer experience improvements&lt;/strong&gt; through enhanced error messages for type system edge cases and better debugging information across the core compiler&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Community engagement&lt;/strong&gt; with language feature discussions on effect syntax and tuple coercion proposals receiving detailed community feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Shared contributor involvement&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; leading runtime improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; while authoring the conflict of interest policy RFC in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14053" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Committee member coordination&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gadmm"&gt;Guillaume Munch-Maccagnoni&lt;/a&gt; contributing both multicore memory profiling enhancements to &lt;a href="https://github.com/ocaml/ocaml/issues/14053"&gt;ocaml/ocaml#14053&lt;/a&gt; and governance policy feedback in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14177" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language evolution planning&lt;/strong&gt;&lt;/a&gt; connecting RFC governance discussions with active feature implementations like the include functor from Jane Street's OxCaml being integrated in &lt;a href="https://github.com/ocaml/ocaml/issues/14177"&gt;ocaml/ocaml#14177&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14178" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Effect keyword syntax proposal&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/Alizter"&gt;Ali Caglayan&lt;/a&gt; suggesting syntactic sugar for effect declarations similar to exceptions, ultimately concluding that current &lt;code&gt;type _ eff +=&lt;/code&gt; syntax remains acceptable (&lt;a href="https://github.com/ocaml/ocaml/issues/14178"&gt;ocaml/ocaml#14178&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14180" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Tuple label coercion feature&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/malekbr"&gt;Malek Ben Romdhane&lt;/a&gt; proposing to allow coercion like &lt;code&gt;(1, 2) :&gt; (x:int * y:int)&lt;/code&gt;, currently under triage discussion with concerns about subtyping relation predictability (&lt;a href="https://github.com/ocaml/ocaml/issues/14180"&gt;ocaml/ocaml#14180&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Conflict of interest policy framework&lt;/strong&gt;&lt;/a&gt; extensively discussed by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, &lt;a href="https://github.com/yallop"&gt;Jeremy Yallop&lt;/a&gt;, and &lt;a href="https://github.com/gadmm"&gt;Guillaume Munch-Maccagnoni&lt;/a&gt; covering institutional vs. company affiliations and decision-making transparency in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Committee decision-making process&lt;/strong&gt;&lt;/a&gt; debate including consensus vs. voting approaches for technical decisions and handling of conflicted members in deliberations (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Financial transparency requirements&lt;/strong&gt;&lt;/a&gt; discussion regarding OCaml Software Foundation funding relationships and their impact on committee member participation (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13580" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization focus&lt;/strong&gt;&lt;/a&gt; with multiple runtime improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; targeting garbage collection efficiency, fiber management, and memory profiling capabilities (&lt;a href="https://github.com/ocaml/ocaml/issues/13580"&gt;ocaml/ocaml#13580&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14169"&gt;ocaml/ocaml#14169&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14175"&gt;ocaml/ocaml#14175&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Governance formalization&lt;/strong&gt;&lt;/a&gt; trend with the OCaml Language Committee establishing formal conflict of interest policies and transparency requirements in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14029" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Jane Street feature integration&lt;/strong&gt;&lt;/a&gt; continuing with &lt;code&gt;%identity&lt;/code&gt; nonexpansive recognition (&lt;a href="https://github.com/ocaml/ocaml/issues/14029"&gt;ocaml/ocaml#14029&lt;/a&gt;) and include functor implementation from OxCaml (&lt;a href="https://github.com/ocaml/ocaml/issues/14177"&gt;ocaml/ocaml#14177&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14053" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore ecosystem maturation&lt;/strong&gt;&lt;/a&gt; with improved memory profiling APIs (&lt;a href="https://github.com/ocaml/ocaml/issues/14053"&gt;ocaml/ocaml#14053&lt;/a&gt;) and testing infrastructure updates for better domain handling (&lt;a href="https://github.com/ocaml/ocaml/issues/14174"&gt;ocaml/ocaml#14174&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14147" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Developer experience improvements&lt;/strong&gt;&lt;/a&gt; through enhanced error messages for type system edge cases (&lt;a href="https://github.com/ocaml/ocaml/issues/14147"&gt;ocaml/ocaml#14147&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14111"&gt;ocaml/ocaml#14111&lt;/a&gt;) and better debugging information&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Community transparency emphasis&lt;/strong&gt;&lt;/a&gt; with increased focus on making committee decision-making processes more visible and accountable to the broader OCaml community through &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-31"/><summary>Major GC performance improvements and OCaml Language Committee governance policy development dominate this week</summary><published>2025-08-03T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-32</id><title>Week 32, 2025: Core OCaml compiler received three critical bug fixes focusing on runtime stability and enhanced error reporting</title><updated>2025-08-10T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/12879" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime heap reallocation fix&lt;/strong&gt;&lt;/a&gt; ensuring minor heap is properly emptied before reallocation to prevent intermittent failures (&lt;a href="https://github.com/ocaml/ocaml/issues/12879"&gt;ocaml/ocaml#12879&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14181" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type checker cycle prevention&lt;/strong&gt;&lt;/a&gt; for recursive types under &lt;code&gt;-rectypes&lt;/code&gt; flag, fixing non-termination issues in type application (&lt;a href="https://github.com/ocaml/ocaml/issues/14181"&gt;ocaml/ocaml#14181&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14111" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced error messages&lt;/strong&gt;&lt;/a&gt; for universal type variable mismatches, explaining when variables cannot be generalized and quantifier conflicts (&lt;a href="https://github.com/ocaml/ocaml/issues/14111"&gt;ocaml/ocaml#14111&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13658" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Recursive function type handling&lt;/strong&gt;&lt;/a&gt; improvements preventing unbounded labeled and optional arguments in function types (&lt;a href="https://github.com/ocaml/ocaml/issues/13658"&gt;ocaml/ocaml#13658&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Primary focus on &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; with three major bug fixes merged targeting runtime stability and type system robustness&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;No activity in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; during this period, indicating focus on implementation rather than language design discussions&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Core compiler maintenance&lt;/strong&gt; prioritizing reliability improvements and enhanced developer experience through better error reporting&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Active community engagement&lt;/strong&gt; with technical discussions about functor limitations, type inference improvements, and runtime performance characteristics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14151" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime events ring buffer limitations&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/sadiqj"&gt;Sadiq Jaffer&lt;/a&gt; providing detailed technical explanation of design trade-offs between producer blocking, disk spilling, and event dropping (&lt;a href="https://github.com/ocaml/ocaml/issues/14151"&gt;ocaml/ocaml#14151&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14183" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Generative functor type system constraints&lt;/strong&gt;&lt;/a&gt; discussion with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; explaining type safety requirements and proposing alternative approaches using type arguments (&lt;a href="https://github.com/ocaml/ocaml/issues/14183"&gt;ocaml/ocaml#14183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14182" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type inference pipeline improvements&lt;/strong&gt;&lt;/a&gt; dialogue between &lt;a href="https://github.com/rr0gi"&gt;@rr0gi&lt;/a&gt; and &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; about conditional rewriting limitations and type checking order issues (&lt;a href="https://github.com/ocaml/ocaml/issues/14182"&gt;ocaml/ocaml#14182&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Compiler stability improvements&lt;/strong&gt; prioritizing runtime reliability and type checker robustness through systematic bug fixes in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14111" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Enhanced developer experience&lt;/strong&gt;&lt;/a&gt; via improved error messages that provide clearer explanations of type system constraints (&lt;a href="https://github.com/ocaml/ocaml/issues/14111"&gt;ocaml/ocaml#14111&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/12879" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Performance optimization&lt;/strong&gt;&lt;/a&gt; in runtime components, particularly around memory management and garbage collection (&lt;a href="https://github.com/ocaml/ocaml/issues/12879"&gt;ocaml/ocaml#12879&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14181" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type system edge case handling&lt;/strong&gt;&lt;/a&gt; addressing complex interactions between recursive types, functors, and type inference (&lt;a href="https://github.com/ocaml/ocaml/issues/14181"&gt;ocaml/ocaml#14181&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14183"&gt;ocaml/ocaml#14183&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-32"/><summary>Core OCaml compiler received three critical bug fixes focusing on runtime stability and enhanced error reporting</summary><published>2025-08-10T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-33</id><title>Week 33, 2025: Active development in ocaml/ocaml with toplevel fixes, runtime improvements, and ongoing stdlib expansion work</title><updated>2025-08-17T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;Fixed &lt;a href="https://github.com/ocaml/ocaml/issues/14192" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;toplevel printing&lt;/strong&gt;&lt;/a&gt; of qualified labels to properly hide &lt;code&gt;Lib__Module&lt;/code&gt; module paths when displaying variant constructors and record labels (&lt;a href="https://github.com/ocaml/ocaml/issues/14192"&gt;ocaml/ocaml#14192&lt;/a&gt;) by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improved &lt;a href="https://github.com/ocaml/ocaml/issues/14187" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;runtime garbage collection&lt;/strong&gt;&lt;/a&gt; by removing outdated comment and reverting to more intuitive &lt;code&gt;caml_minor_collection()&lt;/code&gt; function call (&lt;a href="https://github.com/ocaml/ocaml/issues/14187"&gt;ocaml/ocaml#14187&lt;/a&gt;) by &lt;a href="https://github.com/NickBarnes"&gt;Nick Barnes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14185" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Primary activity&lt;/strong&gt;&lt;/a&gt; concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with eight new PRs opened covering developer experience improvements, runtime optimizations, and standard library additions (&lt;a href="https://github.com/ocaml/ocaml/issues/14185"&gt;ocaml/ocaml#14185&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14186"&gt;ocaml/ocaml#14186&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14187"&gt;ocaml/ocaml#14187&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14190"&gt;ocaml/ocaml#14190&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14191"&gt;ocaml/ocaml#14191&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14192"&gt;ocaml/ocaml#14192&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Seven active contributors&lt;/strong&gt; delivered merged improvements and ongoing feature development with focus on debugging capabilities and stdlib completeness&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;No activity&lt;/strong&gt; recorded in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; repository during this period&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14186" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Developer debugging tools&lt;/strong&gt;&lt;/a&gt; with tail call optimization control and GC statistics improvements for better profiling and debugging capabilities (&lt;a href="https://github.com/ocaml/ocaml/issues/14186"&gt;ocaml/ocaml#14186&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14191"&gt;ocaml/ocaml#14191&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14185" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Standard library completeness&lt;/strong&gt;&lt;/a&gt; through systematic addition of missing utility functions like &lt;code&gt;split_map&lt;/code&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14185"&gt;ocaml/ocaml#14185&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14061" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime system improvements&lt;/strong&gt;&lt;/a&gt; focused on multi-domain stability and correctness (&lt;a href="https://github.com/ocaml/ocaml/issues/14061"&gt;ocaml/ocaml#14061&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14187"&gt;ocaml/ocaml#14187&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-33"/><summary>Active development in ocaml/ocaml with toplevel fixes, runtime improvements, and ongoing stdlib expansion work</summary><published>2025-08-17T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-34</id><title>Week 34, 2025: Runtime events system improvements and OCaml Language Committee governance policy discussions</title><updated>2025-08-24T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14189" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime events system&lt;/strong&gt;&lt;/a&gt; enhancements with new &lt;code&gt;EV_C_MINOR_PROMOTED_WORDS&lt;/code&gt; and &lt;code&gt;EV_C_MINOR_ALLOCATED_WORDS&lt;/code&gt; counters that report values in words instead of bytes for consistency in &lt;a href="https://github.com/ocaml/ocaml/issues/14189"&gt;ocaml/ocaml#14189&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation improvements&lt;/strong&gt; for runtime events counters with clearer unit specifications, marking existing byte-based counters as per-domain and highlighting word-based units throughout the API in &lt;a href="https://github.com/ocaml/ocaml/commit/2cbb0075e02bc2046b6724366fbd5b54949cd312"&gt;2cbb007&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Core compiler development&lt;/strong&gt; focused on runtime system observability with new word-based allocation counters and comprehensive documentation updates in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14202" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type system robustness&lt;/strong&gt;&lt;/a&gt; improvements through variance checking fixes for private type aliases in &lt;a href="https://github.com/ocaml/ocaml/issues/14202"&gt;ocaml/ocaml#14202&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language governance&lt;/strong&gt;&lt;/a&gt; discussions in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; centered on conflicts of interest policy for the OCaml Language Committee in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14201" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility&lt;/strong&gt;&lt;/a&gt; efforts addressing Windows-specific float formatting inconsistencies reported in &lt;a href="https://github.com/ocaml/ocaml/issues/14201"&gt;ocaml/ocaml#14201&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Language committee governance&lt;/strong&gt;&lt;/a&gt; discussions in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt; involve the same core maintainers (&lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;) who are actively contributing technical fixes to &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Institutional transparency&lt;/strong&gt; analysis in the RFCs repository references Jane Street funding relationships that directly impact compiler development work happening in the main OCaml repository&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14201" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Windows float formatting inconsistency&lt;/strong&gt;&lt;/a&gt; reported by &lt;a href="https://github.com/mjambon"&gt;Martin Jambon&lt;/a&gt; where &lt;code&gt;string_of_float&lt;/code&gt; produces zero-padded exponents on Windows but not on Linux/macOS, affecting CI tests in &lt;a href="https://github.com/ocaml/ocaml/issues/14201"&gt;ocaml/ocaml#14201&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14195" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Domain stack size configuration&lt;/strong&gt;&lt;/a&gt; request by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; for making pthread stack sizes configurable to handle deep recursion in C FFI code in &lt;a href="https://github.com/ocaml/ocaml/issues/14195"&gt;ocaml/ocaml#14195&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;OCaml Language Committee governance&lt;/strong&gt;&lt;/a&gt; debate by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; with extensive policy framework discussion including transparency measures and committee member affiliations in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Institutional bias analysis&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; examining differences between public research institutions and private companies in committee decision-making, with disclosure of Jane Street funding for INRIA compiler development in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14189" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Runtime observability focus&lt;/strong&gt;&lt;/a&gt; with enhanced metrics and clearer documentation to support better profiling and debugging tools, as seen in &lt;a href="https://github.com/ocaml/ocaml/issues/14189"&gt;ocaml/ocaml#14189&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14201" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility efforts&lt;/strong&gt;&lt;/a&gt; addressing platform-specific behaviors that cause test failures and development friction, particularly Windows issues in &lt;a href="https://github.com/ocaml/ocaml/issues/14201"&gt;ocaml/ocaml#14201&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14202" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Type system robustness&lt;/strong&gt;&lt;/a&gt; through careful review and fixing of edge cases in variance checking and module system semantics in &lt;a href="https://github.com/ocaml/ocaml/issues/14202"&gt;ocaml/ocaml#14202&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Governance transparency initiatives&lt;/strong&gt;&lt;/a&gt; with committee members actively discussing and implementing policies for conflict of interest disclosure and decision-making processes in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-34"/><summary>Runtime events system improvements and OCaml Language Committee governance policy discussions</summary><published>2025-08-24T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-35</id><title>Week 35, 2025: Active week with significant memory model fixes, stdlib additions, and typechecker improvements merged to trunk</title><updated>2025-08-31T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14209" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Memory model fix&lt;/strong&gt;&lt;/a&gt; for &lt;code&gt;Weak.set&lt;/code&gt; by &lt;a href="https://github.com/damiendoligez"&gt;Damien Doligez&lt;/a&gt; addresses data race vulnerabilities in concurrent usage (&lt;a href="https://github.com/ocaml/ocaml/issues/14209"&gt;ocaml/ocaml#14209&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;New &lt;code&gt;List.split_map&lt;/code&gt; function&lt;/strong&gt; added to stdlib by &lt;a href="https://github.com/nojb"&gt;Nicolás Ojeda Bär&lt;/a&gt; that combines map and split operations without intermediate allocations (&lt;a href="https://github.com/ocaml/ocaml/issues/14185"&gt;ocaml/ocaml#14185&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14201" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Functor error message improvement&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; provides clearer diagnostics when a functor is its own unsafe functor (&lt;a href="https://github.com/ocaml/ocaml/issues/14201"&gt;ocaml/ocaml#14201&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;&lt;code&gt;%identity&lt;/code&gt; recognized as nonexpansive&lt;/strong&gt; by &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt; improves type inference for identity functions (&lt;a href="https://github.com/ocaml/ocaml/issues/14029"&gt;ocaml/ocaml#14029&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14175" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Ephemeron performance optimization&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; eliminates duplicate status checks (&lt;a href="https://github.com/ocaml/ocaml/issues/14175"&gt;ocaml/ocaml#14175&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14212" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Test infrastructure improvement&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/damiendoligez"&gt;Damien Doligez&lt;/a&gt; shows test names before execution in ocamltest (&lt;a href="https://github.com/ocaml/ocaml/issues/14212"&gt;ocaml/ocaml#14212&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Primary activity concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; with multiple significant features merged to trunk, while &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; had no activity during this period&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Memory model and multicore safety focus&lt;/strong&gt; with critical fixes for concurrent programming, particularly in weak references and ephemerons&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Developer experience improvements&lt;/strong&gt; through enhanced error messages, better test infrastructure, and stdlib additions&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform compatibility&lt;/strong&gt; work including NetBSD pthread support and variance constraint improvements&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Runtime stability emphasis&lt;/strong&gt; with fixes spanning garbage collection, type checking, and test infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Module subtyping discussion&lt;/strong&gt; by &lt;a href="https://github.com/garrigue"&gt;Jacques Garrigue&lt;/a&gt; regarding whether to relax current rules that prohibit exporting abbreviations as variants, addressing unclear error messages when concrete types are treated as abstract (&lt;a href="https://github.com/ocaml/ocaml/discussions/14204"&gt;ocaml/ocaml#14204&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Multicore stability emphasis&lt;/strong&gt; with significant attention to memory model correctness and concurrent programming safety, particularly in weak references and ephemerons&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Developer experience improvements&lt;/strong&gt; through better error messages, clearer diagnostics, and enhanced debugging support&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform robustness&lt;/strong&gt; with ongoing fixes for various Unix-like systems including NetBSD compatibility&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-35"/><summary>Active week with significant memory model fixes, stdlib additions, and typechecker improvements merged to trunk</summary><published>2025-08-31T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-36</id><title>Week 36, 2025: Critical bug fixes for C++ interoperability, memory model correctness, and build system improvements with enhanced error messages</title><updated>2025-09-07T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;Fixed &lt;a href="https://github.com/ocaml/ocaml/issues/14220" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;C++ name-mangling issue&lt;/strong&gt;&lt;/a&gt; with thread-local storage on Cygwin systems by preferring &lt;code&gt;_Thread_local&lt;/code&gt; over &lt;code&gt;thread_local&lt;/code&gt; to avoid flexlink compatibility problems (&lt;a href="https://github.com/ocaml/ocaml/issues/14220"&gt;ocaml/ocaml#14220&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improved &lt;a href="https://github.com/ocaml/ocaml/issues/14225" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;GADT usage warnings&lt;/strong&gt;&lt;/a&gt; by silencing unused-constructor warnings for private variant constructors used as type indices, enabling the recommended &lt;code&gt;type a = private A&lt;/code&gt; pattern (&lt;a href="https://github.com/ocaml/ocaml/issues/14225"&gt;ocaml/ocaml#14225&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;a href="https://github.com/ocaml/ocaml/issues/14209" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;memory model bug&lt;/strong&gt;&lt;/a&gt; in &lt;code&gt;Weak.set&lt;/code&gt; that could cause data races and memory corruption in concurrent programs using weak references (&lt;a href="https://github.com/ocaml/ocaml/issues/14209"&gt;ocaml/ocaml#14209&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enhanced &lt;a href="https://github.com/ocaml/ocaml/issues/14221" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;functor error messages&lt;/strong&gt;&lt;/a&gt; to include missing type equalities, fixing confusing "type t is not compatible with type t" messages (&lt;a href="https://github.com/ocaml/ocaml/issues/14221"&gt;ocaml/ocaml#14221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improved &lt;strong style="color: #cc6600;"&gt;toplevel constructor printing&lt;/strong&gt; to show shorter paths when only some modules along the path are open (&lt;a href="https://github.com/ocaml/ocaml/commit/3224d3d8413825ac7b536ba1bb9cddfe26bc1041"&gt;ocaml/ocaml@3224d3d&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Core OCaml compiler development focused on critical bug fixes and stability improvements during week 36, with no activity in the RFCs repository&lt;/li&gt;
&lt;li&gt;Major work addressed cross-platform compatibility issues, particularly C++ interoperability on Windows/Cygwin systems (&lt;a href="https://github.com/ocaml/ocaml/issues/14220"&gt;ocaml/ocaml#14220&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Memory safety improvements targeted multicore program correctness with fixes to concurrent weak reference operations (&lt;a href="https://github.com/ocaml/ocaml/issues/14209"&gt;ocaml/ocaml#14209&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Developer experience enhancements included better error messages for advanced type system features like GADTs and functors (&lt;a href="https://github.com/ocaml/ocaml/issues/14225"&gt;ocaml/ocaml#14225&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14221"&gt;ocaml/ocaml#14221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Build system robustness improved through fixes to parallel compilation issues and Windows environment compatibility (&lt;a href="https://github.com/ocaml/ocaml/issues/14231"&gt;ocaml/ocaml#14231&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14234"&gt;ocaml/ocaml#14234&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14224" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;GADT warning regression&lt;/strong&gt;&lt;/a&gt; in trunk caused by abstract type handling changes, with extensive discussion about using &lt;code&gt;type a = private A&lt;/code&gt; vs polymorphic variants as workarounds, involving multiple core maintainers (&lt;a href="https://github.com/ocaml/ocaml/issues/14224"&gt;ocaml/ocaml#14224&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14220" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;C++ thread-local storage semantics&lt;/strong&gt;&lt;/a&gt; debate around platform-specific solutions for thread&lt;em&gt;local vs _Thread&lt;/em&gt;local compatibility across MSVC, GCC, and Cygwin environments (&lt;a href="https://github.com/ocaml/ocaml/issues/14220"&gt;ocaml/ocaml#14220&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14209" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Memory model correctness&lt;/strong&gt;&lt;/a&gt; discussion regarding publication safety in concurrent weak reference operations and ThreadSanitizer integration improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14209"&gt;ocaml/ocaml#14209&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14209" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Multicore program correctness&lt;/strong&gt;&lt;/a&gt; emphasis with memory model fixes for concurrent weak references and ThreadSanitizer integration work, showing continued focus on making OCaml 5.x more robust for parallel programming (&lt;a href="https://github.com/ocaml/ocaml/issues/14209"&gt;ocaml/ocaml#14209&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14220" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Cross-platform C++ interoperability&lt;/strong&gt;&lt;/a&gt; improvements addressing platform-specific compilation issues, particularly Windows/Cygwin systems with flexlink integration challenges (&lt;a href="https://github.com/ocaml/ocaml/issues/14220"&gt;ocaml/ocaml#14220&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14221" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Developer experience improvements&lt;/strong&gt;&lt;/a&gt; through enhanced error messages, better warning handling for advanced type system features like GADTs, and more intuitive build system behavior (&lt;a href="https://github.com/ocaml/ocaml/issues/14221"&gt;ocaml/ocaml#14221&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14225"&gt;ocaml/ocaml#14225&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14126" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Advanced type system refinements&lt;/strong&gt;&lt;/a&gt; with ongoing work on GADT patterns, existential types in as-patterns, and variance annotation documentation, showing continued evolution of OCaml's type system (&lt;a href="https://github.com/ocaml/ocaml/issues/14126"&gt;ocaml/ocaml#14126&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14224"&gt;ocaml/ocaml#14224&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-36"/><summary>Critical bug fixes for C++ interoperability, memory model correctness, and build system improvements with enhanced error messages</summary><published>2025-09-07T00:00:00+00:00</published></entry><entry><id>https://thicket.dev//groups/core/2025/week-37</id><title>Week 37, 2025: Major documentation additions to ocaml/ocaml plus new RFC syntax proposal and Language Committee governance discussions</title><updated>2025-09-14T00:00:00+00:00</updated><content type="html">&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13747" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Native debugger documentation&lt;/strong&gt;&lt;/a&gt; added comprehensive 430-line manual section for debugging OCaml executables with GDB and LLDB, including calling conventions, DWARF support, and practical examples (&lt;a href="https://github.com/ocaml/ocaml/issues/13747"&gt;ocaml/ocaml#13747&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Bivariant type parameters&lt;/strong&gt; now supported with &lt;code&gt;+-&lt;/code&gt; and &lt;code&gt;-+&lt;/code&gt; syntax for type parameters that are both covariant and contravariant (&lt;a href="https://github.com/ocaml/ocaml/commit/53643702"&gt;ocaml/ocaml@53643702&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14225" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Private constructor warning fix&lt;/strong&gt;&lt;/a&gt; eliminates false positive unused constructor warnings for private constructors in type definitions (&lt;a href="https://github.com/ocaml/ocaml/issues/14225"&gt;ocaml/ocaml#14225&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14226" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Format.sprintf documentation&lt;/strong&gt;&lt;/a&gt; improved to clarify differences with &lt;code&gt;asprintf&lt;/code&gt; and recommend &lt;code&gt;asprintf&lt;/code&gt; for &lt;code&gt;%a&lt;/code&gt; compatibility (&lt;a href="https://github.com/ocaml/ocaml/issues/14226"&gt;ocaml/ocaml#14226&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14123" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;GC compaction improvements&lt;/strong&gt;&lt;/a&gt; with integral type hygiene fixes throughout compaction code to prevent integer overflow bugs (&lt;a href="https://github.com/ocaml/ocaml/issues/14123"&gt;ocaml/ocaml#14123&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Core language development&lt;/strong&gt; focused on developer experience improvements with major documentation additions and type system refinements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Language governance evolution&lt;/strong&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; with new syntax proposals and policy discussions on Language Committee conflict of interest handling&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-repository collaboration&lt;/strong&gt; between language implementers and RFC authors, with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; contributing to both repositories on type system improvements and governance policy&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation and tooling emphasis&lt;/strong&gt; spanning native debugging capabilities, API clarifications, and CI infrastructure improvements across 13 merged PRs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14225" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Gabriel Scherer's contributions&lt;/strong&gt;&lt;/a&gt; span both repositories with private constructor warning fixes in &lt;a href="https://github.com/ocaml/ocaml/issues/14225"&gt;ocaml/ocaml#14225&lt;/a&gt; and extensive governance policy analysis in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;, demonstrating coordination between implementation and policy development&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14236" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Florian Angeletti's dual role&lt;/strong&gt;&lt;/a&gt; as contributor to AST mapper improvements in &lt;a href="https://github.com/ocaml/ocaml/issues/14236"&gt;ocaml/ocaml#14236&lt;/a&gt; and RFC governance policy development in &lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;, ensuring technical and governance alignment&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Language Committee members&lt;/strong&gt; actively participating in both technical implementation discussions and governance policy refinement, maintaining consistency between RFC processes and core language development&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14137" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;String module expansion&lt;/strong&gt;&lt;/a&gt; proposal by &lt;a href="https://github.com/dbuenzli"&gt;Daniel Bünzli&lt;/a&gt; suggesting systematic addition of string processing functions including index search with predicates, substring operations, and breaking functions with consistent naming conventions (&lt;a href="https://github.com/ocaml/ocaml/issues/14137"&gt;ocaml/ocaml#14137&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/56" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Syntax design debate&lt;/strong&gt;&lt;/a&gt; around the necessity of &lt;code&gt;for...in&lt;/code&gt; loops given existing labeled iterators, with contributors comparing OCaml's current approaches to other languages like Rust and discussing readability trade-offs (&lt;a href="https://github.com/ocaml/RFCs/issues/56"&gt;ocaml/RFCs#56&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong style="color: #cc6600;"&gt;Governance policy discussions&lt;/strong&gt;&lt;/a&gt; reaching consensus on Language Committee conflict of interest handling, with detailed analysis of institutional differences between public institutions like INRIA and private companies, plus considerations of funding source transparency (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Documentation completeness&lt;/strong&gt; push with major additions to debugging capabilities and API clarifications reflecting commitment to developer experience across the core language ecosystem&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Type system evolution&lt;/strong&gt; continuing with bivariant parameter support and refinement of constructor usage warnings, showing ongoing language modernization efforts&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Language accessibility focus&lt;/strong&gt; with proposals targeting newcomer-friendly syntax changes that maintain OCaml's functional programming paradigms while borrowing familiar constructs from other languages&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Governance transparency initiatives&lt;/strong&gt; emphasizing clear conflict of interest policies and funding source disclosure to maintain community trust in language development decisions&lt;/li&gt;
&lt;li&gt;&lt;strong style="color: #cc6600;"&gt;Cross-institutional collaboration&lt;/strong&gt; discussions highlighting the need for balanced representation between academic institutions and industry participants in language governance&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev//groups/core/2025/week-37"/><summary>Major documentation additions to ocaml/ocaml plus new RFC syntax proposal and Language Committee governance discussions</summary><published>2025-09-14T00:00:00+00:00</published></entry></feed>