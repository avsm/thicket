<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>https://thicket.dev/feeds/core.xml</id><title>OCaml Core (Weekly)</title><updated>2025-09-21T00:00:00+00:00</updated><author><name>Anil Madhavapeddy</name><email>anil@recoil.org</email></author><link href="https://thicket.dev/feeds/core.xml" rel="self"/><link href="https://thicket.dev/" rel="alternate"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Core OCaml language, compiler, and essential tooling</subtitle><entry><id>https://thicket.dev/groups/core/2025/week-38</id><title>Week 38, 2025: Active development in core OCaml with TSan fixes, stdlib enhancements, and ongoing RFC discussions for language syntax improvements</title><updated>2025-09-21T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;Fixed &lt;strong class="achievement"&gt;variadic macro warnings&lt;/strong&gt; in C runtime headers (&lt;code&gt;misc.h&lt;/code&gt;) by correcting parameter handling in &lt;code&gt;CAMLrealloc&lt;/code&gt;, &lt;code&gt;CAMLalloc&lt;/code&gt;, &lt;code&gt;CAMLmalloc&lt;/code&gt;, &lt;code&gt;CAMLcalloc&lt;/code&gt;, and &lt;code&gt;CAMLaligned_alloc&lt;/code&gt; macros to prevent C warnings under certain conditions (&lt;a href="https://github.com/ocaml/ocaml/commit/27ccbcc05e22a257a61a875d09ca704dd5ad510a"&gt;ocaml/ocaml@27ccbcc&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14255" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Main repository development&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; focused on threading robustness with seven new PRs opened including TSan bug fixes, typing recovery implementation, and build system improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14255"&gt;#14255&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14241"&gt;#14241&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14243"&gt;#14243&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/56" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language design discussions&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; centered on for...in loop proposal with detailed technical feedback from seven community members regarding syntax, performance, and modular implicits compatibility (&lt;a href="https://github.com/ocaml/RFCs/issues/56"&gt;#56&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14237" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Merged improvements&lt;/strong&gt;&lt;/a&gt; include AST location functions refactoring, domain systhreads documentation, and new stdlib &lt;code&gt;filter_mapi&lt;/code&gt; function (&lt;a href="https://github.com/ocaml/ocaml/issues/14237"&gt;#14237&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14248"&gt;#14248&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14227"&gt;#14227&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/56" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;For...in syntax debate&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/RFCs/issues/56"&gt;ocaml/RFCs#56&lt;/a&gt; featuring technical analysis by &lt;a href="https://github.com/lthls"&gt;Vincent Laviron&lt;/a&gt; on performance implications, alternative syntax proposals by &lt;a href="https://github.com/yawaramin"&gt;Yawar Amin&lt;/a&gt; using &lt;code&gt;&lt;-&lt;/code&gt; instead of &lt;code&gt;in&lt;/code&gt;, and philosophical critique by &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; on code readability versus syntactic sugar&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/56" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Modular implicits compatibility&lt;/strong&gt;&lt;/a&gt; analyzed by &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; exploring IntoIter signature design challenges and polymorphic iterator support for the for...in RFC (&lt;a href="https://github.com/ocaml/RFCs/issues/56"&gt;#56&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14254" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system edge cases&lt;/strong&gt;&lt;/a&gt; addressed by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; providing extensive review feedback on GADT patterns, existentials in as-patterns, and rigid type annotations (&lt;a href="https://github.com/ocaml/ocaml/issues/14254"&gt;#14254&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14229"&gt;#14229&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14253"&gt;#14253&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14213" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Threading robustness priority&lt;/strong&gt;&lt;/a&gt; with multiple TSan-related fixes targeting production multicore stability, including shadow stack bug fixes and Domain error handling improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14213"&gt;#14213&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14255"&gt;#14255&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/12410"&gt;#12410&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/56" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language accessibility versus performance&lt;/strong&gt;&lt;/a&gt; tensions in RFC discussions as community weighs newcomer-friendly syntax against potential runtime costs and functional programming principles (&lt;a href="https://github.com/ocaml/RFCs/issues/56"&gt;#56&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14241" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer tooling integration&lt;/strong&gt;&lt;/a&gt; through upstreaming of Merlin improvements and enhanced error messages for complex type system features (&lt;a href="https://github.com/ocaml/ocaml/issues/14241"&gt;#14241&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14224"&gt;#14224&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14243" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Build system portability&lt;/strong&gt;&lt;/a&gt; improvements with relocatable OCaml implementation and Windows compatibility fixes addressing deployment and distribution challenges (&lt;a href="https://github.com/ocaml/ocaml/issues/14243"&gt;#14243&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13704"&gt;#13704&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Active development in core OCaml with TSan fixes, stdlib enhancements, and ongoing RFC discussions for language syntax improvements</summary><published>2025-09-21T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-37</id><title>Week 37, 2025: Native debugging documentation and compiler improvements in ocaml/ocaml, new for...in syntax RFC and governance discussions in ocaml/RFCs</title><updated>2025-09-14T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13747" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Native debugging manual chapter&lt;/strong&gt;&lt;/a&gt; added comprehensive documentation for debugging OCaml programs with GDB and LLDB, including DWARF support, CFI information, and practical debugging workflows (&lt;a href="https://github.com/ocaml/ocaml/issues/13747"&gt;ocaml/ocaml#13747&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14225" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Private constructor warning suppression&lt;/strong&gt;&lt;/a&gt; eliminates unused-constructor warnings for private variant constructors (e.g., &lt;code&gt;type safe = private Safe&lt;/code&gt;) typically used as GADT indices (&lt;a href="https://github.com/ocaml/ocaml/issues/14225"&gt;ocaml/ocaml#14225&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14123" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Compaction integer overflow fixes&lt;/strong&gt;&lt;/a&gt; improve heap compaction safety by implementing proper integral type hygiene throughout compaction code (&lt;a href="https://github.com/ocaml/ocaml/issues/14123"&gt;ocaml/ocaml#14123&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13820" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Variance syntax documentation&lt;/strong&gt;&lt;/a&gt; documents the bivariance indicators (&lt;code&gt;+-&lt;/code&gt;, &lt;code&gt;-+&lt;/code&gt;) introduced in &lt;a href="https://github.com/ocaml/ocaml/issues/13820"&gt;ocaml/ocaml#13820&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14126"&gt;ocaml/ocaml#14126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14236" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;AST mapper location handling&lt;/strong&gt;&lt;/a&gt; fixes forgotten location mapping in toplevel directive arguments for tools like ocamlformat (&lt;a href="https://github.com/ocaml/ocaml/issues/14236"&gt;ocaml/ocaml#14236&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14226" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Format.sprintf documentation&lt;/strong&gt;&lt;/a&gt; clarifies the difference between &lt;code&gt;sprintf&lt;/code&gt; and &lt;code&gt;asprintf&lt;/code&gt; regarding &lt;code&gt;%a&lt;/code&gt; format specifier handling (&lt;a href="https://github.com/ocaml/ocaml/issues/14226"&gt;ocaml/ocaml#14226&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Documentation and developer experience&lt;/strong&gt; saw major improvements with comprehensive native debugging documentation and format function clarifications in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Compiler warnings and safety&lt;/strong&gt; enhanced through private constructor warning fixes and heap compaction overflow protections in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Language design discussions&lt;/strong&gt; advanced with new &lt;code&gt;for...in&lt;/code&gt; syntax RFC proposal in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Governance framework development&lt;/strong&gt; continued with conflict of interest policy discussions for the Language Committee in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-platform improvements&lt;/strong&gt; included Android build fixes and Windows CI updates in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14225" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Shared contributors&lt;/strong&gt;&lt;/a&gt; actively participated across both repositories, with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; contributing to compiler improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14225"&gt;ocaml/ocaml#14225&lt;/a&gt;) and providing feedback on governance policy (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14236" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Florian Angeletti&lt;/strong&gt;&lt;/a&gt; worked on AST mapper fixes in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14236"&gt;ocaml/ocaml#14236&lt;/a&gt;) while leading governance discussions in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer experience focus&lt;/strong&gt; aligned across repositories with comprehensive debugging documentation in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; and approachability discussions in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Community engagement&lt;/strong&gt; patterns showed consistent involvement in technical discussions and review processes across both core repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14224" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;GADT warning regression&lt;/strong&gt;&lt;/a&gt; discussed in &lt;a href="https://github.com/ocaml/ocaml/issues/14224"&gt;ocaml/ocaml#14224&lt;/a&gt; where &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; and &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; explored solutions for partial-match warnings triggered by GADTs in trunk&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/56" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Syntax design debate&lt;/strong&gt;&lt;/a&gt; around proposed &lt;code&gt;for...in&lt;/code&gt; construct with community members discussing readability benefits versus existing functional patterns like &lt;code&gt;List.iter&lt;/code&gt; and labeled functions (&lt;a href="https://github.com/ocaml/RFCs/issues/56"&gt;ocaml/RFCs#56&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Committee governance framework&lt;/strong&gt;&lt;/a&gt; receiving detailed analysis of conflict of interest policies, with discussions on transparency requirements, institutional affiliations, and consensus-based decision making (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14241" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Merlin typing recovery&lt;/strong&gt;&lt;/a&gt; integration conversation between &lt;a href="https://github.com/nojb"&gt;NicolÃ¡s Ojeda BÃ¤r&lt;/a&gt; and &lt;a href="https://github.com/xvw"&gt;Xavier Van de Woestyne&lt;/a&gt; regarding upstreaming to reduce compiler-libs dependencies (&lt;a href="https://github.com/ocaml/ocaml/issues/14241"&gt;ocaml/ocaml#14241&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14239" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Extension constructor printing&lt;/strong&gt;&lt;/a&gt; technical discussion between &lt;a href="https://github.com/t6s"&gt;Takafumi Saikawa&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, and &lt;a href="https://github.com/garrigue"&gt;Jacques Garrigue&lt;/a&gt; about type parameter handling in &lt;code&gt;#show_constructor&lt;/code&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14239"&gt;ocaml/ocaml#14239&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Developer experience prioritization&lt;/strong&gt; evident through comprehensive native debugging documentation, improved compiler warnings, and syntax proposals for newcomer accessibility&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-platform consistency&lt;/strong&gt; improvements including Android build fixes, Windows CI updates, and architecture-specific optimizations in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Governance maturation&lt;/strong&gt; with structured conflict of interest policies and transparency frameworks being developed for the Language Committee in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Community-driven contributions&lt;/strong&gt; from external contributors addressing documentation gaps, standard library functionality, and language design proposals&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Large-scale architectural changes&lt;/strong&gt; progressing with relocatable OCaml implementation, transparent ascription features, and Windows platform modernization efforts&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Native debugging documentation and compiler improvements in ocaml/ocaml, new for...in syntax RFC and governance discussions in ocaml/RFCs</summary><published>2025-09-14T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-36</id><title>Week 36, 2025: Focused week on C++ compatibility fixes, error message improvements, and standard library enhancements in ocaml/ocaml</title><updated>2025-09-07T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14220" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;C++ compatibility fix&lt;/strong&gt;&lt;/a&gt; for Cygwin resolving name-mangling issues with &lt;code&gt;caml_state&lt;/code&gt; when linking with flexlink (&lt;a href="https://github.com/ocaml/ocaml/issues/14220"&gt;ocaml/ocaml#14220&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14221" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module inclusion error messages&lt;/strong&gt;&lt;/a&gt; improvements fixing confused error messages for functor inclusions that were missing type equalities (&lt;a href="https://github.com/ocaml/ocaml/issues/14221"&gt;ocaml/ocaml#14221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14233" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Manual attributes page&lt;/strong&gt;&lt;/a&gt; fixes and improvements to documentation (&lt;a href="https://github.com/ocaml/ocaml/issues/14233"&gt;ocaml/ocaml#14233&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14232" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;ThreadSanitizer support&lt;/strong&gt;&lt;/a&gt; improvements with fixes for deliberately racy tests to reduce false positives (&lt;a href="https://github.com/ocaml/ocaml/issues/14232"&gt;ocaml/ocaml#14232&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14219"&gt;ocaml/ocaml#14219&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14192" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Toplevel constructor printing&lt;/strong&gt;&lt;/a&gt; improvements for better display of qualified names (&lt;a href="https://github.com/ocaml/ocaml/issues/14192"&gt;ocaml/ocaml#14192&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Primary activity concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; with significant focus on platform compatibility and error message quality improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;No activity in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; during this period, indicating stable language design phase&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-platform compatibility&lt;/strong&gt; addressed through C++ interoperability fixes and Cygwin-specific improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer experience&lt;/strong&gt; enhanced via better error messages, documentation updates, and standard library additions&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Testing infrastructure&lt;/strong&gt; refined with ThreadSanitizer integration improvements to reduce false positive race detection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14224" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;GADT warning behavior&lt;/strong&gt;&lt;/a&gt; heavily discussed in &lt;a href="https://github.com/ocaml/ocaml/issues/14224"&gt;ocaml/ocaml#14224&lt;/a&gt; regarding partial-match warnings triggered by GADTs in trunk, with &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; reporting backward compatibility concerns and &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; providing workaround solutions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14136" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;ThreadSanitizer race conditions&lt;/strong&gt;&lt;/a&gt; analyzed in &lt;a href="https://github.com/ocaml/ocaml/issues/14136"&gt;ocaml/ocaml#14136&lt;/a&gt; with &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; investigating benign races in &lt;code&gt;strstubs.c&lt;/code&gt; and &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; suggesting potential fixes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Multicore performance bottlenecks&lt;/strong&gt;&lt;/a&gt; investigated in &lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt; with &lt;a href="https://github.com/ngorogiannis"&gt;Nikos Gorogiannis&lt;/a&gt; reporting prohibitive runtime lock waits in Infer analysis and &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; providing analysis guidance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;C++ interoperability&lt;/strong&gt; receiving focused attention with name-mangling fixes and compatibility improvements for cross-platform development, particularly targeting Windows/Cygwin environments&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Error message quality&lt;/strong&gt; being systematically improved with clearer functor inclusion messages and better diagnostic output across compiler phases&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Standard library ergonomics&lt;/strong&gt; enhanced through community contributions adding commonly-requested utility functions like &lt;code&gt;filter_mapi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;ThreadSanitizer integration&lt;/strong&gt; being refined to reduce false positives while maintaining effective race detection capabilities for multicore development&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Documentation quality&lt;/strong&gt; improved with manual updates and syntax clarifications for newer language features and variance annotations&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Focused week on C++ compatibility fixes, error message improvements, and standard library enhancements in ocaml/ocaml</summary><published>2025-09-07T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-35</id><title>Week 35, 2025: Memory model fixes for weak arrays, new List.split_map function, and improved error messages for functors and debugger tools.</title><updated>2025-08-31T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;New &lt;code&gt;List.split_map&lt;/code&gt; function&lt;/strong&gt; in standard library that combines mapping and splitting operations for improved efficiency by &lt;a href="https://github.com/yallop"&gt;Jeremy Yallop&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14185"&gt;ocaml/ocaml#14185&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14029" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Enhanced %identity primitive recognition&lt;/strong&gt;&lt;/a&gt; allowing &lt;code&gt;%identity&lt;/code&gt; to be recognized as nonexpansive, exempting &lt;code&gt;Obj.magic&lt;/code&gt; and similar primitives from value restriction by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14029"&gt;ocaml/ocaml#14029&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14055" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Improved debugger path resolution&lt;/strong&gt;&lt;/a&gt; with &lt;code&gt;BUILD_PATH_PREFIX_MAP&lt;/code&gt; inversion to enable &lt;code&gt;ocamldebug&lt;/code&gt; to work properly with dune build systems by &lt;a href="https://github.com/pirbo"&gt;Pierre Boutillier&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14055"&gt;ocaml/ocaml#14055&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14209" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Fixed memory model for Weak.set&lt;/strong&gt;&lt;/a&gt; operations addressing data race issues and memory synchronization problems affecting concurrent usage of weak arrays by &lt;a href="https://github.com/damiendoligez"&gt;Damien Doligez&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14209"&gt;ocaml/ocaml#14209&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14202" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Enhanced variance checking&lt;/strong&gt;&lt;/a&gt; for private types fixing incorrect rejections when using private type aliases as GADT indices by &lt;a href="https://github.com/garrigue"&gt;Jacques Garrigue&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14202"&gt;ocaml/ocaml#14202&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14212" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Improved ocamltest output&lt;/strong&gt;&lt;/a&gt; displaying test names before execution for easier identification of slow-running tests by &lt;a href="https://github.com/damiendoligez"&gt;Damien Doligez&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14212"&gt;ocaml/ocaml#14212&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14215" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Better functor error messages&lt;/strong&gt;&lt;/a&gt; when a functor references itself in its own definition providing clearer diagnostic information by &lt;a href="https://github.com/smuenzel"&gt;Stefan Muenzel&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14215"&gt;ocaml/ocaml#14215&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Primary activity centered on &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; with 17 pull requests merged and 5 new pull requests opened, while &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; had no activity during this period&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Memory model and concurrency improvements&lt;/strong&gt; dominated the week with multiple fixes for ThreadSanitizer failures, weak array data races, and ephemeron synchronization issues&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer experience enhancements&lt;/strong&gt; through improved error messages, debugger tooling, and standard library additions showing focus on usability&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;13 active contributors&lt;/strong&gt; delivered changes ranging from critical memory model fixes to platform compatibility improvements and documentation updates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14204" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module subtyping enhancement&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/garrigue"&gt;Jacques Garrigue&lt;/a&gt; regarding allowing type abbreviations to be exported as variants for improved API flexibility (&lt;a href="https://github.com/ocaml/ocaml/issues/14204"&gt;ocaml/ocaml#14204&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14061" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Memory model correctness&lt;/strong&gt;&lt;/a&gt; extensively analyzed in ongoing ephemeron data race investigation with detailed technical discussion about concurrent access patterns and synchronization requirements by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; and others (&lt;a href="https://github.com/ocaml/ocaml/issues/14061"&gt;ocaml/ocaml#14061&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14209" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Memory model and concurrency focus&lt;/strong&gt;&lt;/a&gt; with multiple PRs addressing ThreadSanitizer failures, weak array data races, and ephemeron synchronization issues showing increased attention to multicore correctness (&lt;a href="https://github.com/ocaml/ocaml/issues/14209"&gt;ocaml/ocaml#14209&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14210"&gt;ocaml/ocaml#14210&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14203"&gt;ocaml/ocaml#14203&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14205" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer experience prioritization&lt;/strong&gt;&lt;/a&gt; through improved error messages, better debugger tooling, and enhanced development workflow support indicating focus on usability improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14205"&gt;ocaml/ocaml#14205&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14055"&gt;ocaml/ocaml#14055&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14215"&gt;ocaml/ocaml#14215&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14185" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Standard library evolution&lt;/strong&gt;&lt;/a&gt; with functional programming utilities like &lt;code&gt;List.split_map&lt;/code&gt; and primitive optimization enhancements showing continued expansion of core functionality (&lt;a href="https://github.com/ocaml/ocaml/issues/14185"&gt;ocaml/ocaml#14185&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14029"&gt;ocaml/ocaml#14029&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Memory model fixes for weak arrays, new List.split_map function, and improved error messages for functors and debugger tools.</summary><published>2025-08-31T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-34</id><title>Week 34, 2025: Active development in ocaml/ocaml with runtime events improvements and bug fixes while governance policy discussions continue in RFCs</title><updated>2025-08-24T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14189" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Enhanced runtime events documentation&lt;/strong&gt;&lt;/a&gt; with explicit {b words} units clarification for memory-related counters in the runtime_events.mli interface (&lt;a href="https://github.com/ocaml/ocaml/issues/14189"&gt;ocaml/ocaml#14189&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14189" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime counters addition&lt;/strong&gt;&lt;/a&gt; of EV&lt;em&gt;C&lt;/em&gt;MINOR&lt;em&gt;PROMOTED&lt;/em&gt;WORDS and EV&lt;em&gt;C&lt;/em&gt;MINOR&lt;em&gt;ALLOCATED&lt;/em&gt;WORDS for tracking per-domain memory metrics (&lt;a href="https://github.com/ocaml/ocaml/issues/14189"&gt;ocaml/ocaml#14189&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14197" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Shared contributor involvement&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; contributing bug fixes to &lt;a href="https://github.com/ocaml/ocaml/issues/14197"&gt;ocaml/ocaml#14197&lt;/a&gt; and participating in RFC governance discussions (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14192" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Committee member coordination&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; leading both compiler toplevel improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14192"&gt;ocaml/ocaml#14192&lt;/a&gt;) and RFC governance policy development (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14201" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Windows float formatting inconsistency&lt;/strong&gt;&lt;/a&gt; reported by &lt;a href="https://github.com/mjambon"&gt;Martin Jambon&lt;/a&gt; affecting CI tests with zero-padded exponents on Windows versus Linux/macOS (&lt;a href="https://github.com/ocaml/ocaml/issues/14201"&gt;ocaml/ocaml#14201&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14195" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Domain stack size configuration&lt;/strong&gt;&lt;/a&gt; feature request by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; for configurable pthread stack sizes to handle deep recursion scenarios (&lt;a href="https://github.com/ocaml/ocaml/issues/14195"&gt;ocaml/ocaml#14195&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14200" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type variance checking vulnerability&lt;/strong&gt;&lt;/a&gt; discovered by &lt;a href="https://github.com/stedolan"&gt;Stephen Dolan&lt;/a&gt; affecting private aliases and bivariant type annotations, leading to immediate fix (&lt;a href="https://github.com/ocaml/ocaml/issues/14200"&gt;ocaml/ocaml#14200&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Conflict of interest policy refinement&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/yallop"&gt;Jeremy Yallop&lt;/a&gt; suggesting improvements to language clarity, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; noting wording inconsistencies, and &lt;a href="https://github.com/shindere"&gt;SÃ©bastien Hinderer&lt;/a&gt; catching grammatical errors (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14189" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime observability enhancement&lt;/strong&gt;&lt;/a&gt; with expanded memory tracking capabilities and improved documentation for performance analysis tools in &lt;a href="https://github.com/ocaml/ocaml/issues/14189"&gt;ocaml/ocaml#14189&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14200" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system robustness&lt;/strong&gt;&lt;/a&gt; addressing edge cases in variance checking and module constraint handling to prevent soundness issues (&lt;a href="https://github.com/ocaml/ocaml/issues/14200"&gt;ocaml/ocaml#14200&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14202"&gt;ocaml/ocaml#14202&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14199" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer experience improvements&lt;/strong&gt;&lt;/a&gt; including CI dependency management through Dependabot (&lt;a href="https://github.com/ocaml/ocaml/issues/14199"&gt;ocaml/ocaml#14199&lt;/a&gt;) and governance transparency initiatives (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Active development in ocaml/ocaml with runtime events improvements and bug fixes while governance policy discussions continue in RFCs</summary><published>2025-08-24T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-33</id><title>Week 33, 2025: OCaml core saw active development with runtime fixes, library enhancements, and build optimization discussions</title><updated>2025-08-17T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14192" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Toplevel printing fix&lt;/strong&gt;&lt;/a&gt; for qualified variant constructors and record labels by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/14192"&gt;ocaml/ocaml#14192&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14187" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Minor GC runtime improvement&lt;/strong&gt;&lt;/a&gt; removing outdated comment and optimizing function call by &lt;a href="https://github.com/NickBarnes"&gt;Nick Barnes&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/14187"&gt;ocaml/ocaml#14187&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14185" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;List.split_map function&lt;/strong&gt;&lt;/a&gt; added to standard library by &lt;a href="https://github.com/yallop"&gt;Jeremy Yallop&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/14185"&gt;ocaml/ocaml#14185&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Active development&lt;/strong&gt; in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with 2 fixes merged and 8 new PRs covering runtime improvements, library enhancements, and tooling fixes&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;No activity&lt;/strong&gt; recorded in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; during this week&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime system focus&lt;/strong&gt; with multiple contributors addressing GC behavior, memory reporting, and domain stack management&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Build system discussions&lt;/strong&gt; around installation optimization and debugging improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14193" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Build optimization proposal&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; to stop installing bytecode binaries by default, potentially saving 15MB disk space per installation in &lt;a href="https://github.com/ocaml/ocaml/issues/14193"&gt;ocaml/ocaml#14193&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14195" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Stack size configuration&lt;/strong&gt;&lt;/a&gt; feature request by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; for configurable domain stack sizes to prevent crashes in deep FFI code, with technical guidance from &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/14195"&gt;ocaml/ocaml#14195&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14167" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime debugging challenges&lt;/strong&gt;&lt;/a&gt; with Clang 19 affecting native debugger tests due to inlining behavior differences in &lt;a href="https://github.com/ocaml/ocaml/issues/14167"&gt;ocaml/ocaml#14167&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14061" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Data race investigation&lt;/strong&gt;&lt;/a&gt; ongoing in weak array parallel tests with ThreadSanitizer findings in &lt;a href="https://github.com/ocaml/ocaml/issues/14061"&gt;ocaml/ocaml#14061&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime system refinement&lt;/strong&gt; with focused effort on GC behavior optimization, memory reporting consistency, and domain stack management improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Build system optimization&lt;/strong&gt; discussions addressing installation footprint reduction and compilation performance enhancement&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Debugging and tooling improvements&lt;/strong&gt; targeting stack trace quality and test suite robustness across different compiler versions&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Standard library expansion&lt;/strong&gt; with utility functions addressing common programming patterns and developer productivity&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>OCaml core saw active development with runtime fixes, library enhancements, and build optimization discussions</summary><published>2025-08-17T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-32</id><title>Week 32, 2025: Type system fixes and error message improvements with active contributor discussions on language features</title><updated>2025-08-10T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;Fixed handling of recursive function types that can result in unbounded labeled or optional arguments in &lt;a href="https://github.com/ocaml/ocaml/issues/13658"&gt;ocaml/ocaml#13658&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/pull/14181"&gt;ocaml/ocaml#14181&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improved error messages for mismatched universal variables and universal quantifications in &lt;a href="https://github.com/ocaml/ocaml/pull/14111"&gt;ocaml/ocaml#14111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Enhanced minor heap management to ensure proper emptying before reallocation in &lt;a href="https://github.com/ocaml/ocaml/pull/12879"&gt;ocaml/ocaml#12879&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Core OCaml development activity focused on type system improvements and memory management enhancements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Three key bug fixes merged addressing recursive function typing, error message clarity, and heap management&lt;/li&gt;
&lt;li&gt;Active community engagement with new feature requests and ongoing development of installation optimizations&lt;/li&gt;
&lt;li&gt;No activity recorded in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; during this period&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;Technical exploration of generative functor limitations by &lt;a href="https://github.com/backtracking"&gt;Jean-Christophe Filliatre&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; explaining type system constraints and referencing related work by &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/14183"&gt;ocaml/ocaml#14183&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Include functor feature design debate with &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; questioning implicit behavior patterns while &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; defends the convenience benefits demonstrated by Jane Street adoption in &lt;a href="https://github.com/ocaml/ocaml/pull/14177"&gt;ocaml/ocaml#14177&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;Core team members delivering type system and memory management improvements while external contributors explore advanced language features&lt;/li&gt;
&lt;li&gt;Ongoing focus on installation and packaging improvements with &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt;'s optimization work in &lt;a href="https://github.com/ocaml/ocaml/pull/14152"&gt;ocaml/ocaml#14152&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Active engagement between academic researchers and industry practitioners on functor-related language features as seen in &lt;a href="https://github.com/ocaml/ocaml/issues/14183"&gt;ocaml/ocaml#14183&lt;/a&gt; and &lt;a href="https://github.com/ocaml/ocaml/pull/14177"&gt;ocaml/ocaml#14177&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Type system fixes and error message improvements with active contributor discussions on language features</summary><published>2025-08-10T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-31</id><title>Week 31, 2025: Major week for OCaml with 12 PRs merged including GC performance improvements, better error messages, and new memory statistics</title><updated>2025-08-03T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14053" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Memprof sampling control&lt;/strong&gt;&lt;/a&gt; added &lt;code&gt;Gc.Memprof.is_sampling&lt;/code&gt; function allowing domains to replace profiles without stopping in all domains (&lt;a href="https://github.com/ocaml/ocaml/pull/14053"&gt;ocaml/ocaml#14053&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14168" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;GC statistics enhancement&lt;/strong&gt;&lt;/a&gt; restored &lt;code&gt;stack_size&lt;/code&gt; field and added new &lt;code&gt;live_stacks_words&lt;/code&gt; field to &lt;code&gt;Gc.stat&lt;/code&gt; for tracking total size of live stacks (&lt;a href="https://github.com/ocaml/ocaml/pull/14168"&gt;ocaml/ocaml#14168&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14147" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Error message improvement&lt;/strong&gt;&lt;/a&gt; for row types in GADT constructors now display as &lt;code&gt;&lt; foo : int; .. as $0&gt;&lt;/code&gt; when type variables are introduced by constructors (&lt;a href="https://github.com/ocaml/ocaml/pull/14147"&gt;ocaml/ocaml#14147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14176" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Deprecation alert fix&lt;/strong&gt;&lt;/a&gt; added proper file location to deprecation alerts for implicit library usage (unix, threads, dynlink) (&lt;a href="https://github.com/ocaml/ocaml/pull/14176"&gt;ocaml/ocaml#14176&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Value restriction relaxation&lt;/strong&gt; for &lt;code&gt;%identity&lt;/code&gt; primitives like &lt;code&gt;Obj.magic&lt;/code&gt; which are now recognized as nonexpansive (&lt;a href="https://github.com/ocaml/ocaml/commit/bab7aa8a5838830b5bb41a3c4b12dcd058665344"&gt;bab7aa8a58&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/13580" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;GC performance improvement&lt;/strong&gt;&lt;/a&gt; introduced sweep-only phase at start of major GC cycle to reduce latent-garbage delay (&lt;a href="https://github.com/ocaml/ocaml/pull/13580"&gt;ocaml/ocaml#13580&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Single repository activity&lt;/strong&gt; with all development concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; while &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; remained inactive during the week&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14053" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;High-impact merge activity&lt;/strong&gt;&lt;/a&gt; with 12 PRs merged covering runtime improvements, type system enhancements, and developer experience improvements (&lt;a href="https://github.com/ocaml/ocaml/pull/14053"&gt;ocaml/ocaml#14053&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/pull/14168"&gt;ocaml/ocaml#14168&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/pull/14147"&gt;ocaml/ocaml#14147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14083" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Multicore stability focus&lt;/strong&gt;&lt;/a&gt; with multiple thread sanitizer issues being actively addressed and runtime performance optimizations delivered (&lt;a href="https://github.com/ocaml/ocaml/issues/14083"&gt;ocaml/ocaml#14083&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14061"&gt;ocaml/ocaml#14061&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14177" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language feature development&lt;/strong&gt;&lt;/a&gt; with major syntax additions like &lt;code&gt;include functor&lt;/code&gt; and tuple coercion being opened for review (&lt;a href="https://github.com/ocaml/ocaml/issues/14177"&gt;ocaml/ocaml#14177&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14180"&gt;ocaml/ocaml#14180&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Strong contributor participation&lt;/strong&gt; from core team members including &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt;, &lt;a href="https://github.com/smuenzel"&gt;Stefan Muenzel&lt;/a&gt;, and &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; driving multiple improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14083" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Thread sanitizer crashes&lt;/strong&gt;&lt;/a&gt; reported by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; affecting both Semgrep and dune build processes, with &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; providing workarounds using specific configure flags (&lt;a href="https://github.com/ocaml/ocaml/issues/14083"&gt;ocaml/ocaml#14083&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14061" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Ephemeron data race&lt;/strong&gt;&lt;/a&gt; identified by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; in minor GC with TSan reporting race conditions in weak array parallel tests (&lt;a href="https://github.com/ocaml/ocaml/issues/14061"&gt;ocaml/ocaml#14061&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14153" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Minor heap virtual memory&lt;/strong&gt;&lt;/a&gt; concerns raised by &lt;a href="https://github.com/kayceesrk"&gt;KC Sivaramakrishnan&lt;/a&gt; about OCaml 5's aggressive memory reservation causing crashes in applications like Rocq with large minor heaps (&lt;a href="https://github.com/ocaml/ocaml/issues/14153"&gt;ocaml/ocaml#14153&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14178" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Effect keyword proposal&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/Alizter"&gt;Ali Caglayan&lt;/a&gt; for syntactic sugar around effect declarations, ultimately closed as the feature wasn't deemed necessary (&lt;a href="https://github.com/ocaml/ocaml/issues/14178"&gt;ocaml/ocaml#14178&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14083" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Multicore stability focus&lt;/strong&gt;&lt;/a&gt; with multiple TSan-related issues being actively investigated and fixed in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;, showing continued commitment to thread safety (&lt;a href="https://github.com/ocaml/ocaml/issues/14083"&gt;ocaml/ocaml#14083&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14061"&gt;ocaml/ocaml#14061&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14147" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Error message quality improvements&lt;/strong&gt;&lt;/a&gt; across type system with better GADT equation display and quantifier mismatch explanations enhancing developer experience (&lt;a href="https://github.com/ocaml/ocaml/issues/14147"&gt;ocaml/ocaml#14147&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14111"&gt;ocaml/ocaml#14111&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13580" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime performance optimization&lt;/strong&gt;&lt;/a&gt; through GC improvements, fiber cache fixes, and memory profiling enhancements targeting multicore performance (&lt;a href="https://github.com/ocaml/ocaml/issues/13580"&gt;ocaml/ocaml#13580&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14169"&gt;ocaml/ocaml#14169&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14173" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Build system modernization&lt;/strong&gt;&lt;/a&gt; addressing tool quirks like ocamlmklib option ordering and platform support expansion for emerging operating systems (&lt;a href="https://github.com/ocaml/ocaml/issues/14173"&gt;ocaml/ocaml#14173&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14138"&gt;ocaml/ocaml#14138&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14177" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language feature experimentation&lt;/strong&gt;&lt;/a&gt; with major syntax additions like &lt;code&gt;include functor&lt;/code&gt; and tuple coercion being actively developed and discussed (&lt;a href="https://github.com/ocaml/ocaml/issues/14177"&gt;ocaml/ocaml#14177&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14180"&gt;ocaml/ocaml#14180&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major week for OCaml with 12 PRs merged including GC performance improvements, better error messages, and new memory statistics</summary><published>2025-08-03T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-30</id><title>Week 30, 2025: Major language enhancement with polymorphic parameters, runtime performance optimizations, and new Hashtbl APIs</title><updated>2025-07-27T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13806" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Polymorphic parameters&lt;/strong&gt;&lt;/a&gt; language feature by &lt;a href="https://github.com/voodoos"&gt;Ulysse&lt;/a&gt; enables functions with rank-2 types like &lt;code&gt;val f : ('a. 'a -&gt; 'a list) -&gt; int list&lt;/code&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13806"&gt;ocaml/ocaml#13806&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14060" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;New Hashtbl functions&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;find_and_remove&lt;/code&gt; and &lt;code&gt;find_and_replace&lt;/code&gt; by &lt;a href="https://github.com/giltho"&gt;Sacha Ayoun&lt;/a&gt; return previous values during modification operations (&lt;a href="https://github.com/ocaml/ocaml/issues/14060"&gt;ocaml/ocaml#14060&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14149" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module pattern parsing&lt;/strong&gt;&lt;/a&gt; enhancement by &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; distinguishes between &lt;code&gt;(module M : S)&lt;/code&gt; and &lt;code&gt;(module M) : (module S)&lt;/code&gt; in pattern matching (&lt;a href="https://github.com/ocaml/ocaml/issues/14149"&gt;ocaml/ocaml#14149&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13616" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Shared heap optimization&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/sadiqj"&gt;Sadiq Jaffer&lt;/a&gt; implements run-length encoding for free blocks, achieving 3.85x performance improvement for sparse heaps (&lt;a href="https://github.com/ocaml/ocaml/issues/13616"&gt;ocaml/ocaml#13616&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14143" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Symbol name compatibility&lt;/strong&gt;&lt;/a&gt; fix by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; restores perf/flamegraph.pl support while maintaining lldb debugging on macOS (&lt;a href="https://github.com/ocaml/ocaml/issues/14143"&gt;ocaml/ocaml#14143&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13806" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Major language advancement&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with polymorphic parameters feature enabling rank-2 types (&lt;a href="https://github.com/ocaml/ocaml/issues/13806"&gt;ocaml/ocaml#13806&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13616" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime system focus&lt;/strong&gt;&lt;/a&gt; with extensive performance optimizations and memory management improvements across multiple areas (&lt;a href="https://github.com/ocaml/ocaml/issues/13616"&gt;ocaml/ocaml#13616&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14158"&gt;ocaml/ocaml#14158&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14060" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Standard library enhancements&lt;/strong&gt;&lt;/a&gt; with new Hashtbl utility functions for atomic operations (&lt;a href="https://github.com/ocaml/ocaml/issues/14060"&gt;ocaml/ocaml#14060&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14149" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Parser precision improvements&lt;/strong&gt;&lt;/a&gt; for better module pattern distinction (&lt;a href="https://github.com/ocaml/ocaml/issues/14149"&gt;ocaml/ocaml#14149&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14143" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Tool compatibility maintenance&lt;/strong&gt;&lt;/a&gt; ensuring external debugging and profiling tools continue working (&lt;a href="https://github.com/ocaml/ocaml/issues/14143"&gt;ocaml/ocaml#14143&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;No activity recorded&lt;/strong&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; repository during this week&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14083" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Thread Sanitizer compatibility&lt;/strong&gt;&lt;/a&gt; investigation by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; addressing crashes in OCaml programs under TSAN, with ongoing debugging of runtime stack management (&lt;a href="https://github.com/ocaml/ocaml/issues/14083"&gt;ocaml/ocaml#14083&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14136" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Str module data races&lt;/strong&gt;&lt;/a&gt; analysis by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; exploring potential TSAN annotation approaches for benign races in string matching (&lt;a href="https://github.com/ocaml/ocaml/issues/14136"&gt;ocaml/ocaml#14136&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14163" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Compiler alert location&lt;/strong&gt;&lt;/a&gt; issue raised by &lt;a href="https://github.com/Alizter"&gt;Ali Caglayan&lt;/a&gt; regarding missing file information in deprecated auto-include warnings, ultimately resolved through build system improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14163"&gt;ocaml/ocaml#14163&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime performance focus&lt;/strong&gt; with multiple optimizations targeting memory management efficiency and domain lifecycle improvements across &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14143" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;External tooling compatibility&lt;/strong&gt;&lt;/a&gt; prioritized through symbol naming fixes and debugger support maintenance (&lt;a href="https://github.com/ocaml/ocaml/issues/14143"&gt;ocaml/ocaml#14143&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13806" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system advancement&lt;/strong&gt;&lt;/a&gt; continuing with polymorphic parameters and improved pattern matching capabilities (&lt;a href="https://github.com/ocaml/ocaml/issues/13806"&gt;ocaml/ocaml#13806&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14149"&gt;ocaml/ocaml#14149&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14083" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Thread safety validation&lt;/strong&gt;&lt;/a&gt; becoming a priority with dedicated TSAN compatibility investigations (&lt;a href="https://github.com/ocaml/ocaml/issues/14083"&gt;ocaml/ocaml#14083&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14136"&gt;ocaml/ocaml#14136&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major language enhancement with polymorphic parameters, runtime performance optimizations, and new Hashtbl APIs</summary><published>2025-07-27T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-29</id><title>Week 29, 2025: Active week with 9 PRs merged in ocaml/ocaml focused on error messages, runtime reliability, and multicore performance issues</title><updated>2025-07-20T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14146" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Enhanced error messages&lt;/strong&gt;&lt;/a&gt; for external declarations with non-syntactic arity now show proper error instead of internal failure (&lt;a href="https://github.com/ocaml/ocaml/issues/14146"&gt;ocaml/ocaml#14146&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14147" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Improved type printing&lt;/strong&gt;&lt;/a&gt; in error messages by showing row types when they are type constructors, making &lt;code&gt;&lt; bar : int; foo : int; .. as $1&gt;&lt;/code&gt; visible instead of hidden (&lt;a href="https://github.com/ocaml/ocaml/issues/14147"&gt;ocaml/ocaml#14147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14053" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Gc.Memprof interface&lt;/strong&gt;&lt;/a&gt; made more compositional allowing &lt;code&gt;start&lt;/code&gt; to be called when profile already sampling, with new &lt;code&gt;is_sampling&lt;/code&gt; function (&lt;a href="https://github.com/ocaml/ocaml/issues/14053"&gt;ocaml/ocaml#14053&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14150" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Symbol naming&lt;/strong&gt;&lt;/a&gt; reverted to using &lt;code&gt;.&lt;/code&gt; as module separator on non-Apple Unix systems to restore perf tool support (&lt;a href="https://github.com/ocaml/ocaml/issues/14150"&gt;ocaml/ocaml#14150&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14139" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;C++ compatibility&lt;/strong&gt;&lt;/a&gt; improvements by moving atomic helper type definitions inside &lt;code&gt;caml/misc.h&lt;/code&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14139"&gt;ocaml/ocaml#14139&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Core compiler development&lt;/strong&gt; concentrated entirely in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with 9 PRs merged addressing error messages, runtime reliability, and multicore performance&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14146" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Error message quality&lt;/strong&gt;&lt;/a&gt; improved through multiple contributions by &lt;a href="https://github.com/smuenzel"&gt;Stefan Muenzel&lt;/a&gt; and &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14146"&gt;ocaml/ocaml#14146&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14147"&gt;ocaml/ocaml#14147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14152" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime robustness&lt;/strong&gt;&lt;/a&gt; emphasized with fixes for domain management, memory allocation, and event system reliability (&lt;a href="https://github.com/ocaml/ocaml/issues/14152"&gt;ocaml/ocaml#14152&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14151"&gt;ocaml/ocaml#14151&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Community engagement&lt;/strong&gt;&lt;/a&gt; through detailed performance analysis and bug reports from users at Semgrep and other organizations (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;No RFC activity&lt;/strong&gt; occurred in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; during this week&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;GC performance&lt;/strong&gt;&lt;/a&gt; concerns raised by &lt;a href="https://github.com/nmote"&gt;Nat Mote&lt;/a&gt; showing OCaml 5 requiring space_overhead tuning to match OCaml 4 performance in Semgrep benchmarks (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14151" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime events reliability&lt;/strong&gt;&lt;/a&gt; issues discussed with &lt;a href="https://github.com/mattiasdrp"&gt;Mattias&lt;/a&gt; experiencing corrupt stream errors and inconsistent results when events written faster than polled (&lt;a href="https://github.com/ocaml/ocaml/issues/14151"&gt;ocaml/ocaml#14151&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14153" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Virtual memory usage&lt;/strong&gt;&lt;/a&gt; analysis by &lt;a href="https://github.com/kayceesrk"&gt;KC Sivaramakrishnan&lt;/a&gt; exploring dynamic minor heap reservation strategies to reduce initial 32GB allocation impact (&lt;a href="https://github.com/ocaml/ocaml/issues/14153"&gt;ocaml/ocaml#14153&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14153" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Technical deep-dive&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; on domain spawning complexity and potential approaches for gradual address space reservation (&lt;a href="https://github.com/ocaml/ocaml/issues/14153"&gt;ocaml/ocaml#14153&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14144" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Color flag behavior&lt;/strong&gt;&lt;/a&gt; discussion between &lt;a href="https://github.com/Alizter"&gt;Ali Caglayan&lt;/a&gt; and &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; about quotation marks in error messages affecting CI environments (&lt;a href="https://github.com/ocaml/ocaml/issues/14144"&gt;ocaml/ocaml#14144&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14146" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Error message quality&lt;/strong&gt;&lt;/a&gt; improvements with multiple PRs focusing on clearer type information display and better diagnostic messaging (&lt;a href="https://github.com/ocaml/ocaml/issues/14146"&gt;ocaml/ocaml#14146&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14147"&gt;ocaml/ocaml#14147&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14142"&gt;ocaml/ocaml#14142&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14153" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime robustness&lt;/strong&gt;&lt;/a&gt; emphasis addressing multicore-specific issues including domain spawning, memory management, and event system reliability (&lt;a href="https://github.com/ocaml/ocaml/issues/14153"&gt;ocaml/ocaml#14153&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14151"&gt;ocaml/ocaml#14151&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14152"&gt;ocaml/ocaml#14152&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14150" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Tooling compatibility&lt;/strong&gt;&lt;/a&gt; focus ensuring OCaml works well with external tools like perf, debuggers, and CI systems (&lt;a href="https://github.com/ocaml/ocaml/issues/14150"&gt;ocaml/ocaml#14150&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14144"&gt;ocaml/ocaml#14144&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14148" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Code quality initiatives&lt;/strong&gt;&lt;/a&gt; with systematic cleanup efforts removing unused fields, fixing terminology consistency, and auditing test suites (&lt;a href="https://github.com/ocaml/ocaml/issues/14148"&gt;ocaml/ocaml#14148&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14141"&gt;ocaml/ocaml#14141&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14155"&gt;ocaml/ocaml#14155&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance analysis&lt;/strong&gt;&lt;/a&gt; increased attention to OCaml 5 multicore performance characteristics and GC behavior optimization (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14151"&gt;ocaml/ocaml#14151&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Active week with 9 PRs merged in ocaml/ocaml focused on error messages, runtime reliability, and multicore performance issues</summary><published>2025-07-20T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-28</id><title>Week 28, 2025: Core OCaml development focused on thread safety improvements, compiler bug fixes, and language committee governance proposals</title><updated>2025-07-13T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14082" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;ThreadSanitizer compatibility&lt;/strong&gt;&lt;/a&gt; fix for &lt;code&gt;__tsan_func_exit()&lt;/code&gt; signature mismatch with GCC 15, including configure-time builtin verification (&lt;a href="https://github.com/ocaml/ocaml/issues/14082"&gt;ocaml/ocaml#14082&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14091" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Pattern matching determinism&lt;/strong&gt;&lt;/a&gt; fix resolving non-deterministic code generation in compilation (&lt;a href="https://github.com/ocaml/ocaml/issues/14091"&gt;ocaml/ocaml#14091&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14088"&gt;ocaml/ocaml#14088&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14135" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Typechecker robustness&lt;/strong&gt;&lt;/a&gt; improvement fixing internal error in recursive modules with polymorphic fields (&lt;a href="https://github.com/ocaml/ocaml/issues/14135"&gt;ocaml/ocaml#14135&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14119" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance optimization&lt;/strong&gt;&lt;/a&gt; in Set/Map operations replacing &lt;code&gt;cardinal = 0&lt;/code&gt; with more efficient &lt;code&gt;is_empty&lt;/code&gt; calls (&lt;a href="https://github.com/ocaml/ocaml/issues/14119"&gt;ocaml/ocaml#14119&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Compiler infrastructure improvements&lt;/strong&gt; with merged bug fixes for ThreadSanitizer compatibility, pattern matching determinism, and typechecker robustness across &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14136" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Thread safety analysis acceleration&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; conducting systematic ThreadSanitizer investigation identifying potential race conditions in runtime components (&lt;a href="https://github.com/ocaml/ocaml/issues/14136"&gt;ocaml/ocaml#14136&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14131"&gt;ocaml/ocaml#14131&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14133"&gt;ocaml/ocaml#14133&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language committee governance&lt;/strong&gt;&lt;/a&gt; development with &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; proposing transparency-based conflict of interest policy for the OCaml Language Committee (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14138" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Platform expansion efforts&lt;/strong&gt;&lt;/a&gt; including &lt;a href="https://github.com/Sylvain78"&gt;Anarchos&lt;/a&gt; implementing Haiku OS native backend support (&lt;a href="https://github.com/ocaml/ocaml/issues/14138"&gt;ocaml/ocaml#14138&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14141" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer experience enhancements&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/smuenzel"&gt;Stefan Muenzel&lt;/a&gt; delivering large-scale terminology cleanup and GADT error message improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14141"&gt;ocaml/ocaml#14141&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14142"&gt;ocaml/ocaml#14142&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14135" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Coordinated leadership&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; contributing to both core compiler improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14135"&gt;ocaml/ocaml#14135&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14139"&gt;ocaml/ocaml#14139&lt;/a&gt;) and language governance in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14132" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation consistency concerns&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; raising accuracy issues about OCaml release dates displayed on ocaml.org package pages (&lt;a href="https://github.com/ocaml/ocaml/issues/14132"&gt;ocaml/ocaml#14132&lt;/a&gt;) while &lt;a href="https://github.com/shenlebantongying"&gt;shenleban tongying&lt;/a&gt; identified documentation formatting issues in RFC committee documentation (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14132" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation accuracy&lt;/strong&gt;&lt;/a&gt; concern raised by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; regarding incorrect OCaml release dates displayed on ocaml.org package pages (&lt;a href="https://github.com/ocaml/ocaml/issues/14132"&gt;ocaml/ocaml#14132&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation formatting&lt;/strong&gt;&lt;/a&gt; issue noted by &lt;a href="https://github.com/shenlebantongying"&gt;shenleban tongying&lt;/a&gt; regarding non-functional &lt;code&gt;size=80&lt;/code&gt; parameter in Committee.md file (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14134" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Memory model documentation&lt;/strong&gt;&lt;/a&gt; gaps identified by &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; highlighting need for clearer specifications (&lt;a href="https://github.com/ocaml/ocaml/issues/14134"&gt;ocaml/ocaml#14134&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14136" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Thread safety focus intensification&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; conducting systematic ThreadSanitizer analysis across OCaml runtime, identifying potential races in string handling (&lt;a href="https://github.com/ocaml/ocaml/issues/14136"&gt;ocaml/ocaml#14136&lt;/a&gt;), object system (&lt;a href="https://github.com/ocaml/ocaml/issues/14131"&gt;ocaml/ocaml#14131&lt;/a&gt;), and GC operations (&lt;a href="https://github.com/ocaml/ocaml/issues/14133"&gt;ocaml/ocaml#14133&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14140" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system robustness&lt;/strong&gt;&lt;/a&gt; improvements continuing with recursive module approximation bugs reported (&lt;a href="https://github.com/ocaml/ocaml/issues/14140"&gt;ocaml/ocaml#14140&lt;/a&gt;) and GADT error message enhancements in development (&lt;a href="https://github.com/ocaml/ocaml/issues/14142"&gt;ocaml/ocaml#14142&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14138" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Platform expansion&lt;/strong&gt;&lt;/a&gt; efforts with Haiku OS native backend implementation (&lt;a href="https://github.com/ocaml/ocaml/issues/14138"&gt;ocaml/ocaml#14138&lt;/a&gt;) and continued cross-language compatibility work (&lt;a href="https://github.com/ocaml/ocaml/issues/14139"&gt;ocaml/ocaml#14139&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/55" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Governance formalization&lt;/strong&gt;&lt;/a&gt; with establishment of transparent conflict of interest policies for language committee decision-making processes (&lt;a href="https://github.com/ocaml/RFCs/issues/55"&gt;ocaml/RFCs#55&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Core OCaml development focused on thread safety improvements, compiler bug fixes, and language committee governance proposals</summary><published>2025-07-13T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-27</id><title>Week 27, 2025: Active development in standard library enhancements and module system improvements, with RFC discussions advancing on language design features</title><updated>2025-07-06T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;Added &lt;a href="https://github.com/ocaml/ocaml/issues/14118" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;is_singleton functions&lt;/strong&gt;&lt;/a&gt; to Set and Map modules for testing whether containers have exactly one element (&lt;a href="https://github.com/ocaml/ocaml/issues/14118"&gt;ocaml/ocaml#14118&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Made &lt;a href="https://github.com/ocaml/ocaml/issues/14124" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;List.take and List.drop total functions&lt;/strong&gt;&lt;/a&gt; by removing Invalid_argument exception for negative inputs, now returning empty list and original list respectively (&lt;a href="https://github.com/ocaml/ocaml/issues/14124"&gt;ocaml/ocaml#14124&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;a href="https://github.com/ocaml/ocaml/issues/14128" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Float.frexp documentation&lt;/strong&gt;&lt;/a&gt; to correctly handle negative numbers by specifying &lt;code&gt;0.5 &lt;= abs x &lt; 1.0&lt;/code&gt; condition (&lt;a href="https://github.com/ocaml/ocaml/issues/14128"&gt;ocaml/ocaml#14128&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improved &lt;a href="https://github.com/ocaml/ocaml/issues/14090" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Char.compare documentation&lt;/strong&gt;&lt;/a&gt; to clarify it uses ASCII ordering (&lt;a href="https://github.com/ocaml/ocaml/issues/14090"&gt;ocaml/ocaml#14090&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;a href="https://github.com/ocaml/ocaml/issues/14091" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;non-deterministic code generation&lt;/strong&gt;&lt;/a&gt; in pattern matching compilation (&lt;a href="https://github.com/ocaml/ocaml/issues/14091"&gt;ocaml/ocaml#14091&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Corrected &lt;strong class="achievement"&gt;non-destructive &lt;code&gt;with type&lt;/code&gt; constraints&lt;/strong&gt; to properly handle type constraints in module signatures (&lt;a href="https://github.com/ocaml/ocaml/issues/14117"&gt;ocaml/ocaml#14117&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; delivered significant standard library enhancements including new Set/Map predicates, List function improvements, and documentation corrections across multiple modules (&lt;a href="https://github.com/ocaml/ocaml/issues/14118"&gt;ocaml/ocaml#14118&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14124"&gt;ocaml/ocaml#14124&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14128"&gt;ocaml/ocaml#14128&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14127" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module system robustness&lt;/strong&gt;&lt;/a&gt; improved through signature merging fixes, recursive module constraints, and non-destructive type constraint corrections (&lt;a href="https://github.com/ocaml/ocaml/issues/14127"&gt;ocaml/ocaml#14127&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14100"&gt;ocaml/ocaml#14100&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14117"&gt;ocaml/ocaml#14117&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; advanced language design discussions on transparent ascription and primitive aliases, with technical progress on implementation details (&lt;a href="https://github.com/ocaml/RFCs/pull/54"&gt;ocaml/RFCs#54&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/pull/44"&gt;ocaml/RFCs#44&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14119" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance and tooling&lt;/strong&gt;&lt;/a&gt; improvements included Set/Map optimization, IDE support enhancements, and compiler tooling infrastructure (&lt;a href="https://github.com/ocaml/ocaml/issues/14119"&gt;ocaml/ocaml#14119&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14120"&gt;ocaml/ocaml#14120&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/clementblaudeau"&gt;ClÃ©ment Blaudeau&lt;/a&gt; connected work&lt;/strong&gt; spanning both repositories, leading module system improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14127"&gt;ocaml/ocaml#14127&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14100"&gt;ocaml/ocaml#14100&lt;/a&gt;) while advancing related RFC discussions on transparent ascription and primitive aliases (&lt;a href="https://github.com/ocaml/RFCs/pull/54"&gt;ocaml/RFCs#54&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/pull/44"&gt;ocaml/RFCs#44&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13997" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module aliasing implementation&lt;/strong&gt;&lt;/a&gt; work referenced existing compiler bugs in the main repository (&lt;a href="https://github.com/ocaml/ocaml/issues/13997"&gt;ocaml/ocaml#13997&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13979"&gt;ocaml/ocaml#13979&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13897"&gt;ocaml/ocaml#13897&lt;/a&gt;) while discussing RFC design in &lt;a href="https://github.com/ocaml/RFCs/pull/54"&gt;ocaml/RFCs#54&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/44" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language design feedback&lt;/strong&gt;&lt;/a&gt; flowing from RFC discussions back to implementation considerations, particularly around signature constraint mechanisms for external primitives (&lt;a href="https://github.com/ocaml/RFCs/pull/44"&gt;ocaml/RFCs#44&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14125" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;String API naming conventions&lt;/strong&gt;&lt;/a&gt; sparked debate in &lt;a href="https://github.com/ocaml/ocaml/issues/14125"&gt;ocaml/ocaml#14125&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; and &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; disagreeing on &lt;code&gt;span&lt;/code&gt; vs &lt;code&gt;take_drop&lt;/code&gt; naming, considering alternatives like &lt;code&gt;cut&lt;/code&gt; and &lt;code&gt;split&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14129" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Record update evaluation order&lt;/strong&gt;&lt;/a&gt; raised by &lt;a href="https://github.com/Gbury"&gt;Guillaume Bury&lt;/a&gt; highlighting how field ordering in type definitions affects runtime behavior with mutable fields, potentially breaking invariants (&lt;a href="https://github.com/ocaml/ocaml/issues/14129"&gt;ocaml/ocaml#14129&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module aliasing scope restrictions&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/clementblaudeau"&gt;ClÃ©ment Blaudeau&lt;/a&gt; with references to related OCaml implementation bugs in the transparent ascription RFC (&lt;a href="https://github.com/ocaml/RFCs/pull/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14083" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Thread sanitizer crashes&lt;/strong&gt;&lt;/a&gt; continue to be investigated by &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; with &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; providing workarounds for TSAN issues affecting multicore programs (&lt;a href="https://github.com/ocaml/ocaml/issues/14083"&gt;ocaml/ocaml#14083&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14125" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Standard library API consistency&lt;/strong&gt;&lt;/a&gt; emphasis shown through careful naming discussions for new String functions and systematic addition of is_singleton predicates to Set/Map modules (&lt;a href="https://github.com/ocaml/ocaml/issues/14125"&gt;ocaml/ocaml#14125&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14121"&gt;ocaml/ocaml#14121&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14127" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module system robustness&lt;/strong&gt;&lt;/a&gt; improvements with multiple fixes for edge cases in signature merging, recursive modules, and type constraints handling (&lt;a href="https://github.com/ocaml/ocaml/issues/14127"&gt;ocaml/ocaml#14127&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14100"&gt;ocaml/ocaml#14100&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-repository coordination&lt;/strong&gt; demonstrated by &lt;a href="https://github.com/clementblaudeau"&gt;ClÃ©ment Blaudeau&lt;/a&gt; working on related module system features in both implementation and RFC design simultaneously&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14119" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance-conscious development&lt;/strong&gt;&lt;/a&gt; demonstrated by optimizing common operations like Set/Map emptiness checks and fixing non-deterministic code generation (&lt;a href="https://github.com/ocaml/ocaml/issues/14119"&gt;ocaml/ocaml#14119&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14091"&gt;ocaml/ocaml#14091&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14120" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Tooling infrastructure&lt;/strong&gt;&lt;/a&gt; enhancements for better IDE support with project-wide indexing improvements and uid tracking for functor parameters (&lt;a href="https://github.com/ocaml/ocaml/issues/14120"&gt;ocaml/ocaml#14120&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Active development in standard library enhancements and module system improvements, with RFC discussions advancing on language design features</summary><published>2025-07-06T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-26</id><title>Week 26, 2025: Active week with OCaml 5.4 regression testing, CI infrastructure fixes, and type system improvements in ocaml/ocaml</title><updated>2025-06-29T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13656" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;C99 stdint.h integration&lt;/strong&gt;&lt;/a&gt; modernizes OCaml's integer type definitions using standardized C99 fixed-width types and format macros, improving cross-platform compatibility (&lt;a href="https://github.com/ocaml/ocaml/issues/13656"&gt;ocaml/ocaml#13656&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14114"&gt;ocaml/ocaml#14114&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14057" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Memprof timing fix&lt;/strong&gt;&lt;/a&gt; corrects GC barrier sequencing to prevent premature memprof updates during minor GC cycles (&lt;a href="https://github.com/ocaml/ocaml/issues/14057"&gt;ocaml/ocaml#14057&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14093" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Channel flush race condition fix&lt;/strong&gt;&lt;/a&gt; resolves critical bug where closing an output channel during flush could hang or crash (&lt;a href="https://github.com/ocaml/ocaml/issues/14093"&gt;ocaml/ocaml#14093&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14105" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Pattern printer infinite loop fix&lt;/strong&gt;&lt;/a&gt; prevents Pprintast from hanging when printing constructor &lt;code&gt;(::)&lt;/code&gt; in isolation, affecting tools like Merlin (&lt;a href="https://github.com/ocaml/ocaml/issues/14105"&gt;ocaml/ocaml#14105&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14111" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system error message improvements&lt;/strong&gt;&lt;/a&gt; added better explanations for quantifier mismatches and fixed typos in toplevel directive errors (&lt;a href="https://github.com/ocaml/ocaml/issues/14111"&gt;ocaml/ocaml#14111&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14108"&gt;ocaml/ocaml#14108&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Primary activity concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; with 11 new PRs and multiple critical fixes merged, while &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; remained inactive during week 26&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14104" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;OCaml 5.4 alpha testing&lt;/strong&gt;&lt;/a&gt; revealed significant compatibility issues requiring immediate attention from maintainers (&lt;a href="https://github.com/ocaml/ocaml/issues/14104"&gt;ocaml/ocaml#14104&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14101"&gt;ocaml/ocaml#14101&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14115"&gt;ocaml/ocaml#14115&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14102" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Infrastructure modernization&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; strengthened CI reliability across multiple platforms (&lt;a href="https://github.com/ocaml/ocaml/issues/14102"&gt;ocaml/ocaml#14102&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14109"&gt;ocaml/ocaml#14109&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14111" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer experience focus&lt;/strong&gt;&lt;/a&gt; through better error messages, type system enhancements, and tooling compatibility fixes (&lt;a href="https://github.com/ocaml/ocaml/issues/14111"&gt;ocaml/ocaml#14111&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14105"&gt;ocaml/ocaml#14105&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14099" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;String module search functions&lt;/strong&gt;&lt;/a&gt; proposed by &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; exploring addition of efficient search capabilities to the String module for improved string processing (&lt;a href="https://github.com/ocaml/ocaml/issues/14099"&gt;ocaml/ocaml#14099&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14106" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module typechecking incompleteness&lt;/strong&gt;&lt;/a&gt; reported by &lt;a href="https://github.com/ccasin"&gt;Chris Casinghino&lt;/a&gt; with detailed analysis of shadowing behavior in recursive modules (&lt;a href="https://github.com/ocaml/ocaml/issues/14106"&gt;ocaml/ocaml#14106&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14104" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;OCaml 5.4 regression testing&lt;/strong&gt;&lt;/a&gt; uncovered multiple compatibility issues affecting external tooling including perf/flamegraph broken by symbol mangling changes (&lt;a href="https://github.com/ocaml/ocaml/issues/14104"&gt;ocaml/ocaml#14104&lt;/a&gt;), C++ compilation failures (&lt;a href="https://github.com/ocaml/ocaml/issues/14101"&gt;ocaml/ocaml#14101&lt;/a&gt;), and Array module conflicts (&lt;a href="https://github.com/ocaml/ocaml/issues/14115"&gt;ocaml/ocaml#14115&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Infrastructure hardening&lt;/strong&gt; continues with focus on CI reliability, cross-platform warning elimination, and build system modernization across Windows, macOS, and Linux environments&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer experience improvements&lt;/strong&gt; through better error messages, type system enhancements, and tooling fixes demonstrating commitment to usability alongside performance&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Active week with OCaml 5.4 regression testing, CI infrastructure fixes, and type system improvements in ocaml/ocaml</summary><published>2025-06-29T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-25</id><title>Week 25, 2025: Standard library enhancements with new Option and Dynarray functions, Domain API refinement, and substantial test infrastructure improvements</title><updated>2025-06-22T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13920" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Option module enhancements&lt;/strong&gt;&lt;/a&gt; with new &lt;code&gt;for_all&lt;/code&gt; and &lt;code&gt;exists&lt;/code&gt; functions that behave like their List counterparts on zero or one element (&lt;a href="https://github.com/ocaml/ocaml/issues/13920"&gt;ocaml/ocaml#13920&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/12877" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Dynarray reverse iteration&lt;/strong&gt;&lt;/a&gt; support with &lt;code&gt;rev_iter&lt;/code&gt; and &lt;code&gt;rev_iteri&lt;/code&gt; functions for stack-like workflows, iterating from highest to lowest index (&lt;a href="https://github.com/ocaml/ocaml/issues/12877"&gt;ocaml/ocaml#12877&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14096" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Domain API refinement&lt;/strong&gt;&lt;/a&gt; by renaming &lt;code&gt;Domain.running_domain_count&lt;/code&gt; to &lt;code&gt;Domain.count&lt;/code&gt; for cleaner interface (&lt;a href="https://github.com/ocaml/ocaml/issues/14096"&gt;ocaml/ocaml#14096&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13447" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Improved Unix/Sys symmetry&lt;/strong&gt;&lt;/a&gt; with shared implementations between &lt;code&gt;Sys&lt;/code&gt; and &lt;code&gt;Unix&lt;/code&gt; modules for portability functions like rename, close, chdir, and system commands (&lt;a href="https://github.com/ocaml/ocaml/issues/13447"&gt;ocaml/ocaml#13447&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14014" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Enhanced test harness infrastructure&lt;/strong&gt;&lt;/a&gt; for relocatable OCaml with comprehensive testing tools for bytecode binaries, dynlink, link modes, relocation, and toplevel functionality (&lt;a href="https://github.com/ocaml/ocaml/issues/14014"&gt;ocaml/ocaml#14014&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Core language development&lt;/strong&gt; focused entirely on &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with nine contributors delivering standard library enhancements, test infrastructure improvements, and platform compatibility fixes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13920" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Standard library expansion&lt;/strong&gt;&lt;/a&gt; through new predicates in Option module and reverse iteration support in Dynarray module (&lt;a href="https://github.com/ocaml/ocaml/issues/13920"&gt;ocaml/ocaml#13920&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/12877"&gt;ocaml/ocaml#12877&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14096" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;API consistency improvements&lt;/strong&gt;&lt;/a&gt; with Domain module cleanup and enhanced Unix/Sys module symmetry for better cross-platform compatibility (&lt;a href="https://github.com/ocaml/ocaml/issues/14096"&gt;ocaml/ocaml#14096&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13447"&gt;ocaml/ocaml#13447&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14014" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Test infrastructure modernization&lt;/strong&gt;&lt;/a&gt; with comprehensive relocatable OCaml testing and ThreadSanitizer reliability improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14014"&gt;ocaml/ocaml#14014&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14059"&gt;ocaml/ocaml#14059&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;RFC repository dormancy&lt;/strong&gt; with &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; showing no activity during this period&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14083" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;ThreadSanitizer crash investigation&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/dijkstracula"&gt;Nathan Taylor&lt;/a&gt; reporting crashes in both Semgrep and dune builds under TSan, leading to &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; identifying potential C stub compilation issues with Dune (&lt;a href="https://github.com/ocaml/ocaml/issues/14083"&gt;ocaml/ocaml#14083&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14088" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Pattern matching determinism&lt;/strong&gt;&lt;/a&gt; discussion where &lt;a href="https://github.com/cristianoc"&gt;Cristiano Calcagno&lt;/a&gt; discovered non-deterministic code generation in pattern matching compilation, resolved through &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; implementing deterministic hash table iteration (&lt;a href="https://github.com/ocaml/ocaml/issues/14088"&gt;ocaml/ocaml#14088&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14095" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type scope error messages&lt;/strong&gt;&lt;/a&gt; debate with &lt;a href="https://github.com/jfehrle"&gt;Jim Fehrle&lt;/a&gt; requesting clearer explanations for "type constructor would escape its scope" errors, with &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; providing detailed scope visualization proposals (&lt;a href="https://github.com/ocaml/ocaml/issues/14095"&gt;ocaml/ocaml#14095&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14089" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Digest reproducibility concerns&lt;/strong&gt;&lt;/a&gt; raised by &lt;a href="https://github.com/glondu"&gt;StÃ©phane Glondu&lt;/a&gt; about compression causing binary distribution issues when zstd versions change, affecting cmi/cmx digests (&lt;a href="https://github.com/ocaml/ocaml/issues/14089"&gt;ocaml/ocaml#14089&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Standard library ergonomics&lt;/strong&gt; emphasis with consistent addition of missing predicates and iteration functions to match established patterns across modules&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Test infrastructure maturation&lt;/strong&gt; through comprehensive test harness development covering complex scenarios like relocatable installations and cross-platform compatibility&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;ThreadSanitizer integration&lt;/strong&gt; becoming more robust with systematic fixes for flaky tests and proper toolchain integration&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer experience focus&lt;/strong&gt; evident in pattern matching determinism fixes, clearer error messages, and improved documentation formatting&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Platform consistency&lt;/strong&gt; efforts through code sharing between Unix and Sys modules, reducing maintenance burden and potential discrepancies&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Standard library enhancements with new Option and Dynarray functions, Domain API refinement, and substantial test infrastructure improvements</summary><published>2025-06-22T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-24</id><title>Week 24, 2025: Apple Silicon performance improvements and ThreadSanitizer compatibility fixes delivered in OCaml core compiler</title><updated>2025-06-15T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14074" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Apple Silicon performance&lt;/strong&gt;&lt;/a&gt; optimization by &lt;a href="https://github.com/kayceesrk"&gt;KC Sivaramakrishnan&lt;/a&gt; replacing slow fenced stores with fast release stores, delivering &lt;strong class="achievement"&gt;25x performance improvement&lt;/strong&gt; for certain workloads (&lt;a href="https://github.com/ocaml/ocaml/issues/14074"&gt;ocaml/ocaml#14074&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Domain management API&lt;/strong&gt; enhancement with new &lt;code&gt;Domain.running_domain_count&lt;/code&gt; function by &lt;a href="https://github.com/nojb"&gt;NicolÃ¡s Ojeda BÃ¤r&lt;/a&gt; for dynamic domain monitoring in long-running applications (&lt;a href="https://github.com/ocaml/ocaml/commit/f1c31807fd9d56880bef5e64c8b2aec175dcbc10"&gt;f1c31807fd9d56880bef5e64c8b2aec175dcbc10&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;UTF-8 string utilities&lt;/strong&gt; added to &lt;code&gt;Misc.Stdlib.String&lt;/code&gt; module with &lt;code&gt;to_utf_8_seq&lt;/code&gt; function for Unicode processing (&lt;a href="https://github.com/ocaml/ocaml/commit/b48ba73a22dbf499133dcb1dbd8464be41f5e8a8"&gt;b48ba73a22dbf499133dcb1dbd8464be41f5e8a8&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;DLL search path API&lt;/strong&gt; expanded with &lt;code&gt;Dll.search_path&lt;/code&gt; function for accessing current dynamic library search paths (&lt;a href="https://github.com/ocaml/ocaml/commit/79071c4ddd659a33b917101a6d451e888063e8ef"&gt;79071c4ddd659a33b917101a6d451e888063e8ef&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Test infrastructure&lt;/strong&gt; for relocatable OCaml with comprehensive harness tools enabling portable compiler installations (&lt;a href="https://github.com/ocaml/ocaml/commit/9585ef98182f0159a6ceb00e0824ff11cf3237c0"&gt;9585ef98182f0159a6ceb00e0824ff11cf3237c0&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Single repository activity&lt;/strong&gt; with &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; delivering significant performance improvements and runtime stability fixes while &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; had no activity&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14074" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance focus&lt;/strong&gt;&lt;/a&gt; on Apple Silicon optimization by &lt;a href="https://github.com/kayceesrk"&gt;KC Sivaramakrishnan&lt;/a&gt; achieving 25x improvements for specific workloads (&lt;a href="https://github.com/ocaml/ocaml/issues/14074"&gt;ocaml/ocaml#14074&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14075" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Multicore runtime stability&lt;/strong&gt;&lt;/a&gt; improvements with &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; addressing ThreadSanitizer compatibility issues affecting production tools (&lt;a href="https://github.com/ocaml/ocaml/issues/14075"&gt;ocaml/ocaml#14075&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14083"&gt;ocaml/ocaml#14083&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;API enhancements&lt;/strong&gt; including new domain management functions and UTF-8 utilities for improved developer experience&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Test infrastructure&lt;/strong&gt; development for relocatable OCaml installations enabling portable compiler distributions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14075" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Multicore runtime stability&lt;/strong&gt;&lt;/a&gt; becoming priority with multiple ThreadSanitizer improvements addressing production issues affecting tools like Semgrep and Dune (&lt;a href="https://github.com/ocaml/ocaml/issues/14075"&gt;ocaml/ocaml#14075&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14083"&gt;ocaml/ocaml#14083&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14074" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Cross-platform performance&lt;/strong&gt;&lt;/a&gt; optimization efforts targeting Apple Silicon and ARM64 architectures with specific instruction-level improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14074"&gt;ocaml/ocaml#14074&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Relocatable compiler infrastructure&lt;/strong&gt; development enabling portable OCaml installations that work from any disk location (&lt;a href="https://github.com/ocaml/ocaml/commit/9585ef98182f0159a6ceb00e0824ff11cf3237c0"&gt;9585ef98182f0159a6ceb00e0824ff11cf3237c0&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14076" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Enhanced debugging and development tools&lt;/strong&gt;&lt;/a&gt; with better error messages, debugging infrastructure, and sanitizer compatibility improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/14076"&gt;ocaml/ocaml#14076&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14085"&gt;ocaml/ocaml#14085&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Apple Silicon performance improvements and ThreadSanitizer compatibility fixes delivered in OCaml core compiler</summary><published>2025-06-15T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-23</id><title>Week 23, 2025: Active week with standard library additions, Apple Silicon optimizations, and multiple compiler improvements across six merged PRs</title><updated>2025-06-08T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13995" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Option.blend function&lt;/strong&gt;&lt;/a&gt; added to standard library by &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; enabling flexible combination of optional values (&lt;a href="https://github.com/ocaml/ocaml/issues/13995"&gt;ocaml/ocaml#13995&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14074" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Sixtyfour memory chunk&lt;/strong&gt;&lt;/a&gt; introduced by &lt;a href="https://github.com/kayceesrk"&gt;KC Sivaramakrishnan&lt;/a&gt; for handling unaligned 64-bit accesses without memory ordering requirements, optimizing Apple Silicon performance (&lt;a href="https://github.com/ocaml/ocaml/issues/14074"&gt;ocaml/ocaml#14074&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14070" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Enhanced error messages&lt;/strong&gt;&lt;/a&gt; for tuple label mismatches by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; providing clearer feedback when labels don't match (&lt;a href="https://github.com/ocaml/ocaml/issues/14070"&gt;ocaml/ocaml#14070&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14063" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Debugger source file fallback&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/pirbo"&gt;Pierre Boutillier&lt;/a&gt; enabling loadpath-based source file discovery for better dune project support (&lt;a href="https://github.com/ocaml/ocaml/issues/14063"&gt;ocaml/ocaml#14063&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; delivered six merged PRs including standard library enhancements, compiler optimizations, and developer tooling improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; had no activity during this period&lt;/li&gt;
&lt;li&gt;Eight core contributors collaborated on features ranging from Apple Silicon performance to documentation quality&lt;/li&gt;
&lt;li&gt;Quick resolution of critical GC bug through community reporting and maintainer response (&lt;a href="https://github.com/ocaml/ocaml/issues/14073"&gt;ocaml/ocaml#14073&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14073" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Critical GC crash&lt;/strong&gt;&lt;/a&gt; reported by &lt;a href="https://github.com/bvaugon"&gt;BenoÃ®t Vaugon&lt;/a&gt; where garbage collection stops triggering after heap compactions, quickly resolved by &lt;a href="https://github.com/damiendoligez"&gt;Damien Doligez&lt;/a&gt; with reference to existing fix (&lt;a href="https://github.com/ocaml/ocaml/issues/14073"&gt;ocaml/ocaml#14073&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14069" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Bigarray integer access&lt;/strong&gt;&lt;/a&gt; feature request by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; to expose &lt;code&gt;{get,set}_int{16,32,64}_{le,be}&lt;/code&gt; primitives, with support from &lt;a href="https://github.com/avsm"&gt;Anil Madhavapeddy&lt;/a&gt; for mirage-cstruct use case (&lt;a href="https://github.com/ocaml/ocaml/issues/14069"&gt;ocaml/ocaml#14069&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14078" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Alerts documentation inconsistencies&lt;/strong&gt;&lt;/a&gt; detailed analysis by &lt;a href="https://github.com/shonfeder"&gt;Shon Feder&lt;/a&gt; identifying confusing grammar and usage patterns in alert attributes (&lt;a href="https://github.com/ocaml/ocaml/issues/14078"&gt;ocaml/ocaml#14078&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Apple Silicon optimization&lt;/strong&gt; efforts showing measurable performance improvements through better instruction generation and memory access patterns&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Error message quality&lt;/strong&gt; initiatives with ongoing improvements to compiler feedback and user experience&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Multicore stability&lt;/strong&gt; focus with GC bug fixes and runtime system reliability improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Standard library expansion&lt;/strong&gt; adding commonly requested utility functions like Option.blend&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Documentation accuracy&lt;/strong&gt; efforts identifying and fixing inconsistencies across language feature descriptions&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Active week with standard library additions, Apple Silicon optimizations, and multiple compiler improvements across six merged PRs</summary><published>2025-06-08T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-22</id><title>Week 22, 2025: Eight PRs opened in ocaml/ocaml covering language features, debugging tools, memory profiling, and runtime system improvements</title><updated>2025-06-01T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Active development&lt;/strong&gt; concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with eight new PRs addressing language features, runtime system improvements, and developer tooling&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;No activity&lt;/strong&gt; recorded in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; during this week&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Multicore runtime stability&lt;/strong&gt; receiving focused attention with memory profiling enhancements and ThreadSanitizer improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Type system evolution&lt;/strong&gt; progressing with transparent ascription implementation and deprecation mechanisms&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Multicore performance analysis&lt;/strong&gt;&lt;/a&gt; with detailed profiling data from Infer static analyzer workloads by &lt;a href="https://github.com/ngorogiannis"&gt;Nikos Gorogiannis&lt;/a&gt;, receiving technical analysis from &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; and &lt;a href="https://github.com/kayceesrk"&gt;KC Sivaramakrishnan&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14056" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime compilation standards&lt;/strong&gt;&lt;/a&gt; discussion initiated by &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; suggesting improvements to prevent future GCC-related issues (&lt;a href="https://github.com/ocaml/ocaml/issues/14056"&gt;ocaml/ocaml#14056&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14061" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime system data races&lt;/strong&gt;&lt;/a&gt; reported by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; with specific ThreadSanitizer findings (&lt;a href="https://github.com/ocaml/ocaml/issues/14061"&gt;ocaml/ocaml#14061&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14058"&gt;ocaml/ocaml#14058&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14053" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Multicore runtime maturation&lt;/strong&gt;&lt;/a&gt; with focused work on memory profiling coordination, garbage collection timing, and ThreadSanitizer test reliability (&lt;a href="https://github.com/ocaml/ocaml/issues/14053"&gt;ocaml/ocaml#14053&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14057"&gt;ocaml/ocaml#14057&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14059"&gt;ocaml/ocaml#14059&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14055" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer experience improvements&lt;/strong&gt;&lt;/a&gt; with debugger enhancements for modern build systems and improved tooling integration (&lt;a href="https://github.com/ocaml/ocaml/issues/14055"&gt;ocaml/ocaml#14055&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14063"&gt;ocaml/ocaml#14063&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14064" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system evolution&lt;/strong&gt;&lt;/a&gt; advancing with transparent ascription implementation and deprecation mechanisms for smooth API transitions (&lt;a href="https://github.com/ocaml/ocaml/issues/14064"&gt;ocaml/ocaml#14064&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14054"&gt;ocaml/ocaml#14054&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14058" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Data race detection focus&lt;/strong&gt;&lt;/a&gt; with multiple reports and improvements to ThreadSanitizer testing reliability (&lt;a href="https://github.com/ocaml/ocaml/issues/14058"&gt;ocaml/ocaml#14058&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14059"&gt;ocaml/ocaml#14059&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14061"&gt;ocaml/ocaml#14061&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Eight PRs opened in ocaml/ocaml covering language features, debugging tools, memory profiling, and runtime system improvements</summary><published>2025-06-01T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-21</id><title>Week 21, 2025: Cross-compilation support for freestanding targets merged, multicore GC race condition fixed, Windows process handling improved</title><updated>2025-05-25T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13810" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Cross-compilation support&lt;/strong&gt;&lt;/a&gt; for freestanding targets (MirageOS unikernels) enabling embedded development (&lt;a href="https://github.com/ocaml/ocaml/issues/13810"&gt;ocaml/ocaml#13810&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14046" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Windows process termination&lt;/strong&gt;&lt;/a&gt; behavior improved in &lt;code&gt;Unix.kill&lt;/code&gt; to return proper exit code ERROR&lt;em&gt;PROCESS&lt;/em&gt;ABORTED (1067) instead of 0 (&lt;a href="https://github.com/ocaml/ocaml/issues/14046"&gt;ocaml/ocaml#14046&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14025" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Multicore GC stability&lt;/strong&gt;&lt;/a&gt; fix for race condition in shared heap handling during domain termination (&lt;a href="https://github.com/ocaml/ocaml/issues/14025"&gt;ocaml/ocaml#14025&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/10570" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Special constructor&lt;/strong&gt;&lt;/a&gt; for &lt;code&gt;%sys_argv&lt;/code&gt; primitive fixing bug where direct calls incorrectly included extra arguments (&lt;a href="https://github.com/ocaml/ocaml/issues/10570"&gt;ocaml/ocaml#10570&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14045" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Build reproducibility&lt;/strong&gt;&lt;/a&gt; improvements using BUILD&lt;em&gt;PATH&lt;/em&gt;PREFIX_MAP for debug event path sanitization (&lt;a href="https://github.com/ocaml/ocaml/issues/14045"&gt;ocaml/ocaml#14045&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13781" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system scope&lt;/strong&gt;&lt;/a&gt; handling improvements for GADT type checking in principal mode (&lt;a href="https://github.com/ocaml/ocaml/issues/13781"&gt;ocaml/ocaml#13781&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Core runtime development&lt;/strong&gt; focused on multicore stability and cross-platform compatibility through &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with six major features merged and seven new PRs opened&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13810" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Platform expansion&lt;/strong&gt;&lt;/a&gt; with successful integration of freestanding target compilation enabling embedded and unikernel development (&lt;a href="https://github.com/ocaml/ocaml/issues/13810"&gt;ocaml/ocaml#13810&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Production stability&lt;/strong&gt;&lt;/a&gt; improvements addressing real-world multicore performance issues identified in Facebook's Infer analyzer deployment (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;No RFC activity&lt;/strong&gt; recorded in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; during this period&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14044" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Domain count optimization&lt;/strong&gt;&lt;/a&gt; debate initiated by &lt;a href="https://github.com/zapashcanon"&gt;@zapashcanon&lt;/a&gt; questioning whether &lt;code&gt;Domain.recommended_domain_count&lt;/code&gt; should return physical cores instead of logical cores for better cache performance (&lt;a href="https://github.com/ocaml/ocaml/issues/14044"&gt;ocaml/ocaml#14044&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Real-world multicore performance&lt;/strong&gt;&lt;/a&gt; investigation by &lt;a href="https://github.com/ngorogiannis"&gt;Nikos Gorogiannis&lt;/a&gt; documenting 30% performance penalty when Facebook's Infer analyzer uses multicore versus multiprocessing, with detailed profiling data showing runtime lock contention (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14052" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;AI-assisted development&lt;/strong&gt;&lt;/a&gt; guidelines discussion started by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; addressing modern contribution workflows (&lt;a href="https://github.com/ocaml/ocaml/issues/14052"&gt;ocaml/ocaml#14052&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14047" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Multicore runtime maturation&lt;/strong&gt;&lt;/a&gt; with increased focus on production performance optimization and race condition fixes reflecting real-world deployment needs across major projects like Facebook's Infer analyzer (&lt;a href="https://github.com/ocaml/ocaml/issues/14047"&gt;ocaml/ocaml#14047&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14046" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Cross-platform development&lt;/strong&gt;&lt;/a&gt; emphasis through improved Windows compatibility (&lt;a href="https://github.com/ocaml/ocaml/issues/14046"&gt;ocaml/ocaml#14046&lt;/a&gt;) and embedded/unikernel compilation support (&lt;a href="https://github.com/ocaml/ocaml/issues/13810"&gt;ocaml/ocaml#13810&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14048" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language evolution preparation&lt;/strong&gt;&lt;/a&gt; with documentation and groundwork for upcoming modular explicits feature (&lt;a href="https://github.com/ocaml/ocaml/issues/14048"&gt;ocaml/ocaml#14048&lt;/a&gt;) and potential field getter syntax (&lt;a href="https://github.com/ocaml/ocaml/issues/14042"&gt;ocaml/ocaml#14042&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14052" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Modern development practices&lt;/strong&gt;&lt;/a&gt; integration including AI-assisted contribution guidelines (&lt;a href="https://github.com/ocaml/ocaml/issues/14052"&gt;ocaml/ocaml#14052&lt;/a&gt;) and improved build reproducibility (&lt;a href="https://github.com/ocaml/ocaml/issues/14045"&gt;ocaml/ocaml#14045&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Cross-compilation support for freestanding targets merged, multicore GC race condition fixed, Windows process handling improved</summary><published>2025-05-25T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-20</id><title>Week 20, 2025: Major generational stack scanning merged for ARM64/POWER/RISC-V and new Sys.runtime_executable API added to ocaml/ocaml.</title><updated>2025-05-18T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13594" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Generational stack scanning&lt;/strong&gt;&lt;/a&gt; implemented for ARM64, POWER, and RISC-V architectures reduces minor GC work with deep call stacks &lt;a href="https://github.com/ocaml/ocaml/issues/13594"&gt;ocaml/ocaml#13594&lt;/a&gt; by &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13728" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;New Sys.runtime_executable API&lt;/strong&gt;&lt;/a&gt; added to get the full path to the currently executing runtime, useful for distinguishing between ocamlrun and native executables &lt;a href="https://github.com/ocaml/ocaml/issues/13728"&gt;ocaml/ocaml#13728&lt;/a&gt; by &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13969" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Improved toplevel printer machinery&lt;/strong&gt;&lt;/a&gt; now unified between toplevel and debugger with generalized polymorphic #install_printer support &lt;a href="https://github.com/ocaml/ocaml/issues/13969"&gt;ocaml/ocaml#13969&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13675" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Unix.map_file memory tracking&lt;/strong&gt;&lt;/a&gt; in Gc.Memprof ensures all Bigarray memory managed by GC is properly tracked &lt;a href="https://github.com/ocaml/ocaml/issues/13675"&gt;ocaml/ocaml#13675&lt;/a&gt; by &lt;a href="https://github.com/stedolan"&gt;Stephen Dolan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13608" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Better recursive module error messages&lt;/strong&gt;&lt;/a&gt; provide clearer diagnostics for invalid recursive module definitions &lt;a href="https://github.com/ocaml/ocaml/issues/13608"&gt;ocaml/ocaml#13608&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13853" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Format module line breaking&lt;/strong&gt;&lt;/a&gt; fixes premature line breaks when break hints appear at line end &lt;a href="https://github.com/ocaml/ocaml/issues/13853"&gt;ocaml/ocaml#13853&lt;/a&gt; by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; delivered significant runtime improvements with generational stack scanning merged for ARM64, POWER, and RISC-V architectures &lt;a href="https://github.com/ocaml/ocaml/issues/13594"&gt;ocaml/ocaml#13594&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13728" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;New runtime API&lt;/strong&gt;&lt;/a&gt; added with Sys.runtime_executable for better executable introspection &lt;a href="https://github.com/ocaml/ocaml/issues/13728"&gt;ocaml/ocaml#13728&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Multiple infrastructure merges&lt;/strong&gt; completed including printer system unification, memory tracking improvements, and parser enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; saw continued technical discussion on transparent ascription RFC with modular implicits benefits highlighted &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Language design coordination&lt;/strong&gt; between &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; runtime improvements and &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; transparent ascription discussions, with potential syntax enhancements supporting future modular implicits implementation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Research integration&lt;/strong&gt;&lt;/a&gt; shown in &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt;'s RFC feedback &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;, directly connecting his modular implicits PhD research with language design proposals&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Modular implicits integration&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; explaining how transparent ascription would reduce false ambiguities and improve module syntax patterns in the transparent ascription RFC &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13594" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime infrastructure focus&lt;/strong&gt;&lt;/a&gt; with generational stack scanning implementation &lt;a href="https://github.com/ocaml/ocaml/issues/13594"&gt;ocaml/ocaml#13594&lt;/a&gt; and memprof tracking improvements &lt;a href="https://github.com/ocaml/ocaml/issues/13675"&gt;ocaml/ocaml#13675&lt;/a&gt; addressing multicore environment performance&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14034" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Cross-platform development&lt;/strong&gt;&lt;/a&gt; emphasis shown in FlexDLL improvements &lt;a href="https://github.com/ocaml/ocaml/issues/14034"&gt;ocaml/ocaml#14034&lt;/a&gt;, Windows-specific fixes, and ARM64 architecture support&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13969" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer tooling enhancements&lt;/strong&gt;&lt;/a&gt; through unified printer systems &lt;a href="https://github.com/ocaml/ocaml/issues/13969"&gt;ocaml/ocaml#13969&lt;/a&gt;, better error messages &lt;a href="https://github.com/ocaml/ocaml/issues/13608"&gt;ocaml/ocaml#13608&lt;/a&gt;, and relocatable OCaml support &lt;a href="https://github.com/ocaml/ocaml/issues/14244"&gt;ocaml/ocaml#14244&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Research-driven language evolution&lt;/strong&gt;&lt;/a&gt; demonstrated by academic contributors like &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; connecting PhD work on modular implicits with RFC discussions &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major generational stack scanning merged for ARM64/POWER/RISC-V and new Sys.runtime_executable API added to ocaml/ocaml.</summary><published>2025-05-18T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-19</id><title>Week 19, 2025: Major atomic record fields feature merged with runtime stability fixes and ongoing module system discussions</title><updated>2025-05-11T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13404" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Atomic record fields&lt;/strong&gt;&lt;/a&gt; with &lt;code&gt;[@atomic]&lt;/code&gt; attribute and &lt;code&gt;Atomic.Loc&lt;/code&gt; module for atomic operations on record fields (&lt;a href="https://github.com/ocaml/ocaml/issues/13404"&gt;ocaml/ocaml#13404&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14020" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Unix.unsetenv&lt;/strong&gt;&lt;/a&gt; function to remove environment variables from process environment (&lt;a href="https://github.com/ocaml/ocaml/issues/14020"&gt;ocaml/ocaml#14020&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13916" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Option.product&lt;/strong&gt;&lt;/a&gt; function and &lt;strong class="achievement"&gt;Option.Syntax&lt;/strong&gt; module with binding operators for applicative-style programming (&lt;a href="https://github.com/ocaml/ocaml/issues/13916"&gt;ocaml/ocaml#13916&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Dynarray.unsafe&lt;em&gt;to&lt;/em&gt;iarray&lt;/strong&gt; for zero-copy conversion to immutable arrays when capacity equals length (&lt;a href="https://github.com/ocaml/ocaml/issues/13909"&gt;ocaml/ocaml#13909&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14015" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Memory corruption fix&lt;/strong&gt;&lt;/a&gt; during demarshaling when exceptions are raised, preventing segfaults during GC (&lt;a href="https://github.com/ocaml/ocaml/issues/14015"&gt;ocaml/ocaml#14015&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13953" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Domain lock release&lt;/strong&gt;&lt;/a&gt; fix preventing deadlocks when domain creation fails (&lt;a href="https://github.com/ocaml/ocaml/issues/13953"&gt;ocaml/ocaml#13953&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13970" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime events dispatch&lt;/strong&gt;&lt;/a&gt; fix ensuring correct event message types are sent (&lt;a href="https://github.com/ocaml/ocaml/issues/13970"&gt;ocaml/ocaml#13970&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13404" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Major concurrency milestone&lt;/strong&gt;&lt;/a&gt; achieved with atomic record fields landing in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;, enabling thread-safe field access through compiler-enforced atomic operations (&lt;a href="https://github.com/ocaml/ocaml/issues/13404"&gt;ocaml/ocaml#13404&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14015" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime stability improvements&lt;/strong&gt;&lt;/a&gt; across multiple critical areas including memory corruption fixes, domain management, and event dispatching in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/14015"&gt;ocaml/ocaml#14015&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13953"&gt;ocaml/ocaml#13953&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14020" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Standard library modernization&lt;/strong&gt;&lt;/a&gt; with Unix environment management and functional programming ergonomics through Option utilities (&lt;a href="https://github.com/ocaml/ocaml/issues/14020"&gt;ocaml/ocaml#14020&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13916"&gt;ocaml/ocaml#13916&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module system design discussions&lt;/strong&gt;&lt;/a&gt; advancing in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; with transparent ascription proposal addressing performance and aliasing concerns (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13911" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module system expertise&lt;/strong&gt;&lt;/a&gt; demonstrated by &lt;a href="https://github.com/clementblaudeau"&gt;ClÃ©ment Blaudeau&lt;/a&gt; working simultaneously on signature constraint refactoring in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; and transparent ascription RFC design in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13911"&gt;ocaml/ocaml#13911&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13909" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance optimization discussions&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; connecting array conversion work in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with module system performance questions in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13909"&gt;ocaml/ocaml#13909&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module system performance implications&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; questioning whether transparent ascription could achieve similar performance gains to lazy module strengthening used at Jane Street (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14017" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Windows compatibility challenges&lt;/strong&gt;&lt;/a&gt; highlighted by &lt;a href="https://github.com/bvaugon"&gt;BenoÃ®t Vaugon&lt;/a&gt; reporting marshal closure issues affecting cross-platform development (&lt;a href="https://github.com/ocaml/ocaml/issues/14017"&gt;ocaml/ocaml#14017&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13404" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Concurrency ecosystem expansion&lt;/strong&gt;&lt;/a&gt; with atomic record fields representing a new approach to thread-safe data structure design, complementing existing domain-level parallelism features in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13404"&gt;ocaml/ocaml#13404&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14017" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Cross-platform reliability emphasis&lt;/strong&gt;&lt;/a&gt; with Windows-specific marshal closure issues being reported and Unix environment management being standardized across platforms (&lt;a href="https://github.com/ocaml/ocaml/issues/14017"&gt;ocaml/ocaml#14017&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14020"&gt;ocaml/ocaml#14020&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module system modernization&lt;/strong&gt;&lt;/a&gt; discussions in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; exploring performance optimizations that could benefit both academic research and industrial usage (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14015" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime robustness improvements&lt;/strong&gt;&lt;/a&gt; addressing edge cases in garbage collection, domain management, and demarshaling that could cause segfaults under concurrent workloads (&lt;a href="https://github.com/ocaml/ocaml/issues/14015"&gt;ocaml/ocaml#14015&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13953"&gt;ocaml/ocaml#13953&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major atomic record fields feature merged with runtime stability fixes and ongoing module system discussions</summary><published>2025-05-11T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-18</id><title>Week 18, 2025: Version bump to OCaml 5.5.0 with parser refactoring, CI improvements, and documentation enhancements in ocaml/ocaml</title><updated>2025-05-04T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Version bump to 5.5.0&lt;/strong&gt; with magic numbers updated for the upcoming release in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/commit/60494e239ab043d72c1b1869ca790f7320f849fa"&gt;60494e2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13966" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Enhanced debugger printing&lt;/strong&gt;&lt;/a&gt; support with generalized polymorphic &lt;code&gt;#install_printer&lt;/code&gt; functionality (&lt;a href="https://github.com/ocaml/ocaml/issues/13966"&gt;ocaml/ocaml#13966&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13839" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Improved AST handling&lt;/strong&gt;&lt;/a&gt; for &lt;code&gt;let open&lt;/code&gt;, &lt;code&gt;let module&lt;/code&gt; and &lt;code&gt;let exception&lt;/code&gt; constructs unified through single implementation (&lt;a href="https://github.com/ocaml/ocaml/issues/13839"&gt;ocaml/ocaml#13839&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14002" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Web manual anchors&lt;/strong&gt;&lt;/a&gt; added to API documentation headings and items for easier linking (&lt;a href="https://github.com/ocaml/ocaml/issues/14002"&gt;ocaml/ocaml#14002&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Enhanced In&lt;em&gt;Channel and Out&lt;/em&gt;Channel documentation&lt;/strong&gt; with clearer usage examples (&lt;a href="https://github.com/ocaml/ocaml/issues/13982"&gt;ocaml/ocaml#13982&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13975" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Build system improvements&lt;/strong&gt;&lt;/a&gt; with &lt;code&gt;[@remove_aliases]&lt;/code&gt; attribute now properly documented (&lt;a href="https://github.com/ocaml/ocaml/issues/13975"&gt;ocaml/ocaml#13975&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14008" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Parser bug fix&lt;/strong&gt;&lt;/a&gt; for &lt;code&gt;Pexp_struct_item&lt;/code&gt; parentheses handling in sequences (&lt;a href="https://github.com/ocaml/ocaml/issues/14008"&gt;ocaml/ocaml#14008&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Primary activity concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; with 11 merged PRs covering version updates, parser improvements, and infrastructure enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;No activity recorded in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; during this week&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Release preparation&lt;/strong&gt; for OCaml 5.5.0 with version bump and magic number updates&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Eight active contributors&lt;/strong&gt; working on parser modernization, CI improvements, and documentation enhancements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Release preparation&lt;/strong&gt; for OCaml 5.5.0 with version bumps and infrastructure improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13839" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Parser modernization&lt;/strong&gt;&lt;/a&gt; through unification of local and global construct handling, making codebase more maintainable (&lt;a href="https://github.com/ocaml/ocaml/issues/13839"&gt;ocaml/ocaml#13839&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14013" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;CI robustness improvements&lt;/strong&gt;&lt;/a&gt; with expanded test matrices and better platform coverage including Cygwin support (&lt;a href="https://github.com/ocaml/ocaml/issues/14013"&gt;ocaml/ocaml#14013&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14002" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation quality focus&lt;/strong&gt;&lt;/a&gt; with enhanced API linking and clearer usage examples (&lt;a href="https://github.com/ocaml/ocaml/issues/14002"&gt;ocaml/ocaml#14002&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13982"&gt;ocaml/ocaml#13982&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14010" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Low-level bug fixing&lt;/strong&gt;&lt;/a&gt; particularly targeting platform-specific issues and memory safety concerns (&lt;a href="https://github.com/ocaml/ocaml/issues/14010"&gt;ocaml/ocaml#14010&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Version bump to OCaml 5.5.0 with parser refactoring, CI improvements, and documentation enhancements in ocaml/ocaml</summary><published>2025-05-04T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-17</id><title>Week 17, 2025: OCaml development focused on type system improvements, module system refinements, and 5.4 branch creation</title><updated>2025-04-27T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Type approximation refactoring&lt;/strong&gt; improves error message locations and fixes recursive function typing with first-class modules by &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/commit/c681cd75440c3403ef442c6f9cf0c4c52d85af8a"&gt;ocaml/ocaml@c681cd7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Internal flag renaming&lt;/strong&gt; from &lt;code&gt;transparent_modules&lt;/code&gt; to &lt;code&gt;no_alias_deps&lt;/code&gt; for clarity by &lt;a href="https://github.com/clementblaudeau"&gt;ClÃ©ment Blaudeau&lt;/a&gt; in preparation for transparent ascription in &lt;a href="https://github.com/ocaml/ocaml/commit/abac665c8549bad37c10d33ffdf3c98e5d400c8b"&gt;ocaml/ocaml@abac665&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13995" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Option.blend function&lt;/strong&gt;&lt;/a&gt; added to standard library by &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/13995"&gt;ocaml/ocaml#13995&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Core development activity&lt;/strong&gt; concentrated entirely in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with no activity in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; during this week&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Major milestone&lt;/strong&gt; achieved with 5.4 development branch creation and version management updates&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Type system improvements&lt;/strong&gt; delivered through recursive function typing fixes and error location enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Module system preparation&lt;/strong&gt; advanced through internal flag renaming and transparent ascription groundwork&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Seven active contributors&lt;/strong&gt; working on typing improvements, documentation, build system reliability, and development infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13985" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module system refinements&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/clementblaudeau"&gt;ClÃ©ment Blaudeau&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/13985"&gt;ocaml/ocaml#13985&lt;/a&gt; where recursive modules are incorrectly stored as functor parameters in typing environment, with &lt;a href="https://github.com/garrigue"&gt;Jacques Garrigue&lt;/a&gt; noting only error message needs fixing&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13992" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Manual reorganization&lt;/strong&gt;&lt;/a&gt; proposed by &lt;a href="https://github.com/NicholasLYang"&gt;Nicholas Yang&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/13992"&gt;ocaml/ocaml#13992&lt;/a&gt; to create dedicated warnings section, with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; suggesting broader manual restructuring&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13993" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Build system dependencies&lt;/strong&gt;&lt;/a&gt; analyzed by &lt;a href="https://github.com/lthls"&gt;Vincent Laviron&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/13993"&gt;ocaml/ocaml#13993&lt;/a&gt; explaining incremental rebuild challenges and dependency cycle complexities between compiler and stdlib&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Type system evolution&lt;/strong&gt; continues with recursive function typing improvements and enhanced error location reporting for better developer experience&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Module system advancement&lt;/strong&gt; progressing through transparent ascription preparation and internal naming clarification for future features&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Documentation quality focus&lt;/strong&gt; evident through manual improvements, external types documentation, and warning section reorganization proposals&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Development process maturity&lt;/strong&gt; demonstrated by organized 5.4 branch creation, systematic version management, and proactive build system issue investigation&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>OCaml development focused on type system improvements, module system refinements, and 5.4 branch creation</summary><published>2025-04-27T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-16</id><title>Week 16, 2025: Major GC improvements and transparent ascription RFC approval advanced OCaml's performance and module system capabilities</title><updated>2025-04-20T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13300" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;New GC ramp-up API&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;Gc.ramp_up&lt;/code&gt; to mark memory consumption phases and avoid GC overwork during allocation-heavy periods, addressing performance regressions in OCaml 5 relative to OCaml 4 (&lt;a href="https://github.com/ocaml/ocaml/issues/13300"&gt;ocaml/ocaml#13300&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13861"&gt;ocaml/ocaml#13861&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13843" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Enhanced signal handling&lt;/strong&gt;&lt;/a&gt; with new &lt;code&gt;signal&lt;/code&gt; type alias, &lt;code&gt;signal_to_string&lt;/code&gt; for converting OCaml signals to POSIX names, &lt;code&gt;signal_of_int&lt;/code&gt;/&lt;code&gt;signal_to_int&lt;/code&gt; for platform conversion, and new signal definitions &lt;code&gt;sigio&lt;/code&gt; and &lt;code&gt;sigwinch&lt;/code&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13843"&gt;ocaml/ocaml#13843&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13957" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Effect attribute support&lt;/strong&gt;&lt;/a&gt; by allowing &lt;code&gt;effect&lt;/code&gt; as a valid attribute identifier, fixing syntax error regression in OCaml 5.3 (&lt;a href="https://github.com/ocaml/ocaml/issues/13957"&gt;ocaml/ocaml#13957&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;C compilation fix&lt;/strong&gt; passing &lt;code&gt;-fPIC&lt;/code&gt; flag when compiling C files with &lt;code&gt;ocamlopt&lt;/code&gt;, addressing regression in OCaml 5.3 (&lt;a href="https://github.com/ocaml/ocaml/commit/e74c6cac3e1191ce2f0394ed3f3ffcc099d77f4c"&gt;ocaml/ocaml commit e74c6cac&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13854" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Parser improvements&lt;/strong&gt;&lt;/a&gt; with better &lt;code&gt;loc_ghost&lt;/code&gt; handling for &lt;code&gt;keyword%extension&lt;/code&gt; syntax and nested recursive value definition bug fixes (&lt;a href="https://github.com/ocaml/ocaml/issues/13854"&gt;ocaml/ocaml#13854&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13931"&gt;ocaml/ocaml#13931&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13751" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Profiling documentation&lt;/strong&gt;&lt;/a&gt; added comprehensive guide for using Linux perf with frame pointers (&lt;a href="https://github.com/ocaml/ocaml/issues/13751"&gt;ocaml/ocaml#13751&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Active implementation and design&lt;/strong&gt; phase with the core OCaml compiler receiving performance improvements and bug fixes while the RFC process advanced a major module system enhancement&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance focus&lt;/strong&gt; particularly on GC optimization for OCaml 5 to address allocation-heavy workload regressions compared to OCaml 4&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer tooling expansion&lt;/strong&gt; through enhanced debugger support, signal handling improvements, and better testing infrastructure&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Expert collaboration&lt;/strong&gt; on both implementation work in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; and design consensus in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; involving core OCaml team members&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Transparent ascription coordination&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/clementblaudeau"&gt;ClÃ©ment Blaudeau&lt;/a&gt;'s RFC work in &lt;a href="https://github.com/ocaml/RFCs/pull/54"&gt;ocaml/RFCs#54&lt;/a&gt; and his reported module type subtyping crash in &lt;a href="https://github.com/ocaml/ocaml/issues/13976"&gt;ocaml/ocaml#13976&lt;/a&gt;, directly relating to transparent signature implementation challenges&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Expert review alignment&lt;/strong&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; providing technical guidance on both RFC design and compiler implementation aspects across repositories&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Implementation readiness&lt;/strong&gt; achieved through &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; and &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt;'s approval in the RFC process, setting stage for prototype development in the main compiler&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Code review comment management&lt;/strong&gt; discussion by &lt;a href="https://github.com/mbarbin"&gt;Mathieu Barbin&lt;/a&gt; about &lt;code&gt;crs&lt;/code&gt; tool for managing embedded CR comments, revealing 10 outstanding CRs and 157 total review comments across the codebase (&lt;a href="https://github.com/ocaml/ocaml/discussions/13960"&gt;ocaml/ocaml#13960&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module system syntax debate&lt;/strong&gt;&lt;/a&gt; on transparent ascription notation with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; suggesting syntax improvements and noting potential conflicts with implicit resolution features (&lt;a href="https://github.com/ocaml/RFCs/pull/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Static vs dynamic alias distinction&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/diremy"&gt;Didier Remy&lt;/a&gt; advocating for explicit user choice rather than implicit inference (&lt;a href="https://github.com/ocaml/RFCs/pull/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Implementation readiness assessment&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt; confirming minor feedback can be addressed post-prototype and &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; providing final approval (&lt;a href="https://github.com/ocaml/RFCs/pull/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Performance-focused development&lt;/strong&gt; with GC improvements targeting OCaml 5 performance parity with OCaml 4, particularly for allocation-heavy workloads like Coq/Rocq&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Enhanced developer experience&lt;/strong&gt; through expanded debugger support, better testing infrastructure, and improved error reporting across the toolchain&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Typing system maturation&lt;/strong&gt; with ongoing work on polymorphic parameters, module transparency, and recursive type handling improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Collaborative design process&lt;/strong&gt; demonstrated by the transparent ascription RFC achieving expert consensus and moving to implementation phase with clear coordination between design and development work&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major GC improvements and transparent ascription RFC approval advanced OCaml's performance and module system capabilities</summary><published>2025-04-20T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-15</id><title>Week 15, 2025: Module system redesign RFC discussions alongside runtime improvements and type system enhancements in the core compiler</title><updated>2025-04-13T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;List.sort_uniq behavior change&lt;/strong&gt; to keep first occurrences of duplicates instead of arbitrary ones, improving consistency with expectations (&lt;a href="https://github.com/ocaml/ocaml/commit/b444a23ffd64f3ebab9f83d66d1252ca2184f143"&gt;ocaml/ocaml b444a23&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Lazy value compilation fixes&lt;/strong&gt; for recursive values involving already-evaluated lazy values, preventing concurrency issues (&lt;a href="https://github.com/ocaml/ocaml/commit/06e29c039dceb172249e773534ed3123bfc53cca"&gt;ocaml/ocaml 06e29c0&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/f3ead54439c8043a95248ff1d09ff0c0cef6d648"&gt;ocaml/ocaml f3ead54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Typeopt improvements&lt;/strong&gt; for handling deeply nested unboxed types that previously caused issues (&lt;a href="https://github.com/ocaml/ocaml/commit/3717bf5ff373fef98902c447808f586503a00a14"&gt;ocaml/ocaml 3717bf5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime domain management&lt;/strong&gt; enhancements with better documentation and correctness checks for &lt;code&gt;caml_domain_alone()&lt;/code&gt; (&lt;a href="https://github.com/ocaml/ocaml/commit/44bd8e000f18ec0ddf8543c64c62ed3f61dc16c1"&gt;ocaml/ocaml 44bd8e0&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Debugger printer sharing&lt;/strong&gt; with toplevel through refactored Topprinters module (&lt;a href="https://github.com/ocaml/ocaml/commit/985d3e5ac08cefa8e9089d26dfa582f8da1a9b2d"&gt;ocaml/ocaml 985d3e5&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Core compiler development&lt;/strong&gt; progressed with runtime stability improvements, standard library enhancements, and advanced type system feature implementations across &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Language design discussions&lt;/strong&gt; intensified with a comprehensive RFC proposal for module system redesign receiving detailed expert review in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-repository coordination&lt;/strong&gt; evident through shared core team expertise with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt;, and &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; contributing across both implementation and design work&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Type system advancement&lt;/strong&gt; focus seen in both runtime compiler improvements and fundamental language feature proposals, indicating coordinated efforts to enhance OCaml's capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module system expertise coordination&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; leading runtime improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; while providing detailed technical review for module aliasing redesign in &lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/13275" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system consistency&lt;/strong&gt;&lt;/a&gt; maintained through shared design principles between ongoing modular explicits implementation (&lt;a href="https://github.com/ocaml/ocaml/pull/13275"&gt;ocaml/ocaml#13275&lt;/a&gt;) and proposed transparent ascription changes (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Core team review process&lt;/strong&gt; demonstrated with &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt; and &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; contributing module system expertise to RFC discussions while active in compiler development&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Implementation strategy alignment&lt;/strong&gt; between advanced language features in development and fundamental module system redesign proposals, ensuring coherent language evolution&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module aliasing redesign&lt;/strong&gt;&lt;/a&gt; sparked detailed technical discussion between &lt;a href="https://github.com/clementblaudeau"&gt;ClÃ©ment Blaudeau&lt;/a&gt;, &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;, &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt;, and &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; covering backward compatibility strategies, syntax design decisions, and interaction with existing Dune-generated code (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Transparent ascription implementation&lt;/strong&gt;&lt;/a&gt; discussion examining signature avoidance mechanisms, edge cases in type equality preservation, and comparisons to Haskell-style syntax options (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Dynamic vs static alias subtyping&lt;/strong&gt;&lt;/a&gt; technical debate clarifying the proposed subtyping relationships and their implications for module system type checking (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Module system evolution&lt;/strong&gt;&lt;/a&gt; continues with focus on fundamental improvements to aliasing mechanisms and transparent ascription, building on years of research and practical experience (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/13275" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Advanced type system features&lt;/strong&gt;&lt;/a&gt; gaining momentum with polymorphic parameters and modular explicits showing active development (&lt;a href="https://github.com/ocaml/ocaml/pull/13275"&gt;ocaml/ocaml#13275&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/pull/13806"&gt;ocaml/ocaml#13806&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime correctness improvements&lt;/strong&gt; with increased attention to domain management and lazy value compilation edge cases, ensuring stability for concurrent programming (&lt;a href="https://github.com/ocaml/ocaml/commit/44bd8e000f18ec0ddf8543c64c62ed3f61dc16c1"&gt;ocaml/ocaml 44bd8e0&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/54" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Backward compatibility prioritization&lt;/strong&gt;&lt;/a&gt; emphasized throughout discussions with careful consideration of existing Dune codebases and manual mapping files used by large projects (&lt;a href="https://github.com/ocaml/RFCs/issues/54"&gt;ocaml/RFCs#54&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Tool integration enhancements&lt;/strong&gt; through shared components between debugger and toplevel systems, improving developer experience (&lt;a href="https://github.com/ocaml/ocaml/commit/985d3e5ac08cefa8e9089d26dfa582f8da1a9b2d"&gt;ocaml/ocaml 985d3e5&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Module system redesign RFC discussions alongside runtime improvements and type system enhancements in the core compiler</summary><published>2025-04-13T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-14</id><title>Week 14, 2025: Major standard library enhancements in ocaml/ocaml with Result module improvements and concurrent RFC discussion on implicit source positions API design.</title><updated>2025-04-06T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13720" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Result module enhancements&lt;/strong&gt;&lt;/a&gt; with new convenience functions &lt;code&gt;get_ok'&lt;/code&gt; and &lt;code&gt;error_to_failure&lt;/code&gt; for error handling, plus &lt;code&gt;Result.product&lt;/code&gt; for combining results and &lt;code&gt;Result.Syntax&lt;/code&gt; module with binding operators (&lt;a href="https://github.com/ocaml/ocaml/issues/13720"&gt;ocaml/ocaml#13720&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13696"&gt;ocaml/ocaml#13696&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13932" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;List and Seq singleton functions&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;List.singleton&lt;/code&gt; and &lt;code&gt;Seq.singleton&lt;/code&gt; for creating single-element collections (&lt;a href="https://github.com/ocaml/ocaml/issues/13932"&gt;ocaml/ocaml#13932&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13362" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance improvement&lt;/strong&gt;&lt;/a&gt; for &lt;code&gt;Floatarray.concat&lt;/code&gt; with native C implementation &lt;code&gt;caml_floatarray_concat&lt;/code&gt; matching Array.concat behavior (&lt;a href="https://github.com/ocaml/ocaml/issues/13362"&gt;ocaml/ocaml#13362&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13643" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Minor GC optimization&lt;/strong&gt;&lt;/a&gt; allowing values reachable from ephemeron keys to be collected by minor garbage collector (&lt;a href="https://github.com/ocaml/ocaml/issues/13643"&gt;ocaml/ocaml#13643&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/12452" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Comprehensive Fun module documentation&lt;/strong&gt;&lt;/a&gt; with practical examples for all combinators including id, const, flip, negate, and compose functions (&lt;a href="https://github.com/ocaml/ocaml/issues/12452"&gt;ocaml/ocaml#12452&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13720" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Standard library modernization&lt;/strong&gt;&lt;/a&gt; led implementation focus with &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; contributing Result module enhancements and &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; adding singleton convenience functions (&lt;a href="https://github.com/ocaml/ocaml/issues/13720"&gt;ocaml/ocaml#13720&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13932"&gt;ocaml/ocaml#13932&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13362" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime performance improvements&lt;/strong&gt;&lt;/a&gt; continued with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt;'s floatarray optimizations and &lt;a href="https://github.com/stedolan"&gt;Stephen Dolan&lt;/a&gt;'s garbage collection enhancements (&lt;a href="https://github.com/ocaml/ocaml/issues/13362"&gt;ocaml/ocaml#13362&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13643"&gt;ocaml/ocaml#13643&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language feature discussions&lt;/strong&gt;&lt;/a&gt; progressed in RFCs with &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt;'s implicit source positions proposal receiving detailed technical feedback from industry and academic contributors (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/12452" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation quality improvements&lt;/strong&gt;&lt;/a&gt; emphasized with &lt;a href="https://github.com/hyphenrf"&gt;Haz&lt;/a&gt; providing comprehensive Fun module examples and &lt;a href="https://github.com/v-gb"&gt;@v-gb&lt;/a&gt; enhancing alert documentation (&lt;a href="https://github.com/ocaml/ocaml/issues/12452"&gt;ocaml/ocaml#12452&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13924"&gt;ocaml/ocaml#13924&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13362" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Shared contributors&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; and &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; active in both &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; implementation work and &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; design discussions (&lt;a href="https://github.com/ocaml/ocaml/issues/13362"&gt;ocaml/ocaml#13362&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Design consistency&lt;/strong&gt;&lt;/a&gt; discussions in RFC repository informing standard library API decisions, with performance considerations from industrial users like Jane Street influencing language feature design (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Implementation feedback loop&lt;/strong&gt;&lt;/a&gt; where real-world usage data from Jane Street's codebase (5,827 occurrences) provided concrete requirements for the implicit source positions RFC (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13720" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Result API design&lt;/strong&gt;&lt;/a&gt; discussions around naming and functionality of new convenience functions like &lt;code&gt;get_ok'&lt;/code&gt; vs alternatives, with community feedback on ergonomics and consistency in the standard library (&lt;a href="https://github.com/ocaml/ocaml/issues/13720"&gt;ocaml/ocaml#13720&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Implicit source positions RFC&lt;/strong&gt;&lt;/a&gt; featuring detailed technical debate between &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; advocating for single abstract type vs &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; supporting multiple concrete types to accommodate different performance needs (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance measurement requirements&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; requesting concrete data rather than theoretical analysis for language feature proposals, and &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; providing Jane Street usage statistics (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;GADT-based solution&lt;/strong&gt;&lt;/a&gt; proposed by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; to support multiple position types while maintaining type safety, though &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; expressed concerns about design complexity (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Industry-academia collaboration&lt;/strong&gt;&lt;/a&gt; with Jane Street providing real-world implementation experience and usage data to inform RFC design decisions, bridging practical needs with theoretical considerations (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance-driven design&lt;/strong&gt;&lt;/a&gt; approach gaining prominence with concrete measurement requests rather than theoretical analysis for both language features and standard library improvements (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13362"&gt;ocaml/ocaml#13362&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13720" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Standard library ergonomics&lt;/strong&gt;&lt;/a&gt; focus with multiple contributors adding convenience functions and improving API consistency across modules like Result, List, and Seq (&lt;a href="https://github.com/ocaml/ocaml/issues/13720"&gt;ocaml/ocaml#13720&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13932"&gt;ocaml/ocaml#13932&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/12452" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation-first approach&lt;/strong&gt;&lt;/a&gt; with comprehensive example additions showing real-world usage patterns rather than just API descriptions, improving developer experience (&lt;a href="https://github.com/ocaml/ocaml/issues/12452"&gt;ocaml/ocaml#12452&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13815" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Cross-platform compatibility&lt;/strong&gt;&lt;/a&gt; emphasis with Windows build system improvements and test hardening ensuring OCaml works reliably across different development environments (&lt;a href="https://github.com/ocaml/ocaml/issues/13815"&gt;ocaml/ocaml#13815&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major standard library enhancements in ocaml/ocaml with Result module improvements and concurrent RFC discussion on implicit source positions API design.</summary><published>2025-04-06T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-13</id><title>Week 13, 2025: Core group activity focused on documentation improvements and new RFC for relocatable OCaml with multiple merged PRs</title><updated>2025-03-30T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13908" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Array comparison documentation&lt;/strong&gt;&lt;/a&gt; clarified to specify shortlex ordering behavior in &lt;code&gt;Array.compare&lt;/code&gt;, &lt;code&gt;ArrayLabels.compare&lt;/code&gt;, &lt;code&gt;Dynarray.compare&lt;/code&gt;, and &lt;code&gt;Float.Array.compare&lt;/code&gt; functions (&lt;a href="https://github.com/ocaml/ocaml/issues/13908"&gt;ocaml/ocaml#13908&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13912" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Manual improvements&lt;/strong&gt;&lt;/a&gt; with corrected Fibonacci number definition in parallelism tutorial examples (&lt;a href="https://github.com/ocaml/ocaml/issues/13912"&gt;ocaml/ocaml#13912&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13828" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Build reproducibility&lt;/strong&gt;&lt;/a&gt; enhancement with &lt;code&gt;BUILD_PATH_PREFIX_MAP&lt;/code&gt; applied to &lt;code&gt;Sys.argv.(0)&lt;/code&gt; in cmt files (&lt;a href="https://github.com/ocaml/ocaml/issues/13828"&gt;ocaml/ocaml#13828&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13895" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;C++ compatibility&lt;/strong&gt;&lt;/a&gt; improvements in runtime headers by fixing &lt;code&gt;_Atomic&lt;/code&gt; incompatibility issues (&lt;a href="https://github.com/ocaml/ocaml/issues/13895"&gt;ocaml/ocaml#13895&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13906" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Test infrastructure&lt;/strong&gt;&lt;/a&gt; improvements with proper multicore requirement marking for parallel tests (&lt;a href="https://github.com/ocaml/ocaml/issues/13906"&gt;ocaml/ocaml#13906&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13882" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Closure compiler&lt;/strong&gt;&lt;/a&gt; enhancements enforcing evaluation order for generic applications (&lt;a href="https://github.com/ocaml/ocaml/issues/13882"&gt;ocaml/ocaml#13882&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13884" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Shape indexing&lt;/strong&gt;&lt;/a&gt; improvements for modules in constructor paths with corrected approximation (&lt;a href="https://github.com/ocaml/ocaml/issues/13884"&gt;ocaml/ocaml#13884&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13904" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type checker&lt;/strong&gt;&lt;/a&gt; regression fix for unused-type-declaration warning (&lt;a href="https://github.com/ocaml/ocaml/issues/13904"&gt;ocaml/ocaml#13904&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13910" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Manual formatting&lt;/strong&gt;&lt;/a&gt; correction removing quotes around &lt;code&gt;\var{...}&lt;/code&gt; in interface documentation (&lt;a href="https://github.com/ocaml/ocaml/issues/13910"&gt;ocaml/ocaml#13910&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13857" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;GitHub Actions&lt;/strong&gt;&lt;/a&gt; improvements for Cygwin builds with proper configuration handling (&lt;a href="https://github.com/ocaml/ocaml/issues/13857"&gt;ocaml/ocaml#13857&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; repository saw multiple merged PRs focused on documentation accuracy, build system improvements, and infrastructure enhancements alongside new signature constraint refactoring PR&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; repository featured single new RFC proposal for Relocatable OCaml feature receiving dev meeting approval and transitioning to review stage&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-repository coordination&lt;/strong&gt; demonstrated through RFC development directly supporting core OCaml compiler implementation improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Documentation emphasis&lt;/strong&gt; evident across both repositories with manual corrections, API clarity improvements, and comprehensive RFC documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/53" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;RFC to implementation pathway&lt;/strong&gt;&lt;/a&gt; demonstrated with Relocatable OCaml RFC in &lt;a href="https://github.com/ocaml/RFCs/issues/53"&gt;ocaml/RFCs#53&lt;/a&gt; directly supporting compiler flexibility improvements that will benefit &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; build system and deployment scenarios&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Documentation coordination&lt;/strong&gt; between RFC specification clarity praised by &lt;a href="https://github.com/shindere"&gt;SÃ©bastien Hinderer&lt;/a&gt; and corresponding documentation improvements merged in main repository&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Dev meeting integration&lt;/strong&gt; with &lt;a href="https://github.com/nojb"&gt;NicolÃ¡s Ojeda BÃ¤r&lt;/a&gt; facilitating RFC approval process that will guide future &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; implementation work&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Newcomer contribution guidance&lt;/strong&gt; discussion initiated by &lt;a href="https://github.com/gperdutoutmoncodetipe"&gt;@gperdutoutmoncodetipe&lt;/a&gt; seeking approachable issues for open source beginners (&lt;a href="https://github.com/ocaml/ocaml/discussions/13901"&gt;ocaml/ocaml#13901&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Syntax error improvements&lt;/strong&gt; continued advocacy by &lt;a href="https://github.com/DemiMarie"&gt;Demi Marie Obenour&lt;/a&gt; for adding Menhir &lt;code&gt;.messages&lt;/code&gt; file to provide better syntax error messages (&lt;a href="https://github.com/ocaml/ocaml/discussions/11957"&gt;ocaml/ocaml#11957&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13896" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;OCamldoc rendering regression&lt;/strong&gt;&lt;/a&gt; investigation by &lt;a href="https://github.com/johnwhitington"&gt;John Whitington&lt;/a&gt; comparing OCaml 5 vs OCaml 4 behavior with detailed examples (&lt;a href="https://github.com/ocaml/ocaml/issues/13896"&gt;ocaml/ocaml#13896&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13871" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;PDF manual typography&lt;/strong&gt;&lt;/a&gt; enhancement discussion initiated by &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; gathering community feedback on font improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/13871"&gt;ocaml/ocaml#13871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/53" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;RFC quality appreciation&lt;/strong&gt;&lt;/a&gt; expressed by &lt;a href="https://github.com/shindere"&gt;SÃ©bastien Hinderer&lt;/a&gt; for clear documentation despite complex implementation details (&lt;a href="https://github.com/ocaml/RFCs/issues/53"&gt;ocaml/RFCs#53&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Documentation accuracy prioritization&lt;/strong&gt; evident through multiple manual corrections, API documentation improvements, and comprehensive RFC writing standards&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Build system robustness focus&lt;/strong&gt; targeting cross-platform compatibility with Cygwin improvements, reproducible builds, and relocatable installation capabilities&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Test infrastructure modernization&lt;/strong&gt; with proper multicore test categorization and CI system enhancements for better development workflow&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Community engagement facilitation&lt;/strong&gt; through newcomer guidance discussions and structured RFC review processes encouraging broader participation&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Core group activity focused on documentation improvements and new RFC for relocatable OCaml with multiple merged PRs</summary><published>2025-03-30T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-12</id><title>Week 12, 2025: Major merges in ocaml/ocaml include standard library additions and lazy optimizations, while ocaml/RFCs continues RFC design discussion</title><updated>2025-03-23T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;New &lt;a href="https://github.com/ocaml/ocaml/issues/13885" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Dynarray.exists2&lt;/strong&gt;&lt;/a&gt; and &lt;strong class="achievement"&gt;Dynarray.for_all2&lt;/strong&gt; functions for two-argument predicates by &lt;a href="https://github.com/hirrolot"&gt;@hirrolot&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13885"&gt;ocaml/ocaml#13885&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Dedicated &lt;a href="https://github.com/ocaml/ocaml/issues/13867" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;primitive for Lazy blocks&lt;/strong&gt;&lt;/a&gt; improving runtime performance by using specialized Lazy&lt;em&gt;tag and Forward&lt;/em&gt;tag (&lt;a href="https://github.com/ocaml/ocaml/issues/13867"&gt;ocaml/ocaml#13867&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;OCamldoc LaTeX underscore escaping option&lt;/strong&gt; &lt;code&gt;-latex-escape-underscore&lt;/code&gt; for better reference formatting (&lt;a href="https://github.com/ocaml/ocaml/commit/5a4813dcaab1e8ab97dc50dbc426cecf5c664236"&gt;5a4813dcaab1e8ab97dc50dbc426cecf5c664236&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13878" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;CMM mutable variable tracking&lt;/strong&gt;&lt;/a&gt; with new Cvar_mut construct for improved code generation by &lt;a href="https://github.com/lthls"&gt;Vincent Laviron&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13878"&gt;ocaml/ocaml#13878&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13880" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Object stat counters made atomic&lt;/strong&gt;&lt;/a&gt; for better thread safety (&lt;a href="https://github.com/ocaml/ocaml/issues/13880"&gt;ocaml/ocaml#13880&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13865" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Error message improvements&lt;/strong&gt;&lt;/a&gt; with specialized messages for non-functors (&lt;a href="https://github.com/ocaml/ocaml/issues/13865"&gt;ocaml/ocaml#13865&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13864" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Float.Array.fill optimization&lt;/strong&gt;&lt;/a&gt; for better performance by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13864"&gt;ocaml/ocaml#13864&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;ocaml/ocaml repository&lt;/strong&gt; delivered significant standard library additions, runtime optimizations, and compiler improvements with 7 major features merged and 2 substantial PRs opened for relocatable compiler support&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;ocaml/RFCs repository&lt;/strong&gt; maintained focused technical discussion on implicit source positions RFC with 4 contributors debating location representation and API design&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-repository contributor activity&lt;/strong&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; contributing Float.Array.fill optimization in ocaml/ocaml and participating in location abstraction discussions in ocaml/RFCs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; active across both repositories&lt;/strong&gt; optimizing Float.Array.fill performance in ocaml/ocaml (&lt;a href="https://github.com/ocaml/ocaml/issues/13864"&gt;ocaml/ocaml#13864&lt;/a&gt;) while contributing API design proposals for text location abstraction in ocaml/RFCs (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Location handling improvements&lt;/strong&gt;&lt;/a&gt; emerging as theme with OCamldoc underscore escaping in ocaml/ocaml and detailed location representation discussion in ocaml/RFCs (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance optimization focus&lt;/strong&gt; spanning both repositories with lazy block primitives and Float.Array.fill in ocaml/ocaml complementing performance discussions in source positions RFC&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;OCaml 5 GC performance&lt;/strong&gt;&lt;/a&gt; report by &lt;a href="https://github.com/nmote"&gt;Nat Mote&lt;/a&gt; documenting tuning requirements for Semgrep achieving parity with OCaml 4, requiring space_overhead=40 setting (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13871" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;PDF manual typography&lt;/strong&gt;&lt;/a&gt; improvements proposed by &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; with sample fonts including Palladio, Schoolbook, and Utopia for better document appearance (&lt;a href="https://github.com/ocaml/ocaml/issues/13871"&gt;ocaml/ocaml#13871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Location representation format&lt;/strong&gt;&lt;/a&gt; debate between point locations versus span locations in implicit source positions RFC, with &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; advocating for location spans and &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; supporting abstraction through accessor functions (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Binary size concerns&lt;/strong&gt;&lt;/a&gt; raised by contributors regarding memory footprint of location information, with &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; proposing variable byte encoding techniques and two-level compact representation approach (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime performance optimization&lt;/strong&gt; acceleration with lazy block primitives, atomic object counters, and Float.Array.fill improvements targeting execution efficiency across ocaml/ocaml&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Type system modernization&lt;/strong&gt; through package type refactoring and improved error messages with specialized non-functor handling in ocaml/ocaml&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer tooling enhancement&lt;/strong&gt; including OCamldoc LaTeX options, shape printer improvements, and comprehensive testing infrastructure updates in ocaml/ocaml&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Technical RFC discussion maturation&lt;/strong&gt; with detailed API design debates and performance consideration in ocaml/RFCs implicit source positions proposal&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major merges in ocaml/ocaml include standard library additions and lazy optimizations, while ocaml/RFCs continues RFC design discussion</summary><published>2025-03-23T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-11</id><title>Week 11, 2025: Major variance debugging features merged while performance regressions sparked discussions and RFC design debates continued</title><updated>2025-03-16T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;New &lt;code&gt;-i-variance&lt;/code&gt; command-line flag&lt;/strong&gt; allows developers to print inferred variances for all types in their programs, useful for debugging and learning about type variance (&lt;a href="https://github.com/ocaml/ocaml/issues/13820"&gt;ocaml/ocaml#13820&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13820" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Bivariance syntax support&lt;/strong&gt;&lt;/a&gt; with new &lt;code&gt;+-&lt;/code&gt; notation for bivariant type parameters (e.g., &lt;code&gt;type +-'a t = A&lt;/code&gt;), including parser and pretty-printer updates (&lt;a href="https://github.com/ocaml/ocaml/issues/13820"&gt;ocaml/ocaml#13820&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13848" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Enhanced shape indexing&lt;/strong&gt;&lt;/a&gt; for all path components improving editor support and IDE integration (&lt;a href="https://github.com/ocaml/ocaml/issues/13848"&gt;ocaml/ocaml#13848&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Float.Array performance optimizations&lt;/strong&gt; with &lt;code&gt;@@noalloc&lt;/code&gt; and &lt;code&gt;@inline&lt;/code&gt; attributes added to &lt;code&gt;Float.Array.fill&lt;/code&gt; for better unboxing opportunities (&lt;a href="https://github.com/ocaml/ocaml/commit/657a50ff726f8958ccda79a4ef2ed6a476228f97"&gt;657a50f&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13820" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Core language development&lt;/strong&gt;&lt;/a&gt; focused on variance debugging tools with &lt;a href="https://github.com/t6s"&gt;Takafumi Saikawa&lt;/a&gt; and &lt;a href="https://github.com/garrigue"&gt;Jacques Garrigue&lt;/a&gt; delivering comprehensive variance analysis features (&lt;a href="https://github.com/ocaml/ocaml/issues/13820"&gt;ocaml/ocaml#13820&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance regression investigations&lt;/strong&gt;&lt;/a&gt; initiated by &lt;a href="https://github.com/nmote"&gt;Nat Mote&lt;/a&gt; from Semgrep and &lt;a href="https://github.com/strub"&gt;Pierre-Yves Strub&lt;/a&gt; from EasyCrypt reporting significant OCaml 5 slowdowns (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13849"&gt;ocaml/ocaml#13849&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;RFC design process&lt;/strong&gt;&lt;/a&gt; advancing with detailed technical discussions on implicit source positions feature led by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; and &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13871" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation and tooling improvements&lt;/strong&gt;&lt;/a&gt; including PDF manual typography enhancements and standard library expansions (&lt;a href="https://github.com/ocaml/ocaml/issues/13871"&gt;ocaml/ocaml#13871&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13820" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language feature coordination&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; implementation work and &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; design discussions, with variance debugging features merged while source position RFC continues detailed design work (&lt;a href="https://github.com/ocaml/ocaml/issues/13820"&gt;ocaml/ocaml#13820&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance-focused development&lt;/strong&gt;&lt;/a&gt; with runtime optimizations in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; addressing concerns that could inform future RFC performance considerations (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Jane Street experience integration&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; bringing practical implementation insights from production usage to RFC design decisions (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13871" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;PDF manual typography enhancement&lt;/strong&gt;&lt;/a&gt; discussion initiated by &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; presenting three font options (Palladio, Schoolbook, Utopia) for improving the manual's visual appeal, with &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; providing readability feedback favoring Schoolbook (&lt;a href="https://github.com/ocaml/ocaml/issues/13871"&gt;ocaml/ocaml#13871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Data type debate&lt;/strong&gt;&lt;/a&gt; between positions versus locations involving &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; advocating for &lt;code&gt;[%call_loc]&lt;/code&gt; with full span information and &lt;a href="https://github.com/TyOverby"&gt;Ty Overby&lt;/a&gt; defending single position approach for performance concerns (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Implementation trade-offs&lt;/strong&gt;&lt;/a&gt; discussion covering memory footprint, runtime allocation behavior, and conversion costs between different position representations led by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; and &lt;a href="https://github.com/c-cube"&gt;Simon Cruanes&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13868" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;OCaml 5 performance tuning&lt;/strong&gt;&lt;/a&gt; emerging as a key concern with multiple real-world applications reporting significant regressions requiring manual GC configuration adjustments (&lt;a href="https://github.com/ocaml/ocaml/issues/13868"&gt;ocaml/ocaml#13868&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13849"&gt;ocaml/ocaml#13849&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Industry-informed language design&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; leveraging Jane Street's months of practical usage experience to guide RFC design decisions and syntax choices (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13820" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer tooling improvements&lt;/strong&gt;&lt;/a&gt; focus on variance debugging and IDE support with new command-line options and enhanced shape indexing (&lt;a href="https://github.com/ocaml/ocaml/issues/13820"&gt;ocaml/ocaml#13820&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13848"&gt;ocaml/ocaml#13848&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance-conscious feature design&lt;/strong&gt;&lt;/a&gt; with detailed consideration of binary size impacts for JavaScript compilation targets and runtime allocation behavior for debugging features (&lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major variance debugging features merged while performance regressions sparked discussions and RFC design debates continued</summary><published>2025-03-16T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-10</id><title>Week 10, 2025: Runtime safety improvements and RFC documentation updates with significant OCaml 5 performance investigation</title><updated>2025-03-09T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Root safety&lt;/strong&gt; improvements in &lt;code&gt;caml_register_named_value&lt;/code&gt; runtime function to prevent potential memory corruption issues (&lt;a href="https://github.com/ocaml/ocaml/commit/addec6564b1246b9d03ac33fd866aeacda5837d8"&gt;ocaml/ocaml@addec65&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enhanced &lt;strong class="achievement"&gt;error message alignment&lt;/strong&gt; utilities with improved documentation and examples for better compiler error formatting (&lt;a href="https://github.com/ocaml/ocaml/commit/40ae152f9a144711d439ac2d105d39a729a45e9f"&gt;ocaml/ocaml@40ae152&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;strong class="achievement"&gt;untypeast/pprintast&lt;/strong&gt; bug for value bindings with polymorphic type annotations improving AST printing accuracy (&lt;a href="https://github.com/ocaml/ocaml/commit/5a4e4bb99bf4622120be76b52acc56d19b542c85"&gt;ocaml/ocaml@5a4e4bb&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/e4e6980a3edae9d6a7be5b8337f12266f04095dd"&gt;ocaml/ocaml@e4e6980&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &lt;strong class="achievement"&gt;dune support placeholder&lt;/strong&gt; for iarray type with new predef types file supporting future immutable array functionality (&lt;a href="https://github.com/ocaml/ocaml/commit/41ace2f0cf3a0509a026db3ab79bf6b2da630837"&gt;ocaml/ocaml@41ace2f&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Location documentation&lt;/strong&gt; clarifications for ghost locations in the compiler's location tracking system (&lt;a href="https://github.com/ocaml/ocaml/commit/22f4766026883b0f703c857b4dc89c6c81958591"&gt;ocaml/ocaml@22f4766&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Manual improvements including &lt;strong class="achievement"&gt;C macro documentation&lt;/strong&gt; and integer handling clarifications (&lt;a href="https://github.com/ocaml/ocaml/commit/b62ae360775e58128b785c729f2530822d733376"&gt;ocaml/ocaml@b62ae36&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/7d897be326657de6a49bf5b5e37e956d5c1523dd"&gt;ocaml/ocaml@7d897be&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;The core OCaml repositories focused on runtime safety improvements and language design refinement during week 10&lt;/li&gt;
&lt;li&gt;Main repository &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; delivered critical runtime safety fixes and compiler tooling enhancements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; repository saw continued documentation improvements for the include functor proposal&lt;/li&gt;
&lt;li&gt;Significant community investigation into OCaml 5 performance regressions affecting real-world applications&lt;/li&gt;
&lt;li&gt;Cross-repository collaboration evident in &lt;a href="https://github.com/ccasin"&gt;Chris Casinghino&lt;/a&gt;'s contributions to both AST printing fixes and RFC documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ccasin"&gt;Chris Casinghino&lt;/a&gt; contributed to both repositories: implementing AST printing fixes in &lt;a href="https://github.com/ocaml/ocaml/issues/13845"&gt;ocaml/ocaml#13845&lt;/a&gt; and updating include functor RFC documentation in &lt;a href="https://github.com/ocaml/RFCs/issues/43"&gt;ocaml/RFCs#43&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Language design discussions in RFC repository informed by implementation experience from main compiler development&lt;/li&gt;
&lt;li&gt;Community feedback loop between RFC proposals and practical compiler implementation challenges&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13849" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;OCaml 5 performance regression&lt;/strong&gt;&lt;/a&gt; investigation by &lt;a href="https://github.com/strub"&gt;Pierre-Yves Strub&lt;/a&gt; revealing hash collision issues in weak tables where unused weak values don't get cleaned properly, leading to linear complexity instead of constant time in EasyCrypt project (&lt;a href="https://github.com/ocaml/ocaml/issues/13849"&gt;ocaml/ocaml#13849&lt;/a&gt;) with detailed benchmarking showing 8-minute vs exponential slowdown between OCaml 4.14 and 5.3.0&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13831" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;ThreadSanitizer test reliability&lt;/strong&gt;&lt;/a&gt; discussion by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; addressing non-deterministic error output ordering between OCaml stack traces and TSan race reports affecting test consistency across Linux and macOS platforms (&lt;a href="https://github.com/ocaml/ocaml/issues/13831"&gt;ocaml/ocaml#13831&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13825" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Signal support&lt;/strong&gt;&lt;/a&gt; feature request by &lt;a href="https://github.com/za3k"&gt;Zachary Vance&lt;/a&gt; for missing signals like SIGWINCH in the standard library enum with reference to ongoing work (&lt;a href="https://github.com/ocaml/ocaml/issues/13825"&gt;ocaml/ocaml#13825&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime safety&lt;/strong&gt; becoming a priority focus with multiple contributors working on memory management improvements and garbage collection robustness&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-platform testing&lt;/strong&gt; reliability receiving increased attention with ThreadSanitizer and CI workflow improvements addressing platform-specific issues&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance regression tracking&lt;/strong&gt; for OCaml 5 adoption showing community vigilance in identifying and analyzing real-world performance impacts&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Language design collaboration&lt;/strong&gt; between RFC proposals and implementation experience creating tighter feedback loops between theory and practice&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Runtime safety improvements and RFC documentation updates with significant OCaml 5 performance investigation</summary><published>2025-03-09T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-9</id><title>Week 9, 2025: Runtime improvements and compiler enhancements in main repository while RFC discussions advanced implicit source positions design</title><updated>2025-03-02T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime events system&lt;/strong&gt; field initialization bug fixed preventing potential crashes in &lt;a href="https://github.com/ocaml/ocaml/commit/759582d7da9a99cea90b1f5b3bd711904d1361c5"&gt;ocaml/ocaml#759582d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Thread naming warnings&lt;/strong&gt; now printed when &lt;code&gt;set_current_thread_name&lt;/code&gt; operation fails in &lt;a href="https://github.com/ocaml/ocaml/commit/759582d7da9a99cea90b1f5b3bd711904d1361c5"&gt;ocaml/ocaml#759582d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Ephemeron garbage collection&lt;/strong&gt; optimization avoids re-marking ephemerons with trivial data for improved performance in &lt;a href="https://github.com/ocaml/ocaml/commit/d608d2be2b9232bd4abbdd6c958189ac379f0eb1"&gt;ocaml/ocaml#d608d2b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Unused type declaration warning&lt;/strong&gt; added for &lt;code&gt;t as 'a&lt;/code&gt; patterns with no other occurrences of the type variable in &lt;a href="https://github.com/ocaml/ocaml/commit/f08e8a1ad48013dbdefc0e5415c2bf48a6881de8"&gt;ocaml/ocaml#f08e8a1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Aligned spellchecking hints&lt;/strong&gt; in error messages improve readability by aligning hints with misspelled identifiers in &lt;a href="https://github.com/ocaml/ocaml/commit/fc7322768ac84f69dd08453c19c11444d4b26479"&gt;ocaml/ocaml#fc73227&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Format documentation API&lt;/strong&gt; additions include &lt;code&gt;align_prefix&lt;/code&gt; and &lt;code&gt;align_prefix2&lt;/code&gt; functions for text alignment in &lt;a href="https://github.com/ocaml/ocaml/commit/f47a3584909081e5ed0b6166fb75cf0fdb68ef8d"&gt;ocaml/ocaml#f47a358&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Main repository activity&lt;/strong&gt; included runtime system improvements, compiler tooling enhancements, and error message formatting with one new draft PR on C primitive hardening&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;RFC repository focus&lt;/strong&gt; centered on community review of the implicit source positions proposal with extensive syntax and semantics discussions&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-repository collaboration&lt;/strong&gt; evident through &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; contributing to both runtime testing improvements and language design discussions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13831" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Testing reliability focus&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; spanning ThreadSanitizer test issues in &lt;a href="https://github.com/ocaml/ocaml/issues/13831"&gt;ocaml/ocaml#13831&lt;/a&gt; and RFC authorship for implicit source positions in &lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Error message improvements&lt;/strong&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; in the main repository complementing position-based debugging discussions in the RFC&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Position representation&lt;/strong&gt; discussions in RFC repository relevant to debugging and error reporting enhancements being implemented in main repository&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13831" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;ThreadSanitizer test reliability&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; regarding non-deterministic error output order between OCaml stack traces and TSan reports in &lt;a href="https://github.com/ocaml/ocaml/issues/13831"&gt;ocaml/ocaml#13831&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13825" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Signal handling enhancements&lt;/strong&gt;&lt;/a&gt; extensively discussed by &lt;a href="https://github.com/za3k"&gt;Zachary Vance&lt;/a&gt; and &lt;a href="https://github.com/tmcgilchrist"&gt;Tim McGilchrist&lt;/a&gt; covering missing POSIX signals like &lt;code&gt;SIGWINCH&lt;/code&gt;, platform compatibility, and potential API improvements in &lt;a href="https://github.com/ocaml/ocaml/issues/13825"&gt;ocaml/ocaml#13825&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Implicit source positions RFC&lt;/strong&gt;&lt;/a&gt; generated extensive community discussion about syntax alternatives, with &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; questioning position semantics and &lt;a href="https://github.com/stedolan"&gt;Stephen Dolan&lt;/a&gt; clarifying n-ary application rules in &lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Position representation debate&lt;/strong&gt;&lt;/a&gt; emerged with &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; questioning &lt;code&gt;Lexing.position&lt;/code&gt; type limitations for representing application ranges versus source points in &lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime system reliability&lt;/strong&gt; focus with bug fixes for runtime events, thread warnings, and testing improvements addressing stability concerns&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer experience enhancements&lt;/strong&gt; through improved error messages, spellchecking alignment, and new compiler warnings for better code quality&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/pull/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Syntax consistency&lt;/strong&gt;&lt;/a&gt; with existing OCaml patterns driving RFC design decisions, with community favoring approaches that align with optional argument semantics in &lt;a href="https://github.com/ocaml/RFCs/pull/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Testing infrastructure improvements&lt;/strong&gt; addressing ThreadSanitizer conflicts and parallel execution issues to support modern development practices&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Runtime improvements and compiler enhancements in main repository while RFC discussions advanced implicit source positions design</summary><published>2025-03-02T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-8</id><title>Week 8, 2025: Active week with new stdlib features, ARM64 improvements, and new RFC proposal for implicit source positions</title><updated>2025-02-23T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Format.format_text function&lt;/strong&gt; added to stdlib for text formatting with automatic break hints in &lt;a href="https://github.com/ocaml/ocaml/commit/3ca06d6e669aed7ca457d20f10fca133a38dc381"&gt;ocaml/ocaml#3ca06d6e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime&lt;em&gt;events.Timestamp.get&lt;/em&gt;current&lt;/strong&gt; function for accessing current timestamps in &lt;a href="https://github.com/ocaml/ocaml/commit/41d0c6009b27935109345f4491aae514f624bb3f"&gt;ocaml/ocaml#41d0c600&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;ARM64 unaligned memory access&lt;/strong&gt; support enabled by setting allow&lt;em&gt;unaligned&lt;/em&gt;access to true in &lt;a href="https://github.com/ocaml/ocaml/commit/7ed394b8dc3f1befdc4883f88e2ae311567409ae"&gt;ocaml/ocaml#7ed394b8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Windows CSPRNG random seeding&lt;/strong&gt; using OS cryptographically secure random number generator in &lt;a href="https://github.com/ocaml/ocaml/commit/3ca06d6e669aed7ca457d20f10fca133a38dc381"&gt;ocaml/ocaml#3ca06d6e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Enhanced spellchecker hints&lt;/strong&gt; that preserve module context ("Fun.protact" suggests "Fun.protect" instead of just "protect") in &lt;a href="https://github.com/ocaml/ocaml/commit/22ab57de9c1ce8e4e313fa26b46bf90d2f549167"&gt;ocaml/ocaml#22ab57de&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Improved module type constraints&lt;/strong&gt; with distinction between &lt;code&gt;(module M : S)&lt;/code&gt; and &lt;code&gt;(module M) : (module S)&lt;/code&gt; syntax in &lt;a href="https://github.com/ocaml/ocaml/commit/c8f318463f7127f1463fe446916a4b89e99267ab"&gt;ocaml/ocaml#c8f31846&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;OCaml compiler development&lt;/strong&gt; progressed with substantial new features including stdlib enhancements, platform optimizations, and type system improvements across &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Language design discussions&lt;/strong&gt; advanced with a new RFC proposal for implicit source positions and continued debate on include functor syntax in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Industrial validation&lt;/strong&gt;&lt;/a&gt; emerged as a key theme with Jane Street's production experience informing language feature adoption, particularly for &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-platform improvements&lt;/strong&gt; delivered through ARM64 optimizations and Windows-specific enhancements in the main compiler&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;RFC validation through production experience&lt;/strong&gt;&lt;/a&gt; as &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; noted Jane Street's several months of production use for implicit source positions in &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;, informing potential implementation in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Maintainer consensus coordination&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; confirming broad maintainer agreement on implicit source positions across both repositories in &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/43" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language committee oversight&lt;/strong&gt;&lt;/a&gt; for complex features as &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; confirmed committee involvement for the include functor RFC in &lt;a href="https://github.com/ocaml/RFCs/issues/43"&gt;ocaml/RFCs#43&lt;/a&gt;, ensuring proper review before compiler implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Implicit source positions implementation strategy&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; regarding integration with BUILD&lt;em&gt;PATH&lt;/em&gt;PREFIX_MAP and build system compatibility in &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Directory handling concerns&lt;/strong&gt;&lt;/a&gt; raised by &lt;a href="https://github.com/dbuenzli"&gt;Daniel BÃ¼nzli&lt;/a&gt; about potential conflicts with existing build path mapping, while &lt;a href="https://github.com/nojb"&gt;NicolÃ¡s Ojeda BÃ¤r&lt;/a&gt; provided Dune workspace insights in &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/43" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Include functor syntax alternatives&lt;/strong&gt;&lt;/a&gt; debated with &lt;a href="https://github.com/fpottier"&gt;FranÃ§ois Pottier&lt;/a&gt; suggesting &lt;code&gt;this&lt;/code&gt; keyword for current module reference and &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; exploring &lt;code&gt;include F(module)&lt;/code&gt; syntax in &lt;a href="https://github.com/ocaml/RFCs/issues/43"&gt;ocaml/RFCs#43&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Production validation insights&lt;/strong&gt;&lt;/a&gt; shared by &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; about Jane Street's internal implementation experience with implicit source positions in &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Industrial-to-upstream pipeline&lt;/strong&gt;&lt;/a&gt; where features like implicit source positions gain traction through company production experience before community adoption, as demonstrated by Jane Street's use in &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/52" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Build system integration awareness&lt;/strong&gt;&lt;/a&gt; with increased attention to Dune compatibility and BUILD&lt;em&gt;PATH&lt;/em&gt;PREFIX_MAP considerations in language design discussions in &lt;a href="https://github.com/ocaml/RFCs/issues/52"&gt;ocaml/RFCs#52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13806" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system sophistication advancement&lt;/strong&gt;&lt;/a&gt; through polymorphic parameters in &lt;a href="https://github.com/ocaml/ocaml/issues/13806"&gt;ocaml/ocaml#13806&lt;/a&gt;, external type kinds in &lt;a href="https://github.com/ocaml/ocaml/issues/13712"&gt;ocaml/ocaml#13712&lt;/a&gt;, and variance annotations improving OCaml's expressiveness&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/43" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Structured review processes&lt;/strong&gt;&lt;/a&gt; for complex language features as confirmed by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; regarding committee shepherd assignments in &lt;a href="https://github.com/ocaml/RFCs/issues/43"&gt;ocaml/RFCs#43&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Active week with new stdlib features, ARM64 improvements, and new RFC proposal for implicit source positions</summary><published>2025-02-23T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-7</id><title>Week 7, 2025: Labeled tuples feature merged, OCaml Language Committee established, and relocatable OCaml development progressed significantly</title><updated>2025-02-16T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Labeled tuples&lt;/strong&gt; syntax implementation providing optional field labels for tuple types and patterns like &lt;code&gt;(x: int, y: int)&lt;/code&gt; for enhanced code readability and safety (&lt;a href="https://github.com/ocaml/ocaml/commit/1ef454907b19fba693a182296594d5b8024fa6f4"&gt;ocaml/ocaml@1ef4549&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Pqueue module&lt;/strong&gt; added to stdlib implementing efficient heap-based priority queues with both min and max variants, polymorphic support, and linear-time construction from arrays (&lt;a href="https://github.com/ocaml/ocaml/commit/7962a31ec8472888db0218f0f1bb53cb70e23e2b"&gt;ocaml/ocaml@7962a31&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;String spellchecking&lt;/strong&gt; functions including &lt;code&gt;edit_distance&lt;/code&gt; with optional limit parameter and &lt;code&gt;spellcheck&lt;/code&gt; for finding closest dictionary matches using UTF-8 aware edit distance algorithms (&lt;a href="https://github.com/ocaml/ocaml/commit/ca8eacba349d25267527493efb6c599d3deccad5"&gt;ocaml/ocaml@ca8eacb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Either module&lt;/strong&gt; extensions with &lt;code&gt;get_left&lt;/code&gt; and &lt;code&gt;get_right&lt;/code&gt; functions for direct value extraction with error handling (&lt;a href="https://github.com/ocaml/ocaml/commit/5301a4c11a1ecba25e6f38c6a3ccb8fc263b417a"&gt;ocaml/ocaml@5301a4c&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Unicode width support&lt;/strong&gt; in Format module with new &lt;code&gt;out_width&lt;/code&gt; function and &lt;code&gt;utf_8_scalar_width&lt;/code&gt; for proper Unicode text rendering (&lt;a href="https://github.com/ocaml/ocaml/commit/1ef454907b19fba693a182296594d5b8024fa6f4"&gt;ocaml/ocaml@1ef4549&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;OCaml Language Committee governance framework&lt;/strong&gt;&lt;/a&gt; established with formal documentation describing committee structure, responsibilities, and submission process (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Language evolution&lt;/strong&gt; accelerated with labeled tuples feature merged in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; and OCaml Language Committee governance established in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Standard library expansion&lt;/strong&gt; delivered multiple new modules including Pqueue priority queues and String spellchecking utilities for enhanced development capabilities&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14244" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Compiler portability&lt;/strong&gt;&lt;/a&gt; advanced significantly with &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; opening comprehensive relocatable OCaml implementation PRs (&lt;a href="https://github.com/ocaml/ocaml/issues/14244"&gt;ocaml/ocaml#14244&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14247"&gt;ocaml/ocaml#14247&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Unicode improvements&lt;/strong&gt; integrated across multiple modules reflecting modern internationalization requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14244" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;David Allsopp's&lt;/strong&gt;&lt;/a&gt; leadership across both repositories, contributing to relocatable OCaml development in &lt;a href="https://github.com/ocaml/ocaml/issues/14244"&gt;ocaml/ocaml#14244&lt;/a&gt; and &lt;a href="https://github.com/ocaml/ocaml/issues/14247"&gt;ocaml/ocaml#14247&lt;/a&gt; while providing thoughtful analysis of committee scope in &lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Governance coordination&lt;/strong&gt; between repositories with &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; planning public announcements across multiple channels including &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;, caml-list, and discuss forum&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Contributor guidelines integration&lt;/strong&gt; suggested by &lt;a href="https://github.com/jberdine"&gt;Josh Berdine&lt;/a&gt; to update &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; CONTRIBUTING.md with Language Committee information for future contributors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Committee scope clarification&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; and &lt;a href="https://github.com/jberdine"&gt;Josh Berdine&lt;/a&gt; discussing whether compiler driver changes should require committee review, ultimately deciding most users interact through tools rather than directly (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Launch coordination&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; and &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; planning committee kickoff call and community announcements (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation integration&lt;/strong&gt;&lt;/a&gt; suggested by &lt;a href="https://github.com/jberdine"&gt;Josh Berdine&lt;/a&gt; to update &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; CONTRIBUTING.md with committee information for future contributors (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Governance formalization&lt;/strong&gt;&lt;/a&gt; trend with establishment of the OCaml Language Committee following successful patterns from other language communities like GHC Steering Committee (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14244" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Relocatable compiler&lt;/strong&gt;&lt;/a&gt; development representing substantial effort toward portable OCaml installations that can be moved between directories without reconfiguration (&lt;a href="https://github.com/ocaml/ocaml/issues/14244"&gt;ocaml/ocaml#14244&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14247"&gt;ocaml/ocaml#14247&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Unicode-first&lt;/strong&gt; approach in new string processing functions and format utilities reflecting modern internationalization requirements across &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-institutional collaboration&lt;/strong&gt; with committee members representing diverse organizations including Jane Street, Inria, LexiFi, University of Cambridge, Tarides, and SkipLabs&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Labeled tuples feature merged, OCaml Language Committee established, and relocatable OCaml development progressed significantly</summary><published>2025-02-16T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-6</id><title>Week 6, 2025: Major week with immutable arrays implementation, relocatable OCaml proposals, garbage collection fixes, and Language Committee governance discussion</title><updated>2025-02-09T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Immutable arrays module&lt;/strong&gt; added to standard library with comprehensive API mirroring Array but for immutable data structures (&lt;a href="https://github.com/ocaml/ocaml/commit/af3d64dddb6aabf91a99306c2f58ae5e6ab8cb42"&gt;af3d64d&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/6d248096fb1aa00bec606a615e95b4408dcea12e"&gt;6d24809&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;New &lt;code&gt;Stdlib.phys_equal&lt;/code&gt; function&lt;/strong&gt; providing explicit physical equality testing to replace reliance on &lt;code&gt;==&lt;/code&gt; operator (&lt;a href="https://github.com/ocaml/ocaml/commit/857b341b2a5fcadac14217ae694cd574637e6e94"&gt;857b341&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;&lt;code&gt;Sys.io_buffer_size&lt;/code&gt; constant&lt;/strong&gt; exposing the C buffer size used by runtime system and IO primitives (&lt;a href="https://github.com/ocaml/ocaml/commit/d20a51163ea2caac5d24d96e23f1de7856bf5f95"&gt;d20a511&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Unicode notation improvements&lt;/strong&gt; in error messages respecting Unicode standard for character representation (&lt;a href="https://github.com/ocaml/ocaml/commit/7eefe8d1812d8805ce690c3094b7abbc9d7d6649"&gt;7eefe8d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Enhanced &lt;code&gt;ocamldep&lt;/code&gt; tool&lt;/strong&gt; with new &lt;code&gt;-keywords&lt;/code&gt; flag mirroring behavior of ocamlc/ocamlopt for consistent keyword handling (&lt;a href="https://github.com/ocaml/ocaml/commit/6469d438ea989956704a692406ed9dd0b88a4768"&gt;6469d43&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Improved nanosleep usage&lt;/strong&gt; in systhreads tick thread when available for better timing precision (&lt;a href="https://github.com/ocaml/ocaml/commit/fd3307b3a069037e3f748bc3d0e41f521b99b40c"&gt;fd3307b&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; delivered substantial new features including immutable arrays module and multiple standard library additions alongside critical garbage collection fixes and runtime system improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; focused on governance with &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt;'s Language Committee proposal (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;#51&lt;/a&gt;) generating community discussion about formalized consensus mechanisms&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Combined impact&lt;/strong&gt; spans core language functionality improvements, infrastructure modernization through relocatable OCaml proposals, and governance process enhancement for future language evolution&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Governance and implementation alignment&lt;/strong&gt;&lt;/a&gt; with Language Committee proposal in &lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt; providing oversight mechanism for substantial changes like the relocatable OCaml proposals in &lt;a href="https://github.com/ocaml/ocaml/issues/14244"&gt;ocaml/ocaml#14244&lt;/a&gt; and &lt;a href="https://github.com/ocaml/ocaml/issues/14247"&gt;ocaml/ocaml#14247&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Community consensus building&lt;/strong&gt; where RFC governance discussions inform how major runtime system redesigns are evaluated and approved across the OCaml ecosystem&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Shared contributor expertise&lt;/strong&gt; with core developers like &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; and &lt;a href="https://github.com/MisterDA"&gt;Antonin DÃ©cimo&lt;/a&gt; working on both implementation details and governance processes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language Committee scope debate&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/jberdine"&gt;Josh Berdine&lt;/a&gt; questioning exclusion of compiler flags from committee purview, arguing command line interface should be considered part of OCaml's user interface (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Consensus mechanism support&lt;/strong&gt;&lt;/a&gt; from &lt;a href="https://github.com/OlivierNicole"&gt;Olivier Nicole&lt;/a&gt; welcoming committee as solution to stalled proposals that lack widespread opposition but struggle with unresolved technical points (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Windows Subsystem for Linux compilation&lt;/strong&gt; discussion by &lt;a href="https://github.com/MisterDA"&gt;Antonin DÃ©cimo&lt;/a&gt; exploring OCaml build challenges under WSL using MSVC64 and mingw-w64 (&lt;a href="https://github.com/ocaml/ocaml/discussions/11953"&gt;ocaml/ocaml#11953&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Governance formalization&lt;/strong&gt; with Language Committee proposal establishing structured decision-making process for OCaml language evolution, addressing community need for clear consensus mechanisms on complex technical decisions&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Infrastructure modernization&lt;/strong&gt; through relocatable OCaml implementation enabling installation-independent binaries and improved reproducibility for deployment scenarios&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime system robustness&lt;/strong&gt; receiving sustained attention with multiple garbage collection fixes addressing compaction statistics, pool management, and pacing algorithms for improved stability&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-platform compatibility&lt;/strong&gt; emphasis spanning C++ API fixes, Windows Subsystem for Linux build exploration, and assembler directive portability improvements across diverse development environments&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major week with immutable arrays implementation, relocatable OCaml proposals, garbage collection fixes, and Language Committee governance discussion</summary><published>2025-02-09T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-5</id><title>Week 5, 2025: Relocatable OCaml implementation progress, language governance formalization, and compiler optimizations with documentation improvements</title><updated>2025-02-02T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14243" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Relocatable OCaml implementation&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; with comprehensive PRs addressing &lt;code&gt;ld.conf&lt;/code&gt; handling and bytecode launcher enhancements (&lt;a href="https://github.com/ocaml/ocaml/issues/14243"&gt;ocaml/ocaml#14243&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14247"&gt;ocaml/ocaml#14247&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13766" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Structured compiler diagnostics&lt;/strong&gt;&lt;/a&gt; machinery introduced by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; for parseable error messages and debugging output (&lt;a href="https://github.com/ocaml/ocaml/issues/13766"&gt;ocaml/ocaml#13766&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;OCaml Language Committee&lt;/strong&gt;&lt;/a&gt; governance framework established by &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt; with formal decision-making process and member roster (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13758" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Flambda static catch unboxing&lt;/strong&gt;&lt;/a&gt; enhancement enabling unboxing of static catch parameters for improved functional code performance (&lt;a href="https://github.com/ocaml/ocaml/issues/13758"&gt;ocaml/ocaml#13758&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13767" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Seq module documentation&lt;/strong&gt;&lt;/a&gt; improvements with clearer termination behavior descriptions for infinite sequence handling (&lt;a href="https://github.com/ocaml/ocaml/issues/13767"&gt;ocaml/ocaml#13767&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14243" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Major relocatable OCaml initiative&lt;/strong&gt;&lt;/a&gt; launched with &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; opening comprehensive implementation PRs (&lt;a href="https://github.com/ocaml/ocaml/issues/14243"&gt;ocaml/ocaml#14243&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14247"&gt;ocaml/ocaml#14247&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language governance formalization&lt;/strong&gt;&lt;/a&gt; achieved through &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt;'s Language Committee documentation (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13766" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Compiler improvements&lt;/strong&gt;&lt;/a&gt; delivered with structured diagnostics machinery and Flambda unboxing optimizations (&lt;a href="https://github.com/ocaml/ocaml/issues/13766"&gt;ocaml/ocaml#13766&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13758"&gt;ocaml/ocaml#13758&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13767" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation enhancements&lt;/strong&gt;&lt;/a&gt; merged for Seq module and native debugger testing improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/13767"&gt;ocaml/ocaml#13767&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13762"&gt;ocaml/ocaml#13762&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language evolution coordination&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; governance establishment and &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; implementation work, with Language Committee providing structured decision-making for proposals (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14243" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Core developer collaboration&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; contributing to both main compiler improvements and RFC process alignment through relocatable OCaml proposals (&lt;a href="https://github.com/ocaml/ocaml/issues/14243"&gt;ocaml/ocaml#14243&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14247"&gt;ocaml/ocaml#14247&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14243" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Relocatable OCaml momentum&lt;/strong&gt;&lt;/a&gt; building with comprehensive implementation addressing &lt;code&gt;ld.conf&lt;/code&gt; handling, environment variable processing, and bytecode launcher enhancements (&lt;a href="https://github.com/ocaml/ocaml/issues/14243"&gt;ocaml/ocaml#14243&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/14247"&gt;ocaml/ocaml#14247&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/51" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language governance maturation&lt;/strong&gt;&lt;/a&gt; through formal committee establishment inspired by GHC Steering Committee model, providing structured consensus-building for language proposals (&lt;a href="https://github.com/ocaml/RFCs/issues/51"&gt;ocaml/RFCs#51&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13766" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Compiler tooling improvements&lt;/strong&gt;&lt;/a&gt; focus with structured diagnostics development and performance optimizations through enhanced Flambda unboxing capabilities (&lt;a href="https://github.com/ocaml/ocaml/issues/13766"&gt;ocaml/ocaml#13766&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13758"&gt;ocaml/ocaml#13758&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Relocatable OCaml implementation progress, language governance formalization, and compiler optimizations with documentation improvements</summary><published>2025-02-02T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-4</id><title>Week 4, 2025: Standard library enhancements and relocatable OCaml infrastructure work dominate core group activity</title><updated>2025-01-26T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Standard library API additions&lt;/strong&gt;: Added &lt;code&gt;Result.retract&lt;/code&gt; function for extracting values from same-type results (&lt;a href="https://github.com/ocaml/ocaml/commit/657d79eb2d4d6c3502cf49067d24980c25d2b442"&gt;ocaml/ocaml@657d79eb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Either module enhancement&lt;/strong&gt;: Added &lt;code&gt;Either.retract&lt;/code&gt; function for extracting values from same-type either values (&lt;a href="https://github.com/ocaml/ocaml/commit/657d79eb2d4d6c3502cf49067d24980c25d2b442"&gt;ocaml/ocaml@657d79eb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Sequence filtering&lt;/strong&gt;: Added &lt;code&gt;Seq.filteri&lt;/code&gt; function providing indexed filtering for sequences (&lt;a href="https://github.com/ocaml/ocaml/commit/657d79eb2d4d6c3502cf49067d24980c25d2b442"&gt;ocaml/ocaml@657d79eb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime system improvements&lt;/strong&gt;: Added &lt;code&gt;caml_stat_char_array_{to,of}_os&lt;/code&gt; functions for string conversion with NUL character handling (&lt;a href="https://github.com/ocaml/ocaml/commit/6612bfeb129a6576475d66a7cd9a35942126d9b7"&gt;ocaml/ocaml@6612bfeb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Custom finalizer documentation&lt;/strong&gt;: Enhanced C interface manual with detailed safety guidelines for custom block finalizers (&lt;a href="https://github.com/ocaml/ocaml/commit/7a01877e2265697da0dec8dbfe80fea0d09749a0"&gt;ocaml/ocaml@7a01877e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Development tooling&lt;/strong&gt;: Added &lt;code&gt;.editorconfig&lt;/code&gt; file for consistent editor configuration (&lt;a href="https://github.com/ocaml/ocaml/commit/a31022b1de9bd946901ec8b2b65d854e402ae951"&gt;ocaml/ocaml@a31022b1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Unix module time handling&lt;/strong&gt;: Improved time conversion functions and prevented unbounded wait in Unix.select on Windows (&lt;a href="https://github.com/ocaml/ocaml/commit/de538165495f0d06dfebf33be2d6dcfc047ef7a3"&gt;ocaml/ocaml@de538165&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Garbage collector fixes&lt;/strong&gt;: Made four GC control globals atomic to prevent C data races (&lt;a href="https://github.com/ocaml/ocaml/commit/61104576261fe2eae8a7a2543bceaf9fe8904b83"&gt;ocaml/ocaml@61104576&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Primary activity concentrated in ocaml/ocaml&lt;/strong&gt;: All development activity occurred in the main compiler repository with significant API enhancements, infrastructure improvements, and documentation updates&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;No RFC activity&lt;/strong&gt;: The &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; repository showed no commits, issues, or pull requests during this period&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14243" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Major infrastructure initiative launched&lt;/strong&gt;&lt;/a&gt;: &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; opened comprehensive work on relocatable OCaml implementation starting with &lt;a href="https://github.com/ocaml/ocaml/issues/14243"&gt;ocaml/ocaml#14243&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Standard library evolution&lt;/strong&gt;: Multiple new API functions added focusing on ergonomic utilities for Result, Either, and Seq modules&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Documentation and tooling improvements&lt;/strong&gt;: Enhanced developer experience through better documentation and editor configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/14243" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Relocatable OCaml initiative&lt;/strong&gt;&lt;/a&gt;: Major infrastructure work beginning with &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt;'s first PR addressing &lt;code&gt;ld.conf&lt;/code&gt; handling as foundation for relocatable compiler installations (&lt;a href="https://github.com/ocaml/ocaml/issues/14243"&gt;ocaml/ocaml#14243&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Documentation completeness drive&lt;/strong&gt;: Continued emphasis on filling documentation gaps, particularly for advanced features like native debugging and C interface safety guidelines&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer experience focus&lt;/strong&gt;: Addition of &lt;code&gt;.editorconfig&lt;/code&gt; and enhanced tooling reflects commitment to improving contributor experience and code consistency&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Safety-focused API design&lt;/strong&gt;: New API additions like &lt;code&gt;retract&lt;/code&gt; functions demonstrate focus on ergonomic yet safe interfaces for common programming patterns&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Standard library enhancements and relocatable OCaml infrastructure work dominate core group activity</summary><published>2025-01-26T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-3</id><title>Week 3, 2025: Standard library enhancements and runtime improvements delivered with three new functions and performance optimizations</title><updated>2025-01-19T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Standard library additions&lt;/strong&gt;: Three new functions added for improved type ergonomics - &lt;a href="https://github.com/ocaml/ocaml/commit/8273fc78f3ee26eb30f60103751e5835c00ce5c6"&gt;Result.retract&lt;/a&gt; extracts values from homogeneous Result types, &lt;a href="https://github.com/ocaml/ocaml/commit/49baed77c5e7f1f83f39220d5a0c2bc89ffc446f"&gt;Either.retract&lt;/a&gt; does the same for Either types, and &lt;a href="https://github.com/ocaml/ocaml/commit/b2ee286390a47c5ec6f98d7c6add57fb21f7f947"&gt;Seq.filteri&lt;/a&gt; provides indexed filtering for sequences&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance improvements&lt;/strong&gt;: Weak module optimizations including &lt;a href="https://github.com/ocaml/ocaml/commit/2da20f7641342c880289c850e83d4f2f58ba23c8"&gt;closure allocation reduction in Weak.add&lt;/a&gt; during table resizing and &lt;a href="https://github.com/ocaml/ocaml/commit/8f2daefea61762313728a38e415c00b6cad903ca"&gt;improved Weak.find_aux performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;ARM64 compiler fixes&lt;/strong&gt;: Fixed &lt;a href="https://github.com/ocaml/ocaml/commit/930d7e24241f9b48aa5e6f410a325ec1cd685a48"&gt;instruction size computation on ARM64&lt;/a&gt; addressing long-standing code generation issues and added &lt;code&gt;enable-codegen-invariants&lt;/code&gt; flag for debugging&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Test infrastructure&lt;/strong&gt;: String starts&lt;em&gt;with/ends&lt;/em&gt;with tests &lt;a href="https://github.com/ocaml/ocaml/commit/137dd26adc3345547b6eef6da744ac0d66fbc209"&gt;now run unconditionally&lt;/a&gt; improving test coverage, and fixed &lt;a href="https://github.com/ocaml/ocaml/commit/21a98e6a3f87bc26209465bffc58034a7fe3df92"&gt;Coccinelle test naming and Cygwin compatibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Repository activity&lt;/strong&gt;: &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; repository delivered significant improvements with new standard library functions and performance optimizations, while &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; repository had no activity during this period&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Standard library enhancements&lt;/strong&gt;: Three new utility functions merged improving type ergonomics and sequence processing capabilities&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime and compiler improvements&lt;/strong&gt;: Focus on ARM64 platform stability, GC safety in parallel contexts, and Weak module performance optimizations&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Infrastructure advancement&lt;/strong&gt;: Major relocatable OCaml implementation work with large-scale PRs affecting deployment and packaging capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13739" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime safety emphasis&lt;/strong&gt;&lt;/a&gt;: Growing attention to parallel execution safety with detailed bug reports on GC behavior like &lt;a href="https://github.com/ocaml/ocaml/issues/13739"&gt;ocaml/ocaml#13739&lt;/a&gt; and mutex usage patterns in multi-domain contexts through &lt;a href="https://github.com/ocaml/ocaml/pull/13716"&gt;ocaml/ocaml#13716&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance-focused standard library improvements&lt;/strong&gt;: Multiple optimizations targeting closure allocation reduction and algorithm efficiency in core modules like Weak through commits &lt;a href="https://github.com/ocaml/ocaml/commit/2da20f7641342c880289c850e83d4f2f58ba23c8"&gt;2da20f7&lt;/a&gt; and &lt;a href="https://github.com/ocaml/ocaml/commit/8f2daefea61762313728a38e415c00b6cad903ca"&gt;8f2daef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/pull/14247" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Deployment and portability improvements&lt;/strong&gt;&lt;/a&gt;: Significant investment in relocatable OCaml infrastructure through &lt;a href="https://github.com/ocaml/ocaml/pull/14247"&gt;ocaml/ocaml#14247&lt;/a&gt; suggesting focus on easier distribution and packaging&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Enhanced ergonomics&lt;/strong&gt;: New utility functions like &lt;code&gt;retract&lt;/code&gt; and &lt;code&gt;filteri&lt;/code&gt; show continued commitment to improving developer experience with more expressive APIs through commits &lt;a href="https://github.com/ocaml/ocaml/commit/8273fc78f3ee26eb30f60103751e5835c00ce5c6"&gt;8273fc7&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/49baed77c5e7f1f83f39220d5a0c2bc89ffc446f"&gt;49baed7&lt;/a&gt;, and &lt;a href="https://github.com/ocaml/ocaml/commit/b2ee286390a47c5ec6f98d7c6add57fb21f7f947"&gt;b2ee286&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Standard library enhancements and runtime improvements delivered with three new functions and performance optimizations</summary><published>2025-01-19T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-2</id><title>Week 2, 2025: OCaml 5.3.0 released with new Char.Ascii module and runtime fixes for multicore locking</title><updated>2025-01-12T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;New &lt;code&gt;Char.Ascii&lt;/code&gt; module&lt;/strong&gt; added to &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with comprehensive character classification functions including &lt;code&gt;is_valid&lt;/code&gt;, &lt;code&gt;is_upper&lt;/code&gt;, &lt;code&gt;is_lower&lt;/code&gt;, &lt;code&gt;is_letter&lt;/code&gt;, &lt;code&gt;is_alphanum&lt;/code&gt;, &lt;code&gt;is_white&lt;/code&gt;, &lt;code&gt;is_blank&lt;/code&gt;, &lt;code&gt;is_graphic&lt;/code&gt;, &lt;code&gt;is_print&lt;/code&gt;, &lt;code&gt;is_control&lt;/code&gt;, &lt;code&gt;is_digit&lt;/code&gt;, &lt;code&gt;hex_digit_to_int&lt;/code&gt;, and casing transforms (&lt;a href="https://github.com/ocaml/ocaml/commit/4d2298df37987fe5bb099bc0943a304024b524c9"&gt;ocaml/ocaml@4d2298d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime events deadlock fixes&lt;/strong&gt; to prevent STW polls while holding user&lt;em&gt;events&lt;/em&gt;lock, with pre-allocation to avoid allocation during critical sections (&lt;a href="https://github.com/ocaml/ocaml/commit/ada90eb6d3b8f3b3669af726b95ae970780e1830"&gt;ocaml/ocaml@ada90eb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Windows symlink support&lt;/strong&gt; when available on the system, improving cross-platform compatibility (&lt;a href="https://github.com/ocaml/ocaml/commit/b082fd17f080c7fb7e13f2bbb57edb06cd1e81c8"&gt;ocaml/ocaml@b082fd1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Polymorphic variant error message improvements&lt;/strong&gt; for better subtyping diagnostics (&lt;a href="https://github.com/ocaml/ocaml/commit/71783097893344035c6840ff7b49434e78396e94"&gt;ocaml/ocaml@7178309&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13722" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation improvements&lt;/strong&gt;&lt;/a&gt; including fixed &lt;code&gt;Dynarray.for_all&lt;/code&gt; docstring example (&lt;a href="https://github.com/ocaml/ocaml/issues/13722"&gt;ocaml/ocaml#13722&lt;/a&gt;) and corrected Ephemeron documentation (&lt;a href="https://github.com/ocaml/ocaml/issues/13730"&gt;ocaml/ocaml#13730&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Build system enhancements&lt;/strong&gt; for non-socket builds and Cygwin compatibility pinning (&lt;a href="https://github.com/ocaml/ocaml/commit/681f10ef93b33ab5b17a1fea2160f8b4b97f55ef"&gt;ocaml/ocaml@681f10e&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Major release activity&lt;/strong&gt; with &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; delivering OCaml 5.3.0 featuring new standard library modules and runtime system improvements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13712" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Active development&lt;/strong&gt;&lt;/a&gt; with two new PRs opened for type system enhancements and runtime mutex improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/13712"&gt;ocaml/ocaml#13712&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13716"&gt;ocaml/ocaml#13716&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Multicore runtime stabilization&lt;/strong&gt; with focus on proper locking patterns and deadlock prevention across the runtime system&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;No activity&lt;/strong&gt; recorded in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; during this period, with all development focused on the main compiler repository&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13712" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system enhancements&lt;/strong&gt;&lt;/a&gt; discussed in &lt;a href="https://github.com/ocaml/ocaml/issues/13712"&gt;ocaml/ocaml#13712&lt;/a&gt; with &lt;a href="https://github.com/t6s"&gt;Takafumi Saikawa&lt;/a&gt; proposing &lt;code&gt;Type_external&lt;/code&gt; kind, featuring extensive technical discussion from &lt;a href="https://github.com/garrigue"&gt;Jacques Garrigue&lt;/a&gt; and &lt;a href="https://github.com/goldfirere"&gt;Richard Eisenberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13716" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime mutex architecture&lt;/strong&gt;&lt;/a&gt; discussed in &lt;a href="https://github.com/ocaml/ocaml/issues/13716"&gt;ocaml/ocaml#13716&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; providing detailed analysis of locking patterns and proposing distinction between runtime vs mutator mutexes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13227" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Multicore locking patterns&lt;/strong&gt;&lt;/a&gt; discussed across multiple PRs (&lt;a href="https://github.com/ocaml/ocaml/issues/13227"&gt;ocaml/ocaml#13227&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13714"&gt;ocaml/ocaml#13714&lt;/a&gt;) with &lt;a href="https://github.com/gadmm"&gt;Guillaume Munch-Maccagnoni&lt;/a&gt; contributing technical expertise on deadlock prevention&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Multicore runtime stabilization&lt;/strong&gt; with extensive work on proper locking patterns, deadlock prevention, and clear separation between blocking and non-blocking mutex usage across the runtime system in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13712" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system enhancements&lt;/strong&gt;&lt;/a&gt; progressing toward better abstract type handling and equality proofs through the new &lt;code&gt;Type_external&lt;/code&gt; mechanism (&lt;a href="https://github.com/ocaml/ocaml/issues/13712"&gt;ocaml/ocaml#13712&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13722" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation and testing quality&lt;/strong&gt;&lt;/a&gt; improvements with community contributions fixing docstring errors and bumping test framework versions (&lt;a href="https://github.com/ocaml/ocaml/issues/13722"&gt;ocaml/ocaml#13722&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13726"&gt;ocaml/ocaml#13726&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13730"&gt;ocaml/ocaml#13730&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>OCaml 5.3.0 released with new Char.Ascii module and runtime fixes for multicore locking</summary><published>2025-01-12T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2025/week-1</id><title>Week 1, 2025: Major internal language improvements with symbol mangling overhaul, Unicode support, Bool module enhancements, and RFC implementation discussions</title><updated>2025-01-05T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Symbol mangling overhaul&lt;/strong&gt; changes module names from &lt;code&gt;camlModule.name_NNN&lt;/code&gt; to &lt;code&gt;camlModule$name_NNN&lt;/code&gt; with consistent platform encoding (&lt;a href="https://github.com/ocaml/ocaml/commit/ccbd123a82e59c710f36097c37b269d4cbbf7c20"&gt;ocaml/ocaml@ccbd123a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Unicode identifier support&lt;/strong&gt; in comments allows proper rendering of unicode characters in documentation and code comments (&lt;a href="https://github.com/ocaml/ocaml/commit/385ab8f9b9ad8d8dc53a7d2777e35533fc6c93fa"&gt;ocaml/ocaml@385ab8f9&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/ccbd123a82e59c710f36097c37b269d4cbbf7c20"&gt;ocaml/ocaml@ccbd123a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Bool module enhancements&lt;/strong&gt; with new logical functions &lt;code&gt;logand&lt;/code&gt;, &lt;code&gt;logor&lt;/code&gt;, and &lt;code&gt;logxor&lt;/code&gt; providing explicit Boolean operations (&lt;a href="https://github.com/ocaml/ocaml/commit/d23675111673018c5cf51ee07a51df181128df3d"&gt;ocaml/ocaml@d2367511&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;OCaml frame pointer correctness&lt;/strong&gt; improvements when using C libraries that don't support frame pointers (&lt;a href="https://github.com/ocaml/ocaml/commit/d23675111673018c5cf51ee07a51df181128df3d"&gt;ocaml/ocaml@d2367511&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Continuation optimization&lt;/strong&gt; with faster &lt;code&gt;caml_continuation_use_and_update_handler_noexc&lt;/code&gt; implementation (&lt;a href="https://github.com/ocaml/ocaml/commit/fbe9cedf020ceedbfc777977fe86346dcec289ff"&gt;ocaml/ocaml@fbe9cedf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;AMD64 register stall fix&lt;/strong&gt; avoiding conversion instruction stalls on amd64 architecture (&lt;a href="https://github.com/ocaml/ocaml/commit/d23675111673018c5cf51ee07a51df181128df3d"&gt;ocaml/ocaml@d2367511&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-compilation support&lt;/strong&gt; enhancements with new GitHub workflow for cross-platform builds (&lt;a href="https://github.com/ocaml/ocaml/commit/d23675111673018c5cf51ee07a51df181128df3d"&gt;ocaml/ocaml@d2367511&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Core language development&lt;/strong&gt; concentrated on internal improvements and platform consistency across &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with major symbol mangling changes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/39" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;RFC implementation feedback&lt;/strong&gt;&lt;/a&gt; provided by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; on atomic record fields challenges in &lt;a href="https://github.com/ocaml/RFCs/issues/39"&gt;ocaml/RFCs#39&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Unicode modernization&lt;/strong&gt; progressing with comment identifier support and updated documentation across the language&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13704" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Windows compatibility&lt;/strong&gt;&lt;/a&gt; addressed through &lt;a href="https://github.com/ocaml/ocaml/issues/13704"&gt;ocaml/ocaml#13704&lt;/a&gt; reporting runtop-with-otherlibs issues&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance optimizations&lt;/strong&gt; implemented in continuation handling and AMD64 register allocation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/39" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Implementation feedback loop&lt;/strong&gt;&lt;/a&gt; between &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; atomic record fields proposal and &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; implementation reality, with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; providing detailed analysis in &lt;a href="https://github.com/ocaml/RFCs/issues/39"&gt;ocaml/RFCs#39&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Coordinated development&lt;/strong&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; contributing to both typing system improvements in the main repository and RFC implementation feedback&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Technical constraint identification&lt;/strong&gt; where RFC proposals face implementation challenges that require cross-repository coordination to resolve&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/39" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Atomic record fields implementation challenges&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; highlighting technical issues with inline records and atomic field support (&lt;a href="https://github.com/ocaml/RFCs/issues/39"&gt;ocaml/RFCs#39&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13704" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Windows dynamic loading limitations&lt;/strong&gt;&lt;/a&gt; raised by &lt;a href="https://github.com/MisterDA"&gt;Antonin DÃ©cimo&lt;/a&gt; affecting runtop-with-otherlibs functionality on mingw32 and MSVC targets (&lt;a href="https://github.com/ocaml/ocaml/issues/13704"&gt;ocaml/ocaml#13704&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Platform standardization&lt;/strong&gt; with consistent symbol mangling across all platforms moving away from platform-specific naming schemes in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Unicode modernization&lt;/strong&gt; progressing with support for Unicode identifiers in comments and updated documentation (&lt;a href="https://github.com/ocaml/ocaml/commit/385ab8f9b9ad8d8dc53a7d2777e35533fc6c93fa"&gt;ocaml/ocaml@385ab8f9&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13704" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Windows compatibility focus&lt;/strong&gt;&lt;/a&gt; addressing longstanding issues with dynamic loading and otherlibs functionality (&lt;a href="https://github.com/ocaml/ocaml/issues/13704"&gt;ocaml/ocaml#13704&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance optimization&lt;/strong&gt; continuing with targeted improvements in continuation handling and register allocation (&lt;a href="https://github.com/ocaml/ocaml/commit/fbe9cedf020ceedbfc777977fe86346dcec289ff"&gt;ocaml/ocaml@fbe9cedf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Type system refinements&lt;/strong&gt; with ongoing work on labeled arguments and internal typing infrastructure (&lt;a href="https://github.com/ocaml/ocaml/commit/85970ee160c13baa89d904dabb00266eb08dc088"&gt;ocaml/ocaml@85970ee1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/39" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;RFC implementation validation&lt;/strong&gt;&lt;/a&gt; with closer integration between proposal discussions and actual implementation constraints (&lt;a href="https://github.com/ocaml/RFCs/issues/39"&gt;ocaml/RFCs#39&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major internal language improvements with symbol mangling overhaul, Unicode support, Bool module enhancements, and RFC implementation discussions</summary><published>2025-01-05T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-52</id><title>Week 52, 2024: None</title><updated>2024-12-29T00:00:00+00:00</updated><content type="html"/><link href="https://thicket.dev/"/><summary>Activity report for core - Week 52, 2024</summary><published>2024-12-29T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-51</id><title>Week 51, 2024: Major compiler refactoring with new Bool functions merged, alongside ongoing GC proposal discussions</title><updated>2024-12-22T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;New &lt;strong class="achievement"&gt;eager boolean functions&lt;/strong&gt; &lt;code&gt;Bool.logand&lt;/code&gt;, &lt;code&gt;Bool.logor&lt;/code&gt;, and &lt;code&gt;Bool.logxor&lt;/code&gt; providing bitwise operations on booleans for performance-critical code (&lt;a href="https://github.com/ocaml/ocaml/commit/c796b3b05fa42df6d033d127d6be25ded7c74114"&gt;ocaml/ocaml commit c796b3b&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;strong class="achievement"&gt;C interface manual&lt;/strong&gt; documentation correcting &lt;code&gt;hash_variant&lt;/code&gt; to &lt;code&gt;caml_hash_variant&lt;/code&gt; function name (&lt;a href="https://github.com/ocaml/ocaml/commit/fa8cd4d714e3106970bfa0148d9c4adf8e73e67f"&gt;ocaml/ocaml commit fa8cd4d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enhanced &lt;strong class="achievement"&gt;manual rendering&lt;/strong&gt; switching PDF generation from pdflatex to lualatex with improved Unicode support (&lt;a href="https://github.com/ocaml/ocaml/commit/418f3331942ae51608dbaea4a038f7587953d8f7"&gt;ocaml/ocaml commit 418f333&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improved &lt;strong class="achievement"&gt;toplevel constructor printing&lt;/strong&gt; using shorter paths for better readability (&lt;a href="https://github.com/ocaml/ocaml/commit/bee36baed2f71f4ac01eea5b343c01e71ead59ea"&gt;ocaml/ocaml commit bee36ba&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enhanced &lt;strong class="achievement"&gt;debugging tools&lt;/strong&gt; adding support for variable domain numbers in debugger scripts (&lt;a href="https://github.com/ocaml/ocaml/commit/0de4054f265ab70d710d1a49138563cffe8ac152"&gt;ocaml/ocaml commit 0de4054&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;strong class="achievement"&gt;cross-compilation builds&lt;/strong&gt; resolving issues with static compiler builds (&lt;a href="https://github.com/ocaml/ocaml/commit/f28bfbcb232b017460cb0ba7f9ec8cf1cf773811"&gt;ocaml/ocaml commit f28bfbc&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Major internal refactoring efforts in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; led by &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; with extensive typing system improvements preparing for future language features&lt;/li&gt;
&lt;li&gt;Runtime system optimizations and domain handling improvements by &lt;a href="https://github.com/COCTI"&gt;@COCTI&lt;/a&gt; enhancing multicore performance&lt;/li&gt;
&lt;li&gt;Build system robustness improvements by &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; addressing cross-compilation challenges and CI infrastructure updates&lt;/li&gt;
&lt;li&gt;Documentation modernization efforts by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; moving to Unicode-capable LaTeX tooling&lt;/li&gt;
&lt;li&gt;Ongoing technical discussions in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; around garbage collection proposal with detailed performance analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/50" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime system focus&lt;/strong&gt;&lt;/a&gt; across both repositories with domain improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; aligning with GC performance discussions in &lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt; regarding multicore memory management&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13275" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Typing system preparation&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; for modular explicits (&lt;a href="https://github.com/ocaml/ocaml/issues/13275"&gt;ocaml/ocaml#13275&lt;/a&gt;) may lead to future RFC proposals for language feature additions&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance considerations&lt;/strong&gt; spanning both repositories with bool operation optimizations in the main compiler and atomic operations analysis in the GC proposal discussions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/50" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;GC implementation strategy&lt;/strong&gt;&lt;/a&gt; discussion between &lt;a href="https://github.com/craff"&gt;Christophe Raffalli&lt;/a&gt; and &lt;a href="https://github.com/stedolan"&gt;Stephen Dolan&lt;/a&gt; covering atomic operations, remembered set representation, and performance concerns about scanning the whole minor heap (&lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13275" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Extensive internal refactoring&lt;/strong&gt;&lt;/a&gt; across the typing system in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; indicating preparation for future language features like modular explicits (&lt;a href="https://github.com/ocaml/ocaml/issues/13275"&gt;ocaml/ocaml#13275&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Enhanced build system robustness&lt;/strong&gt; with improved cross-compilation support and CI infrastructure modernization reflecting focus on platform compatibility&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Documentation modernization&lt;/strong&gt; moving from legacy LaTeX to Unicode-capable tooling suggesting improved accessibility for international contributors&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime system optimization&lt;/strong&gt; with atomic operations and domain handling improvements indicating ongoing multicore performance enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance-focused discussions&lt;/strong&gt; spanning both compiler optimizations and GC algorithm improvements, reflecting continued emphasis on OCaml's performance characteristics&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major compiler refactoring with new Bool functions merged, alongside ongoing GC proposal discussions</summary><published>2024-12-22T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-50</id><title>Week 50, 2024: Cross-compiler build system improvements, AMD64 performance optimization, and recursive module error message enhancements.</title><updated>2024-12-15T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13526" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Cross-compiler build system&lt;/strong&gt;&lt;/a&gt; simplification by &lt;a href="https://github.com/shym"&gt;@shym&lt;/a&gt; replacing &lt;code&gt;--with-target-bindir&lt;/code&gt; configure option with equivalent &lt;code&gt;TARGET_BINDIR&lt;/code&gt; variable, including new CI workflows and comprehensive documentation (&lt;a href="https://github.com/ocaml/ocaml/issues/13526"&gt;ocaml/ocaml#13526&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13672" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;AMD64 performance optimization&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/chambart"&gt;Pierre Chambart&lt;/a&gt; to avoid register stalls on conversion instructions (&lt;a href="https://github.com/ocaml/ocaml/issues/13672"&gt;ocaml/ocaml#13672&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13646" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Recursive module error messages&lt;/strong&gt;&lt;/a&gt; improvement by &lt;a href="https://github.com/shym"&gt;@shym&lt;/a&gt; when a recursive module type references another recursive module type (&lt;a href="https://github.com/ocaml/ocaml/issues/13646"&gt;ocaml/ocaml#13646&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13671" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;OCamlnat configuration fix&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/dra27"&gt;David Allsopp&lt;/a&gt; to resolve configure.ac logic error affecting the native toplevel (&lt;a href="https://github.com/ocaml/ocaml/issues/13671"&gt;ocaml/ocaml#13671&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13666" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Documentation improvements&lt;/strong&gt;&lt;/a&gt; to polymorphism chapter by &lt;a href="https://github.com/steffahn"&gt;@steffahn&lt;/a&gt; rewriting nested lists example with better &lt;code&gt;depth&lt;/code&gt; function behavior and fixing typos (&lt;a href="https://github.com/ocaml/ocaml/issues/13666"&gt;ocaml/ocaml#13666&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Primary activity&lt;/strong&gt; concentrated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with significant cross-compilation infrastructure improvements and performance optimizations&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;No activity&lt;/strong&gt; recorded in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; during this period&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Core contributors&lt;/strong&gt; delivered multiple compiler enhancements including build system simplification, architecture-specific optimizations, and improved developer experience features&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Focus areas&lt;/strong&gt; included cross-compilation toolchain development, AMD64-specific performance improvements, and enhanced error reporting for complex module structures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Cross-compilation toolchain&lt;/strong&gt; enhancements with comprehensive support for target-specific configuration variables and CI testing workflows&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance optimizations&lt;/strong&gt; targeting specific processor architectures with register allocation improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer experience&lt;/strong&gt; improvements through better error messages and build system simplification&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Cross-compiler build system improvements, AMD64 performance optimization, and recursive module error message enhancements.</summary><published>2024-12-15T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-49</id><title>Week 49, 2024: Runtime stability improvements with frame pointer fixes, build system updates, and ongoing GC optimization discussions</title><updated>2024-12-08T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13635" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Frame pointer handling&lt;/strong&gt;&lt;/a&gt; improvements to correctly maintain OCaml frame pointers during stack reallocation when using C libraries that don't support them (&lt;a href="https://github.com/ocaml/ocaml/issues/13635"&gt;ocaml/ocaml#13635&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Map.S.add&lt;em&gt;to&lt;/em&gt;list documentation&lt;/strong&gt; fix correcting example from &lt;code&gt;[v]&lt;/code&gt; to &lt;code&gt;[data]&lt;/code&gt; in function description (&lt;a href="https://github.com/ocaml/ocaml/issues/13664"&gt;ocaml/ocaml#13664&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13654" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Build system updates&lt;/strong&gt;&lt;/a&gt; including Automake 1.17 and libtool 2.5.4 upgrades with updated GNU config files (&lt;a href="https://github.com/ocaml/ocaml/issues/13654"&gt;ocaml/ocaml#13654&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13661" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime improvement&lt;/strong&gt;&lt;/a&gt; to help gcc static analyzer by widening a test condition in startup_byt.c (&lt;a href="https://github.com/ocaml/ocaml/issues/13661"&gt;ocaml/ocaml#13661&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13595" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;RISC-V CFI annotations&lt;/strong&gt;&lt;/a&gt; fix for correct Canonical Frame Address register usage preventing truncated backtraces (&lt;a href="https://github.com/ocaml/ocaml/issues/13595"&gt;ocaml/ocaml#13595&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime focus&lt;/strong&gt; across both repositories with &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; delivering frame pointer and platform-specific fixes while &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; discusses GC optimization proposals&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-platform stability&lt;/strong&gt; emphasized through RISC-V CFI fixes and build system modernization ensuring OCaml works correctly across diverse architectures&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Technical collaboration&lt;/strong&gt; between core developers with &lt;a href="https://github.com/stedolan"&gt;Stephen Dolan&lt;/a&gt; contributing both to runtime improvements in the main repository and providing detailed technical review of GC proposals in RFCs&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Infrastructure modernization&lt;/strong&gt; through build system updates and documentation improvements maintaining development quality and accessibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13635" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Stephen Dolan's dual contributions&lt;/strong&gt;&lt;/a&gt; spanning runtime improvements in &lt;a href="https://github.com/ocaml/ocaml/issues/13635"&gt;ocaml/ocaml#13635&lt;/a&gt; and detailed technical review of GC proposals in &lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt;, demonstrating coordinated expertise across core development and future planning&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime stability theme&lt;/strong&gt; connecting the merged frame pointer fixes in the main repository with ongoing discussions about GC optimization that could affect runtime behavior and memory management&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Technical knowledge transfer&lt;/strong&gt; with GC expertise from the main repository informing RFC discussions about implementation feasibility and performance implications&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/50" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Garbage collection terminology&lt;/strong&gt;&lt;/a&gt; clarification with &lt;a href="https://github.com/stedolan"&gt;Stephen Dolan&lt;/a&gt; pointing out that "grayval list" should be called "remembered set" and explaining the distinction from grey values/mark stack used in major GC (&lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/50" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance considerations&lt;/strong&gt;&lt;/a&gt; discussed regarding atomic operations for reference counting in multi-domain scenarios versus current remembered set approach (&lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/50" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Use case motivation&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/craff"&gt;Christophe Raffalli&lt;/a&gt; explaining need for larger minor heaps (16MB+) with 64KB-256KB slices to maintain good latencies in simple_httpd applications (&lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13658" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type-checker bug report&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; about non-termination with &lt;code&gt;-rectypes&lt;/code&gt; flag (&lt;a href="https://github.com/ocaml/ocaml/issues/13658"&gt;ocaml/ocaml#13658&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime reliability emphasis&lt;/strong&gt; with multiple fixes addressing frame pointer handling and stack management across different architectures (AMD64, ARM64, RISC-V)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-platform compatibility&lt;/strong&gt; focus through CFI annotation fixes and build system modernization ensuring OCaml works correctly across diverse environments&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Development toolchain improvements&lt;/strong&gt; with static analyzer support and build system updates facilitating better development and debugging experience&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;GC optimization research&lt;/strong&gt; progressing with detailed technical discussions about implementation approaches and performance trade-offs for memory management improvements&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Runtime stability improvements with frame pointer fixes, build system updates, and ongoing GC optimization discussions</summary><published>2024-12-08T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-48</id><title>Week 48, 2024: Major compiler improvements and three new GC proposals with significant warning system enhancements and ongoing type system discussions</title><updated>2024-12-01T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Warning and alert message formatting&lt;/strong&gt; completely redesigned with composable formatting system in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;, improving error presentation and command-line output styling (&lt;a href="https://github.com/ocaml/ocaml/commit/5a5eb481c7a9d0f039e3169aa8ed19c9b926e982"&gt;5a5eb48&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;String delimiter parsing&lt;/strong&gt; enhanced in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; to accept extended UTF-8 delimiter characters in quoted strings (&lt;code&gt;{delim||delim}&lt;/code&gt;), improving Unicode support (&lt;a href="https://github.com/ocaml/ocaml/commit/5a5eb481c7a9d0f039e3169aa8ed19c9b926e982"&gt;5a5eb48&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Format module safety&lt;/strong&gt; improved in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with &lt;code&gt;Queue.take_opt&lt;/code&gt; to prevent exceptions during concurrent access for multi-domain usage (&lt;a href="https://github.com/ocaml/ocaml/commit/5a5eb481c7a9d0f039e3169aa8ed19c9b926e982"&gt;5a5eb48&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Symbol name mangling&lt;/strong&gt; updated in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; to use &lt;code&gt;$&lt;/code&gt; instead of &lt;code&gt;.&lt;/code&gt; for module separation and &lt;code&gt;$$xx&lt;/code&gt; encoding for special characters, providing consistent cross-platform identifier encoding (&lt;a href="https://github.com/ocaml/ocaml/commit/703ba8eac4da669f793d84452a6137f333254db2"&gt;703ba8e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Exception and type extension locations&lt;/strong&gt; now include location information in AST nodes in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; for better error reporting and tooling support (&lt;a href="https://github.com/ocaml/ocaml/commit/5a5eb481c7a9d0f039e3169aa8ed19c9b926e982"&gt;5a5eb48&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; delivered major compiler improvements with warning system redesign, garbage collection performance optimizations, and GADT type checking enhancements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; saw three new garbage collection improvement proposals by &lt;a href="https://github.com/craff"&gt;Christophe Raffalli&lt;/a&gt; and continued technical discussions on types as module arguments (&lt;a href="https://github.com/ocaml/RFCs/issues/40"&gt;ocaml/RFCs#40&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NickBarnes"&gt;Nick Barnes&lt;/a&gt; and &lt;a href="https://github.com/sadiqj"&gt;Sadiq Jaffer&lt;/a&gt; contributed significant garbage collection performance improvements to &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with mark-delay optimization and shared heap enhancements (&lt;a href="https://github.com/ocaml/ocaml/issues/13580"&gt;ocaml/ocaml#13580&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13616"&gt;ocaml/ocaml#13616&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tmcgilchrist"&gt;Tim McGilchrist&lt;/a&gt; worked on frame pointer improvements and symbol name mangling updates in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13639"&gt;ocaml/ocaml#13639&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13050"&gt;ocaml/ocaml#13050&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/48" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Garbage collection improvements&lt;/strong&gt;&lt;/a&gt; emerged as a shared theme with &lt;a href="https://github.com/craff"&gt;Christophe Raffalli&lt;/a&gt; proposing three RFC improvements in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/48"&gt;ocaml/RFCs#48&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/49"&gt;ocaml/RFCs#49&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt;) while &lt;a href="https://github.com/NickBarnes"&gt;Nick Barnes&lt;/a&gt; and &lt;a href="https://github.com/sadiqj"&gt;Sadiq Jaffer&lt;/a&gt; implemented major GC performance optimizations in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13580"&gt;ocaml/ocaml#13580&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13616"&gt;ocaml/ocaml#13616&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/40" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system development&lt;/strong&gt;&lt;/a&gt; coordinated between repositories with theoretical discussions on types as module arguments in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/40"&gt;ocaml/RFCs#40&lt;/a&gt;) and practical GADT type checking improvements implemented in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13585"&gt;ocaml/ocaml#13585&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/50" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance optimization focus&lt;/strong&gt;&lt;/a&gt; unified both repositories with &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt; providing historical context on GC aging approaches in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt;) while concrete runtime improvements were merged in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/50" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;GC optimization discussion&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; between &lt;a href="https://github.com/lpw25"&gt;Leo White&lt;/a&gt; and Damien Doligez about aging approaches in garbage collection, with historical context on why book-keeping dominated performance improvements in past implementations (&lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/40" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Value restriction strategy debate&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; for types as module arguments, with &lt;a href="https://github.com/samsa1"&gt;Samuel Vivien&lt;/a&gt; proposing a two-step approach using strict value restriction initially, then potentially relaxing to weak value restriction later to handle type escaping scenarios (&lt;a href="https://github.com/ocaml/RFCs/issues/40"&gt;ocaml/RFCs#40&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/40" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Implementation strategy discussion&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; contributing guidance on the phased approach to implementing type parameters with value restriction (&lt;a href="https://github.com/ocaml/RFCs/issues/40"&gt;ocaml/RFCs#40&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13580" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance-focused development&lt;/strong&gt;&lt;/a&gt; with major garbage collection optimizations in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13580"&gt;ocaml/ocaml#13580&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13616"&gt;ocaml/ocaml#13616&lt;/a&gt;) and corresponding theoretical proposals in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13639" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer experience enhancement&lt;/strong&gt;&lt;/a&gt; through better error messages and improved debugging support in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with warning system redesign and frame pointer improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/13639"&gt;ocaml/ocaml#13639&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13585" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system evolution&lt;/strong&gt;&lt;/a&gt; with continued GADT improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/issues/13585"&gt;ocaml/ocaml#13585&lt;/a&gt;) and advanced module system features discussed in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/40"&gt;ocaml/RFCs#40&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-platform consistency&lt;/strong&gt; efforts in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; including symbol name mangling standardization and C++ compatibility improvements for better integration across different environments&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/48" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Collaborative RFC process&lt;/strong&gt;&lt;/a&gt; maturation with iterative proposal refinement as seen in &lt;a href="https://github.com/craff"&gt;Christophe Raffalli&lt;/a&gt;'s three GC proposal attempts in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/48"&gt;ocaml/RFCs#48&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/49"&gt;ocaml/RFCs#49&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/50"&gt;ocaml/RFCs#50&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major compiler improvements and three new GC proposals with significant warning system enhancements and ongoing type system discussions</summary><published>2024-12-01T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-47</id><title>Week 47, 2024: OCaml 5.2.1 release published with performance optimizations and development tooling improvements</title><updated>2024-11-24T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;String performance optimizations&lt;/strong&gt; including fast path for &lt;code&gt;String.concat&lt;/code&gt; with single-element lists and &lt;code&gt;String.sub&lt;/code&gt; when extracting entire string (&lt;a href="https://github.com/ocaml/ocaml/commit/487a5ae89df2ef7e8fb502cf1b08e71e487b97c9"&gt;487a5ae89df2ef7e8fb502cf1b08e71e487b97c9&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Lexer improvements&lt;/strong&gt; for quoted string delimiters now accept only lowercase letters instead of any identifier characters, improving consistency and error messages (&lt;a href="https://github.com/ocaml/ocaml/commit/75a518d15522f0db6eaf3b0597710754e135d138"&gt;75a518d15522f0db6eaf3b0597710754e135d138&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Format module robustness&lt;/strong&gt; enhanced with safer queue operations using &lt;code&gt;Queue.take_opt&lt;/code&gt; to prevent invalid access errors (&lt;a href="https://github.com/ocaml/ocaml/commit/c839100f2dbe91b7f7182b638682d6d532bffbc5"&gt;c839100f2dbe91b7f7182b638682d6d532bffbc5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Parser location tracking&lt;/strong&gt; improvements adding precise source locations for more syntax elements during parsing (&lt;a href="https://github.com/ocaml/ocaml/commit/2270fbc50945dc779e13a6497e72ea407625b6ff"&gt;2270fbc50945dc779e13a6497e72ea407625b6ff&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Pretty printing enhancements&lt;/strong&gt; for type levels in gprinttyp module improving diagnostic output quality (&lt;a href="https://github.com/ocaml/ocaml/commit/9ef1641bbcde616096e734dcae58a47480cf6ebf"&gt;9ef1641bbcde616096e734dcae58a47480cf6ebf&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Major release milestone&lt;/strong&gt; with &lt;a href="https://github.com/ocaml/ocaml/releases/tag/5.2.1"&gt;OCaml 5.2.1&lt;/a&gt; published by &lt;a href="https://github.com/Octachron"&gt;Florian Angeletti&lt;/a&gt; containing critical bug fixes and performance improvements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13616" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime optimization focus&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/sadiqj"&gt;Sadiq Jaffer&lt;/a&gt; contributing shared heap optimization work showing 3.85x performance improvements in sparse heap scenarios (&lt;a href="https://github.com/ocaml/ocaml/issues/13616"&gt;ocaml/ocaml#13616&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13556" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Development tooling enhancements&lt;/strong&gt;&lt;/a&gt; led by &lt;a href="https://github.com/MisterDA"&gt;Antonin DÃ©cimo&lt;/a&gt; including configure script modernization and improved cross-platform compatibility (&lt;a href="https://github.com/ocaml/ocaml/issues/13556"&gt;ocaml/ocaml#13556&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13625"&gt;ocaml/ocaml#13625&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Quality improvements&lt;/strong&gt; across multiple areas including string operations, warning formatting, and parser diagnostics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime performance focus&lt;/strong&gt; with multiple optimization efforts including string operations, shared heap management with run-length encoding, and format module efficiency improvements showing measurable performance gains&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Development tooling enhancement&lt;/strong&gt; through configure script maintenance, improved error message formatting, and enhanced diagnostic output for better developer experience&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Code quality initiatives&lt;/strong&gt; including safer queue operations using &lt;code&gt;Queue.take_opt&lt;/code&gt;, better location tracking in parsers, and more robust platform-specific feature handling across different operating systems&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>OCaml 5.2.1 release published with performance optimizations and development tooling improvements</summary><published>2024-11-24T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-46</id><title>Week 46, 2024: GNU/Hurd native backend enablement, runtime bug fixes, and compiler numbers comparison fix in OCaml core</title><updated>2024-11-17T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;GNU/Hurd native backend&lt;/strong&gt; enabled for x86_64 architecture with full natdynlink support, expanding OCaml platform compatibility (&lt;a href="https://github.com/ocaml/ocaml/commit/60cee045dab2e2fcbc31cf864a8860b3fa3ea37a"&gt;ocaml/ocaml@60cee04&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/961df281641776ec8ba343006f971849a1501b91"&gt;ocaml/ocaml@961df28&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;CFI annotation fix&lt;/strong&gt; for noalloc C code invocation improving debugging capabilities (&lt;a href="https://github.com/ocaml/ocaml/commit/31ac5a7d06deedeab917364578e0fa23962cd2c5"&gt;ocaml/ocaml@31ac5a7&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime error handling&lt;/strong&gt; improvements with fatal errors for OOM conditions in skiplist operations (&lt;a href="https://github.com/ocaml/ocaml/commit/7944ac5b45f7b60fd81050be4dbe646c29718529"&gt;ocaml/ocaml@7944ac5&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/commit/64f9d9a916d12a9145dfb97f51766aa09fed87f3"&gt;ocaml/ocaml@64f9d9a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Ephemeron debugging&lt;/strong&gt; thread safety fix with proper lock protection around verification code (&lt;a href="https://github.com/ocaml/ocaml/commit/aff6e65e706782b4529633a89ecc9d481b6353fe"&gt;ocaml/ocaml@aff6e65&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Numbers.Int_base.compare&lt;/strong&gt; function corrected to use proper &lt;code&gt;Int.compare&lt;/code&gt; instead of subtraction to avoid overflow issues (&lt;a href="https://github.com/ocaml/ocaml/commit/542e34f873c227b6f5161eb37f1afe97b96bbb48"&gt;ocaml/ocaml@542e34f&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;Core group activity concentrated entirely in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with platform expansion and runtime reliability improvements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; repository showed no activity during this week&lt;/li&gt;
&lt;li&gt;Focus on expanding platform support with GNU/Hurd native backend enablement and critical runtime bug fixes&lt;/li&gt;
&lt;li&gt;Performance optimization work initiated for garbage collection improvements targeting sparse heap scenarios&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Platform expansion&lt;/strong&gt; continues with GNU/Hurd native backend support joining the growing list of supported architectures in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Runtime reliability&lt;/strong&gt; improvements through better error handling in memory allocation and debugging infrastructure&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13616" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Garbage collection performance&lt;/strong&gt;&lt;/a&gt; optimization efforts targeting sparse heap scenarios with new free list representation approaches via &lt;a href="https://github.com/ocaml/ocaml/issues/13616"&gt;ocaml/ocaml#13616&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>GNU/Hurd native backend enablement, runtime bug fixes, and compiler numbers comparison fix in OCaml core</summary><published>2024-11-17T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-45</id><title>Week 45, 2024: Major GC performance improvements and thread naming API merged in ocaml/ocaml while atomic record fields design discussion continued in RFCs.</title><updated>2024-11-10T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13504" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Thread naming support&lt;/strong&gt;&lt;/a&gt; with new &lt;code&gt;Thread.set_current_thread_name&lt;/code&gt; function allowing threads to set their own names (&lt;a href="https://github.com/ocaml/ocaml/issues/13504"&gt;ocaml/ocaml#13504&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13593" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Atomic counter functions&lt;/strong&gt;&lt;/a&gt; unified across the runtime with safer access patterns and consolidated implementation (&lt;a href="https://github.com/ocaml/ocaml/issues/13593"&gt;ocaml/ocaml#13593&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13496" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Linker warning fixes&lt;/strong&gt;&lt;/a&gt; for amd64 and power architectures by adding missing .type and .size directives to main frametable (&lt;a href="https://github.com/ocaml/ocaml/issues/13496"&gt;ocaml/ocaml#13496&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13563" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Error message styling&lt;/strong&gt;&lt;/a&gt; improved with lighter inline code formatting that avoids confusion with OCaml strings by removing bold &lt;code&gt;...&lt;/code&gt; notation (&lt;a href="https://github.com/ocaml/ocaml/issues/13563"&gt;ocaml/ocaml#13563&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13592" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Build system improvements&lt;/strong&gt;&lt;/a&gt; including shallow clone support for git submodules and CFLAGS variable backward compatibility (&lt;a href="https://github.com/ocaml/ocaml/issues/13592"&gt;ocaml/ocaml#13592&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13519"&gt;ocaml/ocaml#13519&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13580" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime performance focus&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/NickBarnes"&gt;Nick Barnes&lt;/a&gt; delivering mark-delay GC optimization that reduces garbage collection latency by approximately half a major cycle (&lt;a href="https://github.com/ocaml/ocaml/issues/13580"&gt;ocaml/ocaml#13580&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13504" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Concurrent programming enhancements&lt;/strong&gt;&lt;/a&gt; including thread naming API implementation and atomic counter function unification across the runtime (&lt;a href="https://github.com/ocaml/ocaml/issues/13504"&gt;ocaml/ocaml#13504&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13593"&gt;ocaml/ocaml#13593&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13496" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Platform compatibility improvements&lt;/strong&gt;&lt;/a&gt; with linker warning fixes for amd64 and power architectures plus build system enhancements (&lt;a href="https://github.com/ocaml/ocaml/issues/13496"&gt;ocaml/ocaml#13496&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/39" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type system design work&lt;/strong&gt;&lt;/a&gt; continuing in RFCs with detailed atomic record fields design discussion exploring offset-only versus value-and-offset approaches (&lt;a href="https://github.com/ocaml/RFCs/issues/39"&gt;ocaml/RFCs#39&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13563" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer experience improvements&lt;/strong&gt;&lt;/a&gt; through error message styling refinements and build system backward compatibility (&lt;a href="https://github.com/ocaml/ocaml/issues/13563"&gt;ocaml/ocaml#13563&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13519"&gt;ocaml/ocaml#13519&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/39" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Concurrent programming focus&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; leading multicore runtime optimization discussions in &lt;a href="https://github.com/ocaml/ocaml/discussions/11923"&gt;ocaml/ocaml#11923&lt;/a&gt; while simultaneously driving atomic record fields design debate in &lt;a href="https://github.com/ocaml/RFCs/issues/39"&gt;ocaml/RFCs#39&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13593" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Atomic operations coordination&lt;/strong&gt;&lt;/a&gt; between runtime implementation improvements (&lt;a href="https://github.com/ocaml/ocaml/issues/13593"&gt;ocaml/ocaml#13593&lt;/a&gt;) and atomic record fields RFC design work exploring first-class offset approaches (&lt;a href="https://github.com/ocaml/RFCs/issues/39"&gt;ocaml/RFCs#39&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13580" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Performance optimization alignment&lt;/strong&gt;&lt;/a&gt; with GC mark-delay improvements addressing multicore runtime challenges discussed across both repositories (&lt;a href="https://github.com/ocaml/ocaml/issues/13580"&gt;ocaml/ocaml#13580&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/discussions/11923"&gt;ocaml/ocaml#11923&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Multicore runtime optimization&lt;/strong&gt; by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; exploring solutions for quadratic stack-scanning behavior on very large stacks, with detailed analysis of TMC (Tail Modulo Cons) optimization alternatives and potential strategies using linked stack lists (&lt;a href="https://github.com/ocaml/ocaml/discussions/11923"&gt;ocaml/ocaml#11923&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/39" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Atomic record fields design&lt;/strong&gt;&lt;/a&gt; debate examining two competing approaches: the offset-only design with first-class offsets versus the value-and-offset design, with detailed analysis of typing complexity, performance implications, and use cases like Fine-Grained Locking by &lt;a href="https://github.com/polytypic"&gt;Vesa Karvonen&lt;/a&gt; and &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/39"&gt;ocaml/RFCs#39&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/39" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Type inference challenges&lt;/strong&gt;&lt;/a&gt; discussion around principal mode compatibility and disambiguation requirements for &lt;code&gt;[%atomic.field]&lt;/code&gt; syntax versus &lt;code&gt;[%atomic.loc]&lt;/code&gt; alternatives, with particular focus on inline record type limitations identified by &lt;a href="https://github.com/clef-men"&gt;@clef-men&lt;/a&gt; (&lt;a href="https://github.com/ocaml/RFCs/issues/39"&gt;ocaml/RFCs#39&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13580" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Runtime performance optimization momentum&lt;/strong&gt;&lt;/a&gt; with substantial GC improvements merged and ongoing stack optimization discussions suggesting continued focus on multicore runtime efficiency (&lt;a href="https://github.com/ocaml/ocaml/issues/13580"&gt;ocaml/ocaml#13580&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/discussions/11923"&gt;ocaml/ocaml#11923&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13593" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Atomic operations development&lt;/strong&gt;&lt;/a&gt; spanning both implementation-level improvements in the runtime and language-level design work for atomic record fields, indicating coordinated effort on concurrent programming support (&lt;a href="https://github.com/ocaml/ocaml/issues/13593"&gt;ocaml/ocaml#13593&lt;/a&gt;, &lt;a href="https://github.com/ocaml/RFCs/issues/39"&gt;ocaml/RFCs#39&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13563" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Developer experience focus&lt;/strong&gt;&lt;/a&gt; with error message styling improvements, build system enhancements, and thread debugging capabilities suggesting attention to usability alongside performance (&lt;a href="https://github.com/ocaml/ocaml/issues/13563"&gt;ocaml/ocaml#13563&lt;/a&gt;, &lt;a href="https://github.com/ocaml/ocaml/issues/13504"&gt;ocaml/ocaml#13504&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Major GC performance improvements and thread naming API merged in ocaml/ocaml while atomic record fields design discussion continued in RFCs.</summary><published>2024-11-10T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-44</id><title>Week 44, 2024: New `-keywords` flag merged, GC performance improvements, RFC discussions on memory model and unit headers</title><updated>2024-11-03T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;New &lt;strong class="achievement"&gt;&lt;code&gt;-keywords&lt;/code&gt; command-line flag&lt;/strong&gt; allows specifying base keyword set by version and adding additional keywords via &lt;code&gt;+&lt;/code&gt; separated list (&lt;a href="https://github.com/ocaml/ocaml/commit/f5ff742240"&gt;ocaml/ocaml@f5ff742&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;strong class="achievement"&gt;root scanning bug&lt;/strong&gt; preventing deletion of roots during scanning to avoid crashes in parallel scenarios (&lt;a href="https://github.com/ocaml/ocaml/commit/77f29baefc"&gt;ocaml/ocaml@77f29ba&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;strong class="achievement"&gt;raw literal escape&lt;/strong&gt; issue in &lt;code&gt;-dsource&lt;/code&gt; output to properly handle escape sequences (&lt;a href="https://github.com/ocaml/ocaml/commit/a86d5cc043"&gt;ocaml/ocaml@a86d5cc&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;strong class="achievement"&gt;memory allocation&lt;/strong&gt; bug in &lt;code&gt;caml_stat_wcsdup_noexc&lt;/code&gt; to avoid exceptions during out-of-memory conditions (&lt;a href="https://github.com/ocaml/ocaml/commit/9a63653166"&gt;ocaml/ocaml@9a63653&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improved &lt;strong class="achievement"&gt;RISC-V runtime&lt;/strong&gt; to honor &lt;code&gt;--disable-cfi&lt;/code&gt; configuration option (&lt;a href="https://github.com/ocaml/ocaml/commit/d4caf8bd44"&gt;ocaml/ocaml@d4caf8b&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed &lt;strong class="achievement"&gt;integer comparison&lt;/strong&gt; in stdlib to use &lt;code&gt;&lt;&gt;&lt;/code&gt; instead of &lt;code&gt;!=&lt;/code&gt; for better practices (&lt;a href="https://github.com/ocaml/ocaml/commit/a047d14654"&gt;ocaml/ocaml@a047d14&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime improvements&lt;/strong&gt; dominated the week with multiple fixes for parallel execution scenarios and memory management edge cases in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance optimization&lt;/strong&gt; efforts introduced mark-delay GC improvements targeting latency reduction in garbage collection cycles&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;RFC discussions&lt;/strong&gt; progressed on memory model semantics and compilation unit configuration in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Platform modernization&lt;/strong&gt; continued with Windows concurrency primitives updates and RISC-V runtime enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer tooling&lt;/strong&gt; expanded with new keyword management capabilities and improved error handling&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/42" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Memory model implementation&lt;/strong&gt;&lt;/a&gt; discussions in &lt;a href="https://github.com/ocaml/RFCs/issues/42"&gt;ocaml/RFCs#42&lt;/a&gt; directly relate to parallel execution fixes being implemented in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;, particularly the root scanning bug fixes&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Language feature discussions&lt;/strong&gt; in RFC repository inform compiler implementation work, with unit headers RFC potentially impacting future parser development in the main compiler&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance improvements&lt;/strong&gt; from flambda-backend project (referenced in mark-delay GC work) demonstrate cross-project collaboration feeding back into core runtime optimizations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/42" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Memory model semantics clarification&lt;/strong&gt;&lt;/a&gt; by &lt;a href="https://github.com/stedolan"&gt;Stephen Dolan&lt;/a&gt; explaining that relaxed reads are weaker than C11 memory model, describing them as "very relaxed" reads, with next steps being RFC updates and implementation correctness verification (&lt;a href="https://github.com/ocaml/RFCs/issues/42"&gt;ocaml/RFCs#42&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/26" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Syntax design exploration&lt;/strong&gt;&lt;/a&gt; for unit headers with suggestions for parseable alternatives including &lt;code&gt;{%header &lt;arbitrary string payload&gt;}&lt;/code&gt; extension points to avoid requiring full OCaml parser for header detection (&lt;a href="https://github.com/ocaml/RFCs/issues/26"&gt;ocaml/RFCs#26&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13586" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Parallel flush bug&lt;/strong&gt;&lt;/a&gt; reported by &lt;a href="https://github.com/jmid"&gt;Jan Midtgaard&lt;/a&gt; with detailed reproducer showing &lt;code&gt;Out_channel.flush&lt;/code&gt; raising &lt;code&gt;Sys_error&lt;/code&gt; when used concurrently with channel closure (&lt;a href="https://github.com/ocaml/ocaml/issues/13586"&gt;ocaml/ocaml#13586&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13574" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;"Already Scanned" optimization&lt;/strong&gt;&lt;/a&gt; discussion by &lt;a href="https://github.com/kayceesrk"&gt;KC Sivaramakrishnan&lt;/a&gt; about restoration from OCaml 4 to improve stack frame scanning performance in OCaml 5 (&lt;a href="https://github.com/ocaml/ocaml/issues/13574"&gt;ocaml/ocaml#13574&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime robustness&lt;/strong&gt; improvements targeting parallel execution scenarios with fixes for root scanning races and memory management edge cases across multiple commits&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Performance optimization&lt;/strong&gt; work continuing from flambda-backend with mark-delay GC improvements to reduce garbage collection latency and improve throughput&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Platform modernization&lt;/strong&gt; efforts removing legacy dependencies like winpthreads in favor of native Windows APIs and improving RISC-V support&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Language evolution&lt;/strong&gt; discussions advancing through RFC process with technical depth on memory models and compilation unit configuration&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Developer experience&lt;/strong&gt; enhancements through new command-line options for keyword management and better error handling in compiler toolchain&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>New `-keywords` flag merged, GC performance improvements, RFC discussions on memory model and unit headers</summary><published>2024-11-03T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-43</id><title>Week 43, 2024: Runtime improvements and bytecode optimization merged alongside language syntax discussions for raw identifiers</title><updated>2024-10-27T00:00:00+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Bytecode callbacks system&lt;/strong&gt; completely reimplemented by &lt;a href="https://github.com/xavierleroy"&gt;Xavier Leroy&lt;/a&gt; to improve safety and stack space management (&lt;a href="https://github.com/ocaml/ocaml/commit/c3092e7ffe7b5016b7f443f83eb9923fa1839fb3"&gt;ocaml/ocaml@c3092e7&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13376" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Dynlink.loadfile_private&lt;/strong&gt;&lt;/a&gt; enhanced to avoid hiding loaded units until all modules are successfully loaded, improving robustness (&lt;a href="https://github.com/ocaml/ocaml/issues/13376"&gt;ocaml/ocaml#13376&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;CMM helper optimizations&lt;/strong&gt; for switch statements with less tagging overhead by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/commit/f27da793946370b6c7305d9ec4f1c13da91edad7"&gt;ocaml/ocaml@f27da79&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Documentation improvement&lt;/strong&gt; for &lt;code&gt;Sys.poll_actions&lt;/code&gt; with proper &lt;code&gt;@since 5.3&lt;/code&gt; annotation by &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/commit/bd8e6f517828b552a299b22747bd482881707529"&gt;ocaml/ocaml@bd8e6f5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;nanosleep replacement&lt;/strong&gt; for usleep when available on Unix platforms by &lt;a href="https://github.com/MisterDA"&gt;Antonin DÃ©cimo&lt;/a&gt; (&lt;a href="https://github.com/ocaml/ocaml/commit/7f5719c2651292ccd20c6e2644d44cf6dd360105"&gt;ocaml/ocaml@7f5719c&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime system improvements&lt;/strong&gt; merged in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; with bytecode callbacks reimplementation and Dynlink enhancements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Platform modernization&lt;/strong&gt; continues with Windows concurrency API work and Unix platform improvements in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Language design discussion&lt;/strong&gt; active in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; on raw identifier syntax applications&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Compiler optimization&lt;/strong&gt; work focusing on switch statement generation efficiency in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Cross-Repository Work&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/27" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Language expert collaboration&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; contributing both to compiler optimization work in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt; and providing language design feedback on raw identifier syntax in &lt;a href="https://github.com/ocaml/RFCs/issues/27"&gt;ocaml/RFCs#27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Syntax feature development&lt;/strong&gt; discussions in &lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt; inform future compiler implementation work in &lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Notable Discussions&lt;/h2&gt;

&lt;li&gt;&lt;a href="https://github.com/ocaml/ocaml/issues/13541" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Cygwin C++ compilation regression&lt;/strong&gt;&lt;/a&gt; reported by &lt;a href="https://github.com/kit-ty-kate"&gt;Kate&lt;/a&gt; in &lt;a href="https://github.com/ocaml/ocaml/issues/13541"&gt;ocaml/ocaml#13541&lt;/a&gt; affecting OCaml 5.2+ when building C++ code that uses the OCaml C API, with discussion identifying this as a 5.2 regression from name-mangled caml_state symbols&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocaml/RFCs/issues/27" style="text-decoration: none;"&gt;&lt;strong class="achievement"&gt;Raw identifier syntax applications&lt;/strong&gt;&lt;/a&gt; discussed by &lt;a href="https://github.com/gasche"&gt;Gabriel Scherer&lt;/a&gt; in &lt;a href="https://github.com/ocaml/RFCs/issues/27"&gt;ocaml/RFCs#27&lt;/a&gt;, providing feedback on usage beyond keyword compatibility for defining variant names that conflict with existing keywords like &lt;code&gt;Shape.\#function&lt;/code&gt;, &lt;code&gt;Shape.\#lazy&lt;/code&gt;, and &lt;code&gt;Shape.\#object&lt;/code&gt; in module design patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Emerging Trends&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;Runtime system modernization&lt;/strong&gt; continues as a major focus with multiple contributors working on performance improvements and platform compatibility&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Cross-platform compatibility&lt;/strong&gt; receiving increased attention with Windows API modernization and Unix platform improvements&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Language design refinement&lt;/strong&gt; through community feedback on practical applications of new syntax features like raw identifiers&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Runtime improvements and bytecode optimization merged alongside language syntax discussions for raw identifiers</summary><published>2024-10-27T00:00:00+00:00</published></entry><entry><id>https://thicket.dev/groups/core/2024/week-42</id><title>Week 42, 2024: Five PRs merged in ocaml/ocaml including new Thread.set_current_thread_name API and compiler improvements</title><updated>2025-09-22T07:02:23.672970+00:00</updated><content type="html">
&lt;style&gt;
    /* Base styles */
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
    h1, h2, h3 { margin-top: 1.5em; margin-bottom: 0.5em; color: #1a1a1a; }
    h1 { font-size: 1.8em; border-bottom: 2px solid #f0f0f0; padding-bottom: 0.3em; }
    h2 { font-size: 1.4em; }
    h3 { font-size: 1.2em; color: #444; }
    p { margin: 0.8em 0; }

    /* Links */
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Code blocks */
    code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; font-size: 0.9em; }
    pre { background: #f6f8fa; padding: 12px; border-radius: 6px; overflow-x: auto; }
    pre code { background: none; padding: 0; }

    /* Lists */
    ul, ol { padding-left: 1.5em; margin: 0.8em 0; }
    li { margin: 0.3em 0; }

    /* Achievement highlights */
    .achievement { color: #cc6600; font-weight: 600; }

    /* RUMINANT group links */
    .ruminant-group-link {
        color: #6b46c1;
        font-weight: 500;
        padding: 2px 6px;
        background: rgba(107, 70, 193, 0.1);
        border-radius: 3px;
        text-decoration: none;
    }
    .ruminant-group-link:hover {
        background: rgba(107, 70, 193, 0.2);
        text-decoration: none;
    }

    /* Repository links */
    .repo-inline { color: #0366d6; font-weight: 500; }

    /* Sections */
    section { margin: 2em 0; }

    /* Tables */
    table { border-collapse: collapse; width: 100%; margin: 1em 0; }
    th, td { padding: 8px 12px; border: 1px solid #ddd; text-align: left; }
    th { background: #f6f8fa; font-weight: 600; }
    tr:nth-child(even) { background: #f9f9f9; }
&lt;/style&gt;
&lt;h2&gt;New Features&lt;/h2&gt;

&lt;li&gt;New &lt;strong class="achievement"&gt;Thread.set&lt;em&gt;current&lt;/em&gt;thread_name&lt;/strong&gt; function allows setting thread names from within thread functions, available on most systems that support the functionality (&lt;a href="https://github.com/ocaml/ocaml/issues/13504"&gt;ocaml/ocaml#13504&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;Documentation improvements&lt;/strong&gt; for &lt;code&gt;-safe-string&lt;/code&gt; option clarification in Bytes module interface explaining immutability invariant protection (&lt;a href="https://github.com/ocaml/ocaml/commit/1e5d73946f8f1074afeffbf155869ed9a0ff70ef"&gt;ocaml/ocaml@1e5d73946f&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;GC verbose flag documentation&lt;/strong&gt; reformatted with cleaner hexadecimal notation (0x001 instead of 0x0001) in Gc.control interface (&lt;a href="https://github.com/ocaml/ocaml/commit/1e5d73946f8f1074afeffbf155869ed9a0ff70ef"&gt;ocaml/ocaml@1e5d73946f&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;String.to_seq documentation&lt;/strong&gt; enhanced to clarify behavior in "unsafe-string" mode where modifications during iteration are reflected in sequence (&lt;a href="https://github.com/ocaml/ocaml/commit/1e5d73946f8f1074afeffbf155869ed9a0ff70ef"&gt;ocaml/ocaml@1e5d73946f&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Group Overview&lt;/h2&gt;

&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/ocaml"&gt;ocaml/ocaml&lt;/a&gt;&lt;/strong&gt; delivered five merged PRs including a new threading API, runtime events improvements, and documentation clarifications&lt;/li&gt;
&lt;li&gt;&lt;strong class="achievement"&gt;&lt;a href="https://github.com/ocaml/RFCs"&gt;ocaml/RFCs&lt;/a&gt;&lt;/strong&gt; had no activity during this period&lt;/li&gt;
&lt;/ul&gt;
</content><link href="https://thicket.dev/"/><summary>Five PRs merged in ocaml/ocaml including new Thread.set_current_thread_name API and compiler improvements</summary></entry></feed>