{"repo_full": "ocsigen/js_of_ocaml", "org": "ocsigen", "repo_name": "js_of_ocaml", "total_weeks": 49, "summaries": [{"week": 37, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-09-08 to 2025-09-14", "start_commit": "7af3ae1f68eb9d18b76a05c05d554f3bf6f1660b", "end_commit": "901dafbd48f79e818c2318803ca8c8f0fd968ed0", "brief_summary": "Reference unboxing optimization and WASM primitive type precision improvements merged, plus CI enhancements", "new_features_summary": "Reference unboxing compiler optimization and more precise WASM primitive types for better performance", "new_features": "- **Reference unboxing optimization** added to the compiler for better performance by avoiding unnecessary heap allocations when references can be safely stored in variables instead ([#1958](https://github.com/ocsigen/js_of_ocaml/issues/1958))\n- **More precise WASM primitive types** implemented to improve type safety and potentially enable better optimizations in WebAssembly output ([#2100](https://github.com/ocsigen/js_of_ocaml/issues/2100))\n- **Updated build status badges** in README.md to show separate status for js_of_ocaml and wasm_of_ocaml workflows ([8e12eab](https://github.com/ocsigen/js_of_ocaml/commit/8e12eab3d588ae3e533dff1ba5632e634645b7f1))", "activity_summary": "CI improvements including dune unpinning and additional job scheduling alongside ongoing WASM optimization work", "activity": "- **CI infrastructure improvements** by [@hhugo](https://github.com/hhugo) including unpinning dune version constraints and scheduling additional CI jobs for better test coverage ([#2102](https://github.com/ocsigen/js_of_ocaml/issues/2102))\n- **Ongoing WASM optimization efforts** with multiple draft PRs in development including number unboxing across function calls ([#2101](https://github.com/ocsigen/js_of_ocaml/issues/2101)), exception optimizations ([#2098](https://github.com/ocsigen/js_of_ocaml/issues/2098)), and comprehensive function optimizations ([#2054](https://github.com/ocsigen/js_of_ocaml/issues/2054))\n- **OCaml 5.4 support testing** initiated with draft PR to ensure compatibility with the upcoming OCaml release ([#2103](https://github.com/ocsigen/js_of_ocaml/issues/2103))\n- **Lambda lifting improvements** discussion continues with work on aggressive lambda lifting optimizations that showed 1.45x speedup on Bonsai benchmarks ([#1886](https://github.com/ocsigen/js_of_ocaml/issues/1886))", "discussions_summary": "Active technical discussions on WASM module exports and WAMR runtime compatibility issues", "notable_discussions": "- **WASM module exports implementation** discussion in [#2028](https://github.com/ocsigen/js_of_ocaml/issues/2028) where [Jérôme Vouillon](https://github.com/vouillon) explained the challenges of supporting dynamic OCaml function exports in statically-defined WASM module exports, with [Adrián Montesinos González](https://github.com/amongonz) suggesting connection to JS modules work\n- **WAMR runtime compatibility troubleshooting** in [#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929) where [@nickbetteridge](https://github.com/nickbetteridge) reported type mismatch issues and detailed debugging of GC object handling problems with string_of_int operations, leading to discussions about WIT interface possibilities", "trends_summary": "Focus on WASM performance optimizations and runtime compatibility improvements across multiple fronts", "emerging_trends": "- **WASM optimization pipeline maturation** with multiple complementary optimization passes being developed including reference unboxing, number unboxing, and exception handling improvements\n- **Runtime compatibility focus** with ongoing work on WASI support ([#1831](https://github.com/ocsigen/js_of_ocaml/issues/1831)), stack switching effects ([#1832](https://github.com/ocsigen/js_of_ocaml/issues/1832)), and debugging WAMR runtime issues\n- **Performance-driven development** with benchmarking informing optimization decisions, as seen in lambda lifting work showing measurable speedups on real-world applications", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two primary contributors with Jérôme Vouillon implementing core features and hhugo maintaining CI infrastructure", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented reference unboxing optimization ([#1958](https://github.com/ocsigen/js_of_ocaml/issues/1958)), WASM primitive type precision improvements ([#2100](https://github.com/ocsigen/js_of_ocaml/issues/2100)), and provided technical guidance on WASM module exports and runtime compatibility issues ([#2028](https://github.com/ocsigen/js_of_ocaml/issues/2028), [#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- [@hhugo](https://github.com/hhugo) maintained CI infrastructure by unpinning dune constraints and adding job scheduling ([#2102](https://github.com/ocsigen/js_of_ocaml/issues/2102)), updated repository documentation with new build status badges, and initiated OCaml 5.4 compatibility testing ([#2103](https://github.com/ocsigen/js_of_ocaml/issues/2103))\n- [NSlash951](https://github.com/myfreess) asked about WASM module export functionality leading to technical discussions ([#2028](https://github.com/ocsigen/js_of_ocaml/issues/2028))\n- [@nickbetteridge](https://github.com/nickbetteridge) provided detailed bug reports and runtime debugging information for WAMR compatibility issues ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- [Adrián Montesinos González](https://github.com/amongonz) contributed technical insights connecting WASM exports to JS modules work ([#2028](https://github.com/ocsigen/js_of_ocaml/issues/2028))\n- [Olivier Nicole](https://github.com/OlivierNicole) provided clarification on WASM export semantics ([#2028](https://github.com/ocsigen/js_of_ocaml/issues/2028))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 36, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-09-01 to 2025-09-07", "start_commit": "4a273fced04871745fc4950586d1f23d16e5037a", "end_commit": "f9b616ba10eae7e0dae4ff677f2427299b22639f", "brief_summary": "WASM performance optimizations with number unboxing implementation and bigarray handling improvements", "new_features_summary": "New number unboxing optimization for WASM backend and improved bigarray operations", "new_features": "- **Number unboxing within functions** - new optimization that avoids boxing numbers when the boxed value is never used, providing performance improvements for microbenchmarks like almabench and fft ([#2069](https://github.com/ocsigen/js_of_ocaml/issues/2069), [f9b616ba](https://github.com/ocsigen/js_of_ocaml/commit/f9b616ba10eae7e0dae4ff677f2427299b22639f))\n- **Enhanced bigarray operations** - improvements including explicit handling when reading multiple bytes from byte arrays ([6bcd5ea3](https://github.com/ocsigen/js_of_ocaml/commit/6bcd5ea366d215355c8d0445e66b36f5fd188da1)) and corrected float/integer handling to avoid reading/writing floats as integers ([01f381c3](https://github.com/ocsigen/js_of_ocaml/commit/01f381c3aaa608a8bb1a511af67ce748852bc314))\n- **WASM code generation improvements** - separate functions for allocating regular blocks and float arrays ([a0253c1b](https://github.com/ocsigen/js_of_ocaml/commit/a0253c1b6422a5ca9c68722ecd9001b885201a12)) and enhanced sequence handling ([7d249abc](https://github.com/ocsigen/js_of_ocaml/commit/7d249abc86008c7128bc4ef4d76832868bc5be6e))\n- **GitHub Actions upgrade** - updated from setup-node v4 to v5 with enhanced caching and Node.js 24 runtime support ([#2097](https://github.com/ocsigen/js_of_ocaml/issues/2097))", "activity_summary": "Advanced WASM optimizations and lambda lifting discussions with ongoing performance-focused development", "activity": "- **WASM performance focus** - comprehensive **number unboxing across function calls** development by [Jérôme Vouillon](https://github.com/vouillon) extending the merged within-function optimization ([#2101](https://github.com/ocsigen/js_of_ocaml/issues/2101)), along with **exception handling optimizations** in draft stage ([#2098](https://github.com/ocsigen/js_of_ocaml/issues/2098))\n- **Type system enhancements** - merged improvements making **WASM primitive types more precise** by [Jérôme Vouillon](https://github.com/vouillon) ([#2100](https://github.com/ocsigen/js_of_ocaml/issues/2100)) and ongoing **reference unboxing** work ([#1958](https://github.com/ocsigen/js_of_ocaml/issues/1958))\n- **Lambda lifting optimization** - [Olivier Nicole](https://github.com/OlivierNicole) continues work on **aggressive lambda lifting** that showed 1.45x speedup on Bonsai benchmarks, now adding flag-based control ([#1886](https://github.com/ocsigen/js_of_ocaml/issues/1886))\n- **Testing infrastructure** - [Olivier Nicole](https://github.com/OlivierNicole) addressed **build directory state independence** issues in test suite ([#2090](https://github.com/ocsigen/js_of_ocaml/issues/2090))\n- **Runtime access improvements** - [@hhugo](https://github.com/hhugo) developing **direct access to runtime exported values** to address integration needs ([#2086](https://github.com/ocsigen/js_of_ocaml/issues/2086))", "discussions_summary": "WASM runtime compatibility discussions and dependency management challenges", "notable_discussions": "- **WASM runtime debugging** - [@nickbetteridge](https://github.com/nickbetteridge) reports detailed **type mismatch failures** with WAMR runtime, particularly around integer boxing/unboxing and i31 reference handling in `string_of_int` operations, with extensive debugging analysis provided ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- **Upstream dependency tracking** - [@hhugo](https://github.com/hhugo) maintains list of **pending PRs** across Jane Street packages (ppx_css, basement, typerep, bigstringaf, core_kernel) and OCaml 5.3 `effect` keyword conflicts affecting bonsai repositories ([#2061](https://github.com/ocsigen/js_of_ocaml/issues/2061))", "trends_summary": "Concentrated WASM backend optimization with performance-focused feature development", "emerging_trends": "- **Performance-driven WASM development** - consistent focus on **unboxing optimizations** (numbers within functions merged, across functions in progress, references ongoing) demonstrates systematic approach to reducing boxing overhead\n- **Runtime compatibility exploration** - growing attention to **WebAssembly runtime compatibility** beyond browser environments, with detailed debugging of WAMR integration issues\n- **Benchmark-driven optimization** - development decisions increasingly guided by **microbenchmark results** (almabench, fft) and larger application performance (Bonsai) measurements", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three main contributors focused on WASM optimizations and infrastructure improvements", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) led **WASM optimization work** including the merged number unboxing feature ([#2069](https://github.com/ocsigen/js_of_ocaml/issues/2069)), precise WASM primitive typing ([#2100](https://github.com/ocsigen/js_of_ocaml/issues/2100)), and continues developing cross-function number unboxing ([#2101](https://github.com/ocsigen/js_of_ocaml/issues/2101)) and exception optimizations ([#2098](https://github.com/ocsigen/js_of_ocaml/issues/2098))\n- [Olivier Nicole](https://github.com/OlivierNicole) contributed **lambda lifting optimization** work with demonstrated performance improvements ([#1886](https://github.com/ocsigen/js_of_ocaml/issues/1886)) and addressed **test infrastructure** robustness ([#2090](https://github.com/ocsigen/js_of_ocaml/issues/2090))\n- [@hhugo](https://github.com/hhugo) manages **dependency coordination** across Jane Street packages ([#2061](https://github.com/ocsigen/js_of_ocaml/issues/2061)) and develops **runtime integration improvements** ([#2086](https://github.com/ocsigen/js_of_ocaml/issues/2086))\n- [@nickbetteridge](https://github.com/nickbetteridge) provided extensive **WASM runtime debugging** analysis for WAMR compatibility issues ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- [Dependabot](https://github.com/dependabot) maintained **dependency updates** with GitHub Actions improvements ([#2097](https://github.com/ocsigen/js_of_ocaml/issues/2097))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 35, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-08-25 to 2025-08-31", "start_commit": "5738f8a1dff37a7d510698b82ce628290dd83941", "end_commit": "b3671f0f3b21a098b2a64f5d6eb5b2d094a40cd1", "brief_summary": "Bug fixes for function comparison purity annotations, WASM call graph analysis, and Unix.times implementation", "new_features_summary": "Fixed comparison function purity annotations and WASM call graph analysis for better optimization accuracy", "new_features": "- **Comparison function purity fix** reverting incorrect `mutable` annotations on `caml_compare` and related functions since they can raise `Invalid_argument` exceptions ([#2092](https://github.com/ocsigen/js_of_ocaml/issues/2092))\n- **WASM call graph analysis improvement** ensuring exact call analysis is coherent with code generation for better closure optimization ([#2093](https://github.com/ocsigen/js_of_ocaml/issues/2093))\n- **WASM Unix.times fix** correcting the system time component to return 0 instead of user time when using `performance.now()` fallback ([#2096](https://github.com/ocsigen/js_of_ocaml/issues/2096))", "activity_summary": "CI infrastructure improvements and test stabilization for cross-platform compatibility", "activity": "- **CI workflow enhancements** updating GitHub Actions configuration to pin lwt version 5.9.2 and address Dune 3.20 compatibility issues on Windows ([#2095](https://github.com/ocsigen/js_of_ocaml/issues/2095))\n- **Test suite robustness** improvements to make tests independent of build directory state, preventing failures from previous runs ([#2090](https://github.com/ocsigen/js_of_ocaml/issues/2090))\n- **Windows compatibility work** addressing CRLF line ending handling issues, though currently blocked on upstream ppx_expect dependency ([#2087](https://github.com/ocsigen/js_of_ocaml/issues/2087))", "discussions_summary": "Technical discussions around function comparison semantics and build system improvements", "notable_discussions": "- **Function equality behavior changes** discussion in [#2089](https://github.com/ocsigen/js_of_ocaml/issues/2089) about test failures when using `--effects=cps` or `--effects=double-translation`, where function lifting affects comparison results\n- **Filesystem build tool** inquiry in [#2091](https://github.com/ocsigen/js_of_ocaml/issues/2091) about preserving directory structure with `build-fs` command and compatibility with Dune's `source_tree` option\n- **Purity annotation semantics** clarification of the difference between `mutator`, `mutable`, and `pure` annotations for JavaScript runtime primitives in [#2092](https://github.com/ocsigen/js_of_ocaml/issues/2092)", "trends_summary": "Focus on WASM backend optimization and cross-platform build system stability", "emerging_trends": "- **WASM optimization refinement** continued improvement of closure optimization passes with better call graph analysis for more accurate dead code elimination\n- **Cross-platform CI stability** ongoing work to ensure consistent test results across different operating systems and Dune versions\n- **Runtime behavior consistency** careful attention to maintaining OCaml semantics in JavaScript/WASM runtimes, particularly around exception handling", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three core maintainers collaborated on compiler bug fixes and CI improvements", "contributors": "- [Olivier Nicole](https://github.com/OlivierNicole) identified and fixed the function comparison purity regression ([#2092](https://github.com/ocsigen/js_of_ocaml/issues/2092)), reported the effects-related test failure ([#2089](https://github.com/ocsigen/js_of_ocaml/issues/2089)), and improved test robustness ([#2090](https://github.com/ocsigen/js_of_ocaml/issues/2090))\n- [Jérôme Vouillon](https://github.com/vouillon) fixed the WASM call graph analysis issue ([#2093](https://github.com/ocsigen/js_of_ocaml/issues/2093)), resolved the Unix.times implementation ([#2096](https://github.com/ocsigen/js_of_ocaml/issues/2096)), and provided technical guidance on purity annotations\n- [@hhugo](https://github.com/hhugo) addressed CI pipeline issues ([#2095](https://github.com/ocsigen/js_of_ocaml/issues/2095)), worked on Windows compatibility ([#2087](https://github.com/ocsigen/js_of_ocaml/issues/2087)), and provided code review feedback across multiple PRs", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 34, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-08-18 to 2025-08-24", "start_commit": "a06177bb8b22087b677a2a90f5267df8f87b772e", "end_commit": "dcec0ac3a112ce3c9f28468a9ee0577b33250dcb", "brief_summary": "WebAssembly closure optimization merged with call graph analysis and debugging improvements", "new_features_summary": "Closure optimization to omit code pointers when unused, new call graph analysis, and debug timing", "new_features": "- **Closure optimization** for WebAssembly target that omits code pointers when not used, reducing memory allocation and enabling better Binaryen optimizations by [Jérôme Vouillon](https://github.com/vouillon) ([#2059](https://github.com/ocsigen/js_of_ocaml/issues/2059))\n- New **call graph analysis framework** with direct call detection for non-escaping closures, improving function call performance in WebAssembly compilation\n- **Debug timing infrastructure** added for Call_graph_analysis and Typing modules to help profile compiler performance\n- Enhanced **function call analysis** to detect unambiguous non-escaping closures that can use direct calls instead of indirect calls", "activity_summary": "WebAssembly-focused development with ongoing PRs for optimization hints and type improvements", "activity": "- **WebAssembly optimization efforts** continue with multiple draft PRs by [Jérôme Vouillon](https://github.com/vouillon) including more precise Wasm types ([#1907](https://github.com/ocsigen/js_of_ocaml/issues/1907)) and function type improvements ([#1908](https://github.com/ocsigen/js_of_ocaml/issues/1908))\n- **OCaml compiler integration work** progressing with [@hhugo](https://github.com/hhugo)'s optimization hints PR ([#1721](https://github.com/ocsigen/js_of_ocaml/issues/1721)) that consumes hints from ocaml#13438, though benchmarking is blocked by OCaml 5.3 compatibility issues\n- **Physical equality hints** development continues in draft PR ([#1745](https://github.com/ocsigen/js_of_ocaml/issues/1745)) by [@hhugo](https://github.com/hhugo), requiring rebase due to conflicts\n- Active **debugging and troubleshooting** of WebAssembly runtime issues with WAMR loader and GC compatibility problems", "discussions_summary": "Extensive technical discussion on WAMR/WebAssembly runtime compatibility and debugging approaches", "notable_discussions": "- **WebAssembly runtime compatibility** investigation by [@nickbetteridge](https://github.com/nickbetteridge) experiencing WAMR loader failures with type mismatches and GC object pointer issues ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- **Low-level debugging** of i31 reference handling where OCaml integer values wrapped in GC objects fail to cast properly to i31 types in WAMR runtime\n- **Runtime integration questions** about WASI compilation flags and memory export requirements for WebAssembly module compatibility\n- **WIT (WebAssembly Interface Types)** future development discussion, with [@nickbetteridge](https://github.com/nickbetteridge) considering either integration into js_of_ocaml or separate library development", "trends_summary": "Strong focus on WebAssembly performance optimization and runtime compatibility improvements", "emerging_trends": "- **WebAssembly optimization focus** with multiple concurrent efforts on closure optimization, type precision, and performance improvements ([#2059](https://github.com/ocsigen/js_of_ocaml/issues/2059), [#1907](https://github.com/ocsigen/js_of_ocaml/issues/1907), [#1908](https://github.com/ocsigen/js_of_ocaml/issues/1908))\n- **Compiler integration** work to leverage upstream OCaml optimization hints for better code generation ([#1721](https://github.com/ocsigen/js_of_ocaml/issues/1721))\n- **Runtime compatibility** challenges emerging as WebAssembly adoption grows, particularly with different runtime implementations like WAMR ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- **Performance analysis tooling** development with debug timing infrastructure to identify optimization opportunities", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Primary contributions by Jérôme Vouillon on WebAssembly optimization with community testing and feedback", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented the closure optimization feature ([#2059](https://github.com/ocsigen/js_of_ocaml/issues/2059)) and continues developing WebAssembly type improvements ([#1907](https://github.com/ocsigen/js_of_ocaml/issues/1907), [#1908](https://github.com/ocsigen/js_of_ocaml/issues/1908))\n- [@hhugo](https://github.com/hhugo) provided code review feedback on compilation time performance impacts and maintains optimization hints integration work ([#1721](https://github.com/ocsigen/js_of_ocaml/issues/1721), [#1745](https://github.com/ocsigen/js_of_ocaml/issues/1745))\n- [@nickbetteridge](https://github.com/nickbetteridge) actively testing WebAssembly runtime compatibility, reporting detailed debugging information on WAMR integration issues ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- [Sora Morimoto](https://github.com/smorimoto), [Ty Overby](https://github.com/TyOverby), and [Olivier Nicole](https://github.com/OlivierNicole) participated in PR discussions with maintenance and technical feedback", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 33, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-08-11 to 2025-08-17", "start_commit": "a66fa7d8c707a4134ad886172dfcec26a7265b87", "end_commit": "a66fa7d8c707a4134ad886172dfcec26a7265b87", "brief_summary": "Updated GitHub Actions checkout from v4 to v5 across CI workflows", "new_features_summary": null, "new_features": null, "activity_summary": "Updated CI infrastructure with GitHub Actions checkout v5 upgrade", "activity": "- Updated **GitHub Actions infrastructure** with [Dependabot](https://github.com/dependabot) upgrading actions/checkout from v4 to v5 across all CI workflows ([#2088](https://github.com/ocsigen/js_of_ocaml/issues/2088))\n- Modified **three workflow files** including js_of_ocaml.yml, lint.yml, and wasm_of_ocaml.yml to use the latest checkout action with Node.js 24 support\n- Maintained **CI compatibility** while adopting updated dependency management practices through automated dependency updates", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "[Dependabot](https://github.com/dependabot) automated dependency update via merged PR", "contributors": "- [Dependabot](https://github.com/dependabot) automatically updated the GitHub Actions checkout dependency from v4 to v5 across CI workflows, ensuring compatibility with Node.js 24 ([#2088](https://github.com/ocsigen/js_of_ocaml/issues/2088))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 32, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-08-04 to 2025-08-10", "start_commit": null, "end_commit": null, "brief_summary": "Development activity focused on WASM runtime compatibility and Windows line ending handling improvements.", "new_features_summary": null, "new_features": null, "activity_summary": "Windows compatibility improvements and WASM runtime debugging efforts with ongoing technical discussions.", "activity": "- Windows **line ending handling** improvements by [@hhugo](https://github.com/hhugo) removing CRLF tampering behavior ([#2087](https://github.com/ocsigen/js_of_ocaml/issues/2087)), currently blocked pending upstream changes to ppx_expect\n- Ongoing **WASM runtime compatibility** investigation with detailed technical troubleshooting of type mismatch failures between js_of_ocaml-generated WebAssembly and WAMR runtime, involving GC object handling and i31 reference casting issues ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))", "discussions_summary": "In-depth technical debugging session addressing WASM/WAMR compatibility challenges with GC integration.", "notable_discussions": "- Extensive **WASM runtime compatibility** troubleshooting between [@nickbetteridge](https://github.com/nickbetteridge) and [Jérôme Vouillon](https://github.com/vouillon) focusing on type mismatch failures when running js_of_ocaml-generated WebAssembly with WAMR runtime, including detailed analysis of GC object pointer validation and i31 reference casting issues ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- Discussion about potential **WebAssembly Interface Types (WIT)** integration for better real-world interfacing, with consideration of whether to build into js_of_ocaml core or create separate library ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Contributors focused on Windows compatibility fixes and WASM runtime debugging with detailed technical analysis.", "contributors": "- [@hhugo](https://github.com/hhugo) submitted Windows compatibility improvements removing CRLF line ending tampering behavior ([#2087](https://github.com/ocsigen/js_of_ocaml/issues/2087))\n- [@nickbetteridge](https://github.com/nickbetteridge) provided detailed WASM runtime compatibility investigation, contributing extensive technical analysis and debugging information for type mismatch failures with WAMR runtime ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- [Jérôme Vouillon](https://github.com/vouillon) provided technical guidance and troubleshooting assistance for WASM runtime issues, helping analyze GC object handling and compilation flag requirements ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 31, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-07-28 to 2025-08-03", "start_commit": "e015f1216571f803beec8fcc8c314230f93806fc", "end_commit": "938c18c46b78836119483d9cc9ce25ffdc44b718", "brief_summary": "Release 6.2.0 with filesystem rename support improvements and Windows compatibility fixes", "new_features_summary": "Filesystem rename functionality for fake and Node.js backends with Windows directory rename fixes", "new_features": "- **Filesystem rename** implementation in fake filesystem backend with proper directory and file handling ([#2080](https://github.com/ocsigen/js_of_ocaml/issues/2080))\n- **Windows directory rename** fix for Node.js filesystem backend preventing permission errors during directory operations ([#2080](https://github.com/ocsigen/js_of_ocaml/issues/2080))\n- **Compiler loop optimization** for exit-early conditions improving generated JavaScript performance ([#2077](https://github.com/ocsigen/js_of_ocaml/issues/2077))\n- **ECMAScript 3 compatibility** improvement by removing reserved keywords from generated output\n- **Recursive function inlining** fix preventing incorrect optimization of recursive calls ([#2084](https://github.com/ocsigen/js_of_ocaml/issues/2084))", "activity_summary": "Version 6.2.0 release preparation and filesystem improvements merged during the week", "activity": "- **Release 6.2.0** preparation and publication by [@hhugo](https://github.com/hhugo) with version bump and changelog updates ([#2085](https://github.com/ocsigen/js_of_ocaml/issues/2085))\n- **Filesystem rename** functionality completed by [Jon Ludlam](https://github.com/jonludlam) with comprehensive testing and Windows compatibility fixes ([#2080](https://github.com/ocsigen/js_of_ocaml/issues/2080))\n- **Test suite enhancement** with extensive `sys_fs` tests covering rename operations for both files and directories\n- **Runtime API access** draft PR opened by [@hhugo](https://github.com/hhugo) for directly accessing runtime-exported values ([#2086](https://github.com/ocsigen/js_of_ocaml/issues/2086))\n- **Intl.RelativeTimeFormat** API addition continued from [@toastal](https://github.com/toastal) with 111 lines of new bindings ([#2070](https://github.com/ocsigen/js_of_ocaml/issues/2070))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on runtime compatibility and filesystem operations with Windows platform improvements", "emerging_trends": "- **Cross-platform compatibility** emphasis with specific fixes for Windows filesystem operations\n- **Runtime API enhancement** work beginning with direct value access capabilities for external libraries\n- **Performance optimization** focus with compiler improvements for loop constructs and function inlining\n- **Comprehensive testing** integration with expanded test coverage for filesystem operations", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three main contributors with Jon Ludlam implementing filesystem features and hhugo managing release activities", "contributors": "- [Jon Ludlam](https://github.com/jonludlam) implemented comprehensive filesystem rename functionality across fake and Node.js backends, addressed Windows compatibility issues, and added extensive test coverage ([#2080](https://github.com/ocsigen/js_of_ocaml/issues/2080))\n- [@hhugo](https://github.com/hhugo) managed the 6.2.0 release process with version updates and changelog maintenance, reviewed filesystem changes, and opened draft PR for runtime API access ([#2085](https://github.com/ocsigen/js_of_ocaml/issues/2085), [#2086](https://github.com/ocsigen/js_of_ocaml/issues/2086))\n- [@toastal](https://github.com/toastal) continued work on Intl.RelativeTimeFormat API bindings with 111 lines of additions ([#2070](https://github.com/ocsigen/js_of_ocaml/issues/2070))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 30, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-07-21 to 2025-07-27", "start_commit": "0ea4a483c4965a7db64621c075adf3722441a54b", "end_commit": "4197fcba2395e47ebd5f0741809637ee217847d6", "brief_summary": "Critical compiler bug fix for recursive function inlining and filesystem enhancement work", "new_features_summary": "Fixed recursive function inlining bug and improved compiler safety with better assertions", "new_features": "- **Compiler inlining fix** for recursive functions preventing variable escape errors reported in [#2083](https://github.com/ocsigen/js_of_ocaml/issues/2083) by [Brendan Zabarauskas](https://github.com/brendanzab), resolved via [#2084](https://github.com/ocsigen/js_of_ocaml/pull/2084)\n- **Enhanced compiler safety** with additional assertion in inlining pass to prevent similar bugs ([4197fcba](https://github.com/ocsigen/js_of_ocaml/commit/4197fcba2395e47ebd5f0741809637ee217847d6))\n- **Filesystem rename functionality** implementation in fs_fake for better Node.js compatibility by [Jon Ludlam](https://github.com/jonludlam) ([#2080](https://github.com/ocsigen/js_of_ocaml/pull/2080))", "activity_summary": "Critical bug resolution focus with compiler safety improvements and filesystem enhancements", "activity": "- **Compiler bug resolution** effort centered on fixing recursive function inlining issue where inlined functions referenced unbound variables, affecting [@tailcall] optimizations ([#2083](https://github.com/ocsigen/js_of_ocaml/issues/2083), [#2084](https://github.com/ocsigen/js_of_ocaml/pull/2084))\n- **Filesystem compatibility work** with [Jon Ludlam](https://github.com/jonludlam) implementing rename operations in fs_fake, including Windows-specific directory handling fixes ([#2080](https://github.com/ocsigen/js_of_ocaml/pull/2080))\n- **Cross-library coordination** on runtime function compatibility, with discussion about caml_string_of_array usage in Brr library and potential version alignment ([#2081](https://github.com/ocsigen/js_of_ocaml/pull/2081))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on compiler safety and cross-platform filesystem compatibility improvements", "emerging_trends": "- **Compiler robustness** improvements with better error detection and prevention mechanisms for complex optimization scenarios\n- **Cross-platform filesystem support** enhancements targeting Node.js environment compatibility, particularly Windows-specific edge cases\n- **Library ecosystem coordination** patterns with downstream dependencies like Brr requiring runtime function compatibility", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Bug reporting, compiler fixes, and filesystem improvements by core contributors", "contributors": "- [@hhugo](https://github.com/hhugo) implemented the recursive function inlining fix ([#2084](https://github.com/ocsigen/js_of_ocaml/pull/2084)), added compiler assertion improvements, and coordinated release preparation ([#2085](https://github.com/ocsigen/js_of_ocaml/pull/2085))\n- [Jérôme Vouillon](https://github.com/vouillon) fixed runtime annotations ([#2082](https://github.com/ocsigen/js_of_ocaml/pull/2082)), worked on Brr compatibility issues ([#2081](https://github.com/ocsigen/js_of_ocaml/pull/2081)), and provided technical guidance on effects limitations ([#2068](https://github.com/ocsigen/js_of_ocaml/issues/2068))\n- [Brendan Zabarauskas](https://github.com/brendanzab) reported detailed compiler bug with reproducible test case ([#2083](https://github.com/ocsigen/js_of_ocaml/issues/2083))\n- [Jon Ludlam](https://github.com/jonludlam) implemented filesystem rename functionality with Windows compatibility fixes ([#2080](https://github.com/ocsigen/js_of_ocaml/pull/2080))\n- [Raphaël Monat](https://github.com/rmonat) engaged in effects usage discussions and limitations understanding ([#2068](https://github.com/ocsigen/js_of_ocaml/issues/2068))\n- [Daniel Bünzli](https://github.com/dbuenzli) provided library compatibility guidance and coordinated Brr updates ([#2081](https://github.com/ocsigen/js_of_ocaml/pull/2081))\n- [@toastal](https://github.com/toastal) contributed Intl.RelativeTimeFormat API additions ([#2070](https://github.com/ocsigen/js_of_ocaml/pull/2070))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 29, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-07-14 to 2025-07-20", "start_commit": null, "end_commit": null, "brief_summary": "Active week with PR work on filesystem rename functionality and runtime improvements, plus community discussions on WASM exports and effects usage", "new_features_summary": null, "new_features": null, "activity_summary": "Three PRs opened addressing filesystem operations, runtime compatibility, and annotation fixes", "activity": "- **Filesystem improvements** by [Jon Ludlam](https://github.com/jonludlam) implementing rename functionality in fs_fake ([#2080](https://github.com/ocsigen/js_of_ocaml/issues/2080)) with extensive testing and Windows compatibility fixes reviewed by [@hhugo](https://github.com/hhugo)\n- **Runtime compatibility work** by [Jérôme Vouillon](https://github.com/vouillon) addressing Brr library compatibility by restoring caml_string_of_array function ([#2081](https://github.com/ocsigen/js_of_ocaml/issues/2081)), coordinated with [Daniel Bünzli](https://github.com/dbuenzli) for alternative solutions\n- **Runtime annotation fixes** by [Jérôme Vouillon](https://github.com/vouillon) correcting some runtime annotations ([#2082](https://github.com/ocsigen/js_of_ocaml/issues/2082)) merged during the week", "discussions_summary": "Community discussions on WASM function exports and effects compatibility limitations", "notable_discussions": "- **WASM export functionality** inquiry by [NSlash951](https://github.com/myfreess) about exporting OCaml functions to WASM modules ([#2028](https://github.com/ocsigen/js_of_ocaml/issues/2028)), with technical analysis by [Adrián Montesinos González](https://github.com/amongonz) and [Olivier Nicole](https://github.com/OlivierNicole) explaining current limitations\n- **Effects compatibility issue** reported by [Raphaël Monat](https://github.com/rmonat) regarding unhandled effects in Sys_js.set_channel_filler ([#2068](https://github.com/ocsigen/js_of_ocaml/issues/2068)), resolved with clarification by [Jérôme Vouillon](https://github.com/vouillon) about JavaScript callback restrictions", "trends_summary": "Focus on filesystem operations and runtime compatibility, with ongoing community questions about advanced WASM integration", "emerging_trends": "- **Filesystem operation completeness** with implementation of previously missing operations like rename, addressing compatibility gaps for Node.js environments\n- **Library compatibility maintenance** ensuring external libraries like Brr continue working with new js_of_ocaml versions through careful API evolution\n- **Community education** about limitations in advanced features like effects and WASM exports, with maintainers providing detailed technical explanations", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Five main contributors active with PR development, code review, and community support", "contributors": "- [Jon Ludlam](https://github.com/jonludlam) implemented fs_fake rename functionality ([#2080](https://github.com/ocsigen/js_of_ocaml/issues/2080)) and addressed Windows compatibility issues with comprehensive testing\n- [Jérôme Vouillon](https://github.com/vouillon) opened two PRs for runtime improvements ([#2081](https://github.com/ocsigen/js_of_ocaml/issues/2081), [#2082](https://github.com/ocsigen/js_of_ocaml/issues/2082)) and provided technical guidance on effects compatibility ([#2068](https://github.com/ocsigen/js_of_ocaml/issues/2068))\n- [@hhugo](https://github.com/hhugo) reviewed filesystem implementation, identified Windows CI issues, and coordinated Brr compatibility solutions\n- [Daniel Bünzli](https://github.com/dbuenzli) collaborated on Brr library compatibility discussions and alternative approaches ([#2081](https://github.com/ocsigen/js_of_ocaml/issues/2081))\n- [Raphaël Monat](https://github.com/rmonat) reported effects compatibility issue ([#2068](https://github.com/ocsigen/js_of_ocaml/issues/2068)) and [NSlash951](https://github.com/myfreess) initiated WASM export discussion ([#2028](https://github.com/ocsigen/js_of_ocaml/issues/2028))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 28, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-07-07 to 2025-07-13", "start_commit": "bd83c419612536467196857e4a5d50033987ec79", "end_commit": "b4b3a2408cc4c6a4ee00de56f399c87de23cfa89", "brief_summary": "Compiler loop optimizations, CI improvements, and minor release 6.1.1 with shape loading fix", "new_features_summary": "Enhanced loop exit optimization enabling early termination in more cases", "new_features": "- **Loop exit optimization** improvements allowing early termination in more cases, particularly for leading loops ([#2077](https://github.com/ocsigen/js_of_ocaml/issues/2077))\n- Enhanced **loop body size analysis** that prevents adding loop-exiting edges for small loop bodies, improving compilation efficiency ([#2075](https://github.com/ocsigen/js_of_ocaml/issues/2075))\n- **Type analysis improvements** with optimized bitset usage for boolean arrays and enhanced float comparison type inference ([4e3c8db](https://github.com/ocsigen/js_of_ocaml/commit/4e3c8db95340dc613481cdf9e051b24c5552d2dc), [8082401](https://github.com/ocsigen/js_of_ocaml/commit/8082401b292079269789c6953ffa6b897424e7a9))\n- **Shape loading fix** resolving compiler issues with type shape processing ([#2074](https://github.com/ocsigen/js_of_ocaml/issues/2074))\n- Updated **reserved keywords list** removing deprecated ECMAScript 3 keywords and fixing duplicates ([#2071](https://github.com/ocsigen/js_of_ocaml/issues/2071))", "activity_summary": "Focus on compiler optimization work with loop analysis improvements and CI maintenance", "activity": "- **Compiler optimization research** with experimental constant sharing exploration by [@hhugo](https://github.com/hhugo) ([#2079](https://github.com/ocsigen/js_of_ocaml/issues/2079))\n- **CI infrastructure maintenance** ensuring apt cache updates across all workflows by [Jérôme Vouillon](https://github.com/vouillon) ([#2078](https://github.com/ocsigen/js_of_ocaml/issues/2078))\n- **Development tooling fixes** resolving benchmark compilation issues ([#2072](https://github.com/ocsigen/js_of_ocaml/issues/2072))\n- **Release preparation** activities including changelog updates and version bumping ([#2076](https://github.com/ocsigen/js_of_ocaml/issues/2076))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Ongoing focus on WebAssembly optimizations and compiler performance improvements", "emerging_trends": "- **WebAssembly optimization focus** continues with several draft PRs exploring number unboxing ([#2069](https://github.com/ocsigen/js_of_ocaml/issues/2069)) and specialized operations ([#1954](https://github.com/ocsigen/js_of_ocaml/issues/1954))\n- **Loop optimization development** showing sustained work on compiler efficiency improvements for control flow analysis\n- **Type analysis enhancements** with gradual improvements to the compiler's understanding of OCaml types in JavaScript/WASM context", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two core contributors focused on compiler optimizations and maintenance", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented type analysis improvements ([#2073](https://github.com/ocsigen/js_of_ocaml/issues/2073)), fixed shape loading ([#2074](https://github.com/ocsigen/js_of_ocaml/issues/2074)), updated reserved keywords ([#2071](https://github.com/ocsigen/js_of_ocaml/issues/2071)), resolved benchmark issues ([#2072](https://github.com/ocsigen/js_of_ocaml/issues/2072)), and updated CI workflows ([#2078](https://github.com/ocsigen/js_of_ocaml/issues/2078))\n- [@hhugo](https://github.com/hhugo) worked on loop optimization algorithms ([#2075](https://github.com/ocsigen/js_of_ocaml/issues/2075), [#2077](https://github.com/ocsigen/js_of_ocaml/issues/2077)), prepared the minor release ([#2076](https://github.com/ocsigen/js_of_ocaml/issues/2076)), and experimented with constant sharing optimizations ([#2079](https://github.com/ocsigen/js_of_ocaml/issues/2079))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 27, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-06-30 to 2025-07-06", "start_commit": "a73454701e0bad32383fa03f671bc2f9f201a03b", "end_commit": "e7c930ed2dac6dafb077a5feae1db692cbfb7891", "brief_summary": "JS_of_OCaml released version 6.1.0 with performance improvements and bug fixes", "new_features_summary": "Faster JavaScript code generation and improved compilation performance", "new_features": "- **JavaScript code generation performance** improvements that eliminate quadratic behavior in expression queue processing, delivering speedups of 47-60% for large codebases like fiat-crypto and partial-render-table ([#2066](https://github.com/ocsigen/js_of_ocaml/issues/2066))\n- **Updated reserved keywords list** for JavaScript output by removing keywords that were only reserved in ECMAScript 3 and are no longer restricted in modern JavaScript ([#2071](https://github.com/ocsigen/js_of_ocaml/issues/2071))\n- **Release preparation** for js_of_ocaml version 6.1.0 including version bumps and changelog updates ([#2065](https://github.com/ocsigen/js_of_ocaml/issues/2065))", "activity_summary": "Performance optimization work and new API additions alongside active development", "activity": "- **Compilation performance optimization** work including faster queue implementation that eliminates quadratic behavior in JavaScript code generation by [@hhugo](https://github.com/hhugo) ([#2066](https://github.com/ocsigen/js_of_ocaml/issues/2066))\n- **Number unboxing optimization** for WebAssembly by [Jérôme Vouillon](https://github.com/vouillon) to avoid boxing numbers when the boxed value is never used, improving performance for microbenchmarks like almabench and fft ([#2069](https://github.com/ocsigen/js_of_ocaml/issues/2069))\n- **JavaScript string implementation** for WebAssembly runtime continuing development by [Jérôme Vouillon](https://github.com/vouillon), implementing OCaml strings using JavaScript strings for performance improvements ([#1772](https://github.com/ocsigen/js_of_ocaml/issues/1772))\n- **Intl.RelativeTimeFormat API** addition to the JavaScript bindings by [@toastal](https://github.com/toastal) for internationalization support ([#2070](https://github.com/ocsigen/js_of_ocaml/issues/2070))", "discussions_summary": "Bug reports about effects compatibility and CI infrastructure issues", "notable_discussions": "- **Effects incompatibility** with JavaScript callbacks discussed by [Raphaël Monat](https://github.com/rmonat) and [Jérôme Vouillon](https://github.com/vouillon), where effects raised in `Sys_js.set_channel_filler` trigger unhandled exceptions due to fundamental restrictions when calling from JavaScript to OCaml ([#2068](https://github.com/ocsigen/js_of_ocaml/issues/2068))\n- **WebAssembly CI pipeline issues** reported by [@hhugo](https://github.com/hhugo) regarding missing dependencies (zarith and backoff) that resolved automatically ([#2067](https://github.com/ocsigen/js_of_ocaml/issues/2067))", "trends_summary": "Focus on WebAssembly optimization and JavaScript interoperability improvements", "emerging_trends": "- **WebAssembly performance focus** with multiple optimization efforts including number unboxing and JavaScript string integration for better performance in WebAssembly compilation ([#2069](https://github.com/ocsigen/js_of_ocaml/issues/2069), [#1772](https://github.com/ocsigen/js_of_ocaml/issues/1772))\n- **JavaScript API completeness** efforts with additions like Intl.RelativeTimeFormat showing continued work to provide comprehensive JavaScript bindings ([#2070](https://github.com/ocsigen/js_of_ocaml/issues/2070))\n- **Compilation performance** becoming a priority with concrete optimizations delivering significant speedups for large codebases ([#2066](https://github.com/ocsigen/js_of_ocaml/issues/2066))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Four active contributors working on performance, APIs, and bug reports", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented WebAssembly number unboxing optimizations ([#2069](https://github.com/ocsigen/js_of_ocaml/issues/2069)), continued JavaScript string implementation work ([#1772](https://github.com/ocsigen/js_of_ocaml/issues/1772)), and updated JavaScript reserved keywords ([#2071](https://github.com/ocsigen/js_of_ocaml/issues/2071))\n- [@hhugo](https://github.com/hhugo) optimized JavaScript code generation performance ([#2066](https://github.com/ocsigen/js_of_ocaml/issues/2066)), managed the 6.1.0 release preparation ([#2065](https://github.com/ocsigen/js_of_ocaml/issues/2065)), and reported CI infrastructure issues ([#2067](https://github.com/ocsigen/js_of_ocaml/issues/2067))\n- [Raphaël Monat](https://github.com/rmonat) reported effects compatibility issues with JavaScript callbacks and provided detailed reproduction cases ([#2068](https://github.com/ocsigen/js_of_ocaml/issues/2068))\n- [@toastal](https://github.com/toastal) added Intl.RelativeTimeFormat API bindings for improved internationalization support ([#2070](https://github.com/ocsigen/js_of_ocaml/issues/2070))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 26, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-06-23 to 2025-06-29", "start_commit": "c6a7539a161fccb8b42119b4b584d52038919254", "end_commit": "a725b1e87bfb590a9bde5906317391678eaab1f3", "brief_summary": "Compiler optimizations for switch statements, OCaml 5.4 support, bug fixes, and warning control features merged", "new_features_summary": "Switch optimization, compiler warning controls, and shortvar fixes for ES6 destructuring assignment", "new_features": "- **Switch statement optimization** reducing code size and compilation time by implementing better branch merging and conditional transformation ([#2057](https://github.com/ocsigen/js_of_ocaml/issues/2057))\n- **Compiler warning control flags** allowing fine-grained suppression of specific warning messages like missing primitives ([#2052](https://github.com/ocsigen/js_of_ocaml/issues/2052))\n- **OCaml 5.4 compatibility** by relaxing version constraints in package files ([#2058](https://github.com/ocsigen/js_of_ocaml/issues/2058))\n- **Fixed shortvar bug** with ES6 destructuring assignment where `EAssignTarget` was not properly handled for array and object destructuring patterns ([#2064](https://github.com/ocsigen/js_of_ocaml/issues/2064))", "activity_summary": "Core development focus on performance optimizations, packaging improvements, testing infrastructure, and bug resolution", "activity": "- **Compiler performance improvements** through switch optimization achieving 22% reduction in compilation time for complex projects like fiat-crypto and 38% improvement in global deadcode pass ([#2057](https://github.com/ocsigen/js_of_ocaml/issues/2057))\n- **Packaging and distribution** work including OCaml 5.4 compatibility updates and CI job name fixes ([#2058](https://github.com/ocsigen/js_of_ocaml/issues/2058), [#2063](https://github.com/ocsigen/js_of_ocaml/issues/2063))\n- **JavaScript runtime cleanup** through comprehensive audit of unused variables across 41 runtime files ([#2056](https://github.com/ocsigen/js_of_ocaml/issues/2056))\n- **CI infrastructure** improvements with additional dependencies for 32-bit testing environments ([#2055](https://github.com/ocsigen/js_of_ocaml/issues/2055))\n- **Release preparation** activities including changelog cleanup and version management ([#2060](https://github.com/ocsigen/js_of_ocaml/issues/2060))", "discussions_summary": "Safari WebAssembly compatibility issues resolved, pending upstream dependencies for WASM testing tracked", "notable_discussions": "- **Safari WebAssembly validation bug** where programs failed in Safari 18.4 with tail call validation errors, confirmed fixed in Safari Tech Preview ([#1975](https://github.com/ocsigen/js_of_ocaml/issues/1975))\n- **WASM testing dependencies** discussion about pending upstream PRs needed for full WASM test suite compatibility with Jane Street packages ([#2061](https://github.com/ocsigen/js_of_ocaml/issues/2061))\n- **Warning control feature** resolution implementing user-requested ability to suppress specific compiler messages while maintaining visibility of other important warnings ([#1863](https://github.com/ocsigen/js_of_ocaml/issues/1863))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three core maintainers active with [@hhugo](https://github.com/hhugo) leading development, [Jérôme Vouillon](https://github.com/vouillon) contributing reviews, and [Kate](https://github.com/kit-ty-kate) improving compatibility", "contributors": "- [@hhugo](https://github.com/hhugo) implemented switch optimization algorithms ([#2057](https://github.com/ocsigen/js_of_ocaml/issues/2057)), shortvar bug fixes ([#2064](https://github.com/ocsigen/js_of_ocaml/issues/2064)), warning control system ([#2052](https://github.com/ocsigen/js_of_ocaml/issues/2052)), runtime cleanup ([#2056](https://github.com/ocsigen/js_of_ocaml/issues/2056)), CI improvements ([#2055](https://github.com/ocsigen/js_of_ocaml/issues/2055), [#2063](https://github.com/ocsigen/js_of_ocaml/issues/2063)), and release preparation ([#2060](https://github.com/ocsigen/js_of_ocaml/issues/2060))\n- [Kate](https://github.com/kit-ty-kate) contributed OCaml 5.4 compatibility improvements by updating package constraints ([#2058](https://github.com/ocsigen/js_of_ocaml/issues/2058))\n- [Jérôme Vouillon](https://github.com/vouillon) provided code review feedback on switch optimization and participated in Safari WebAssembly compatibility discussions ([#1975](https://github.com/ocsigen/js_of_ocaml/issues/1975))\n- [Ty Overby](https://github.com/TyOverby) reported and helped resolve the Safari WebAssembly validation issue through testing feedback ([#1975](https://github.com/ocsigen/js_of_ocaml/issues/1975))\n- [Daniel Bünzli](https://github.com/dbuenzli) requested and contributed to the design of compiler warning control features ([#1863](https://github.com/ocsigen/js_of_ocaml/issues/1863))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 25, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-06-16 to 2025-06-22", "start_commit": "24dcd04cb2e260939183fa949331443d4b7f0494", "end_commit": "e6c8a9adf7a3cb5a3bbee21b753b6dab0a7c1c36", "brief_summary": "Major shape-based optimization system completed, method lookup cache fixes, and WASM runtime improvements", "new_features_summary": "Shape-based optimization system, method lookup cache improvements, WASM bigstring functionality, and warning controls", "new_features": "- **Shape-based optimization system** introduced to propagate function arity information across compilation units, improving separate compilation performance through cross-module analysis ([#1594](https://github.com/ocsigen/js_of_ocaml/pull/1594))\n- **Method lookup cache fix** for separate compilation resolving cache collision issues between different compilation units ([#2039](https://github.com/ocsigen/js_of_ocaml/pull/2039))\n- **Enhanced warning control** system with better configurability for js_of_ocaml compiler warnings ([#2052](https://github.com/ocsigen/js_of_ocaml/pull/2052))\n- **WASM bigstring functionality** with new `caml_bigstring_strncmp` function for string comparison operations ([2050](https://github.com/ocsigen/js_of_ocaml/commit/a56e2afc5a3ad11dd248ca5e6c2012145bc3a99b))\n- **Static function call optimization** for WASM target improving performance of statically known function calls ([#2044](https://github.com/ocsigen/js_of_ocaml/pull/2044))\n- **Global dead code elimination improvements** with better handling of IsInt tests retaining only necessary block references ([#2046](https://github.com/ocsigen/js_of_ocaml/pull/2046))\n- **OCaml 5.3 benchmarking support** with updated testing infrastructure for Jane Street packages ([#2048](https://github.com/ocsigen/js_of_ocaml/pull/2048))\n- **CI workflow improvements** with clearer job names and better organization ([#2051](https://github.com/ocsigen/js_of_ocaml/pull/2051))\n- **WASM debug output fixes** resolving duplicate helper function generation for partial application ([#2050](https://github.com/ocsigen/js_of_ocaml/pull/2050), [#2053](https://github.com/ocsigen/js_of_ocaml/pull/2053))", "activity_summary": "Infrastructure updates for testing, long-term optimization work, and ongoing development discussions", "activity": "- **Testing infrastructure modernization** with updates to benchmark systems and CI configurations, particularly focusing on OCaml 5.3 compatibility and Jane Street package integration\n- **WASM development progress** including work on JavaScript string implementation alternatives ([#1772](https://github.com/ocsigen/js_of_ocaml/pull/1772)) and WebAssembly code embedding features ([#1758](https://github.com/ocsigen/js_of_ocaml/pull/1758))\n- **API expansion efforts** with ongoing work on popover API implementation ([#1734](https://github.com/ocsigen/js_of_ocaml/pull/1734)) and CSS Font Loading API wrapper development ([#1833](https://github.com/ocsigen/js_of_ocaml/pull/1833))\n- **Advanced optimization development** including comprehensive function optimization suite ([#2054](https://github.com/ocsigen/js_of_ocaml/pull/2054)) and integration with upstream OCaml optimization hints ([#1721](https://github.com/ocsigen/js_of_ocaml/pull/1721))\n- **Long-term issue resolution** with closure of cross-module information tracking issue that had been open since 2016 ([#550](https://github.com/ocsigen/js_of_ocaml/issues/550))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on performance optimization through cross-module analysis and WASM target improvements", "emerging_trends": "- **Cross-module optimization becoming central** with the completion of shape-based analysis system enabling better performance in separate compilation scenarios, representing a fundamental shift in the compiler's optimization capabilities\n- **WASM target maturation** with continued improvements to WebAssembly backend including runtime enhancements, string handling optimizations, and debug output fixes\n- **Infrastructure modernization** with systematic updates to testing frameworks, CI systems, and compatibility with newer OCaml versions, particularly OCaml 5.3\n- **Performance-first development approach** evident in multiple optimization PRs including static call optimization, dead code elimination improvements, and comprehensive function optimization suites", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two core maintainers driving major optimization work and infrastructure improvements", "contributors": "- [@hhugo](https://github.com/hhugo) led the shape-based optimization system implementation ([#1594](https://github.com/ocsigen/js_of_ocaml/pull/1594)), improved warning controls ([#2052](https://github.com/ocsigen/js_of_ocaml/pull/2052)), fixed method lookup cache issues ([#2039](https://github.com/ocsigen/js_of_ocaml/pull/2039)), enhanced CI workflows ([#2051](https://github.com/ocsigen/js_of_ocaml/pull/2051)), and addressed testing infrastructure updates ([#2035](https://github.com/ocsigen/js_of_ocaml/issues/2035))\n- [Jérôme Vouillon](https://github.com/vouillon) focused on WASM improvements including static function call optimization ([#2044](https://github.com/ocsigen/js_of_ocaml/pull/2044)), global dead code elimination enhancements ([#2046](https://github.com/ocsigen/js_of_ocaml/pull/2046)), Jane Street testing updates ([#2048](https://github.com/ocsigen/js_of_ocaml/pull/2048)), and WASM debug output fixes ([#2050](https://github.com/ocsigen/js_of_ocaml/pull/2050), [#2053](https://github.com/ocsigen/js_of_ocaml/pull/2053))\n- [Sylvain Boilard](https://github.com/SylvainBoilard) continued work on popover API implementation ([#1734](https://github.com/ocsigen/js_of_ocaml/pull/1734)) with ongoing review discussions", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 24, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-06-09 to 2025-06-15", "start_commit": "2d40cc639d82235fc85455f201bcd8ac2739b978", "end_commit": "ae754850c7c79ebed2349d24347967a1e3233a4f", "brief_summary": "Merged DOM API enhancement, runtime optimizations, and WebAssembly performance improvements", "new_features_summary": "Added window.matchMedia API, runtime performance improvements with TextEncoder/TextDecoder", "new_features": "- **DOM HTML API enhancement** with `window.matchMedia()` and `MediaQueryList` support for responsive web development ([#2017](https://github.com/ocsigen/js_of_ocaml/issues/2017))\n- **Runtime performance optimization** replacing custom UTF8/UTF16 conversion functions with native `TextEncoder`/`TextDecoder` APIs for better performance ([#1645](https://github.com/ocsigen/js_of_ocaml/issues/1645))\n- **WebAssembly type analysis improvements** using more precise environment types to reduce unnecessary type casts ([#2041](https://github.com/ocsigen/js_of_ocaml/issues/2041))\n- **WebAssembly equality optimization** avoiding JavaScript strict equality when type analysis determines it's unnecessary ([#2040](https://github.com/ocsigen/js_of_ocaml/issues/2040))\n- **WebAssembly integer optimizations** avoiding inefficient `ref.i31/i31.get_s` operations for better performance ([#2032](https://github.com/ocsigen/js_of_ocaml/issues/2032))", "activity_summary": "Infrastructure updates including ppxlib 0.36 support and method lookup cache fixes", "activity": "- **Build system modernization** with ppxlib 0.36 compatibility for tests and CI improvements by [@hhugo](https://github.com/hhugo) ([#2043](https://github.com/ocsigen/js_of_ocaml/issues/2043), [#2042](https://github.com/ocsigen/js_of_ocaml/issues/2042))\n- **Method lookup cache corrections** for separate compilation scenarios fixing cache slot conflicts by [@hhugo](https://github.com/hhugo) ([#2039](https://github.com/ocsigen/js_of_ocaml/issues/2039))\n- **WebAssembly runtime fixes** for method lookup functionality by [Jérôme Vouillon](https://github.com/vouillon) ([#2038](https://github.com/ocsigen/js_of_ocaml/issues/2038))\n- **Benchmark infrastructure improvements** disabling WebAssembly baseline compiler to focus on optimized code performance testing ([#2036](https://github.com/ocsigen/js_of_ocaml/issues/2036))\n- **CI maintenance** fixing ppx_css compatibility with updated sedlex version ([#2037](https://github.com/ocsigen/js_of_ocaml/issues/2037))\n- **Global dead code elimination enhancement** improving IsInt test handling by [Jérôme Vouillon](https://github.com/vouillon) ([#2046](https://github.com/ocsigen/js_of_ocaml/issues/2046))\n- **Function call optimization** for statically known functions in WebAssembly compilation ([#2044](https://github.com/ocsigen/js_of_ocaml/issues/2044))\n- **Arity propagation feature** merged for improved cross-compilation unit optimization enabling better function inlining ([#1594](https://github.com/ocsigen/js_of_ocaml/issues/1594))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on WebAssembly performance optimization and modern browser API integration", "emerging_trends": "- **WebAssembly performance focus** with multiple merged PRs targeting type analysis, integer optimizations, and function call improvements suggesting priority on WASM backend efficiency\n- **Modern web API integration** continuing with addition of `window.matchMedia` following established pattern of expanding DOM HTML API coverage for responsive web development\n- **Runtime modernization** trend replacing custom implementations with native browser APIs (TextEncoder/TextDecoder) for better performance and maintenance\n- **Build toolchain updates** upgrading to newer versions of dependencies like ppxlib 0.36 maintaining compatibility with evolving OCaml ecosystem\n- **Cross-compilation unit optimization** with arity propagation enabling better performance in separate compilation scenarios", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Core team members focused on performance optimizations and API enhancements", "contributors": "- [@hhugo](https://github.com/hhugo) contributed build system improvements with ppxlib 0.36 support ([#2043](https://github.com/ocsigen/js_of_ocaml/issues/2043)), method lookup cache fixes ([#2039](https://github.com/ocsigen/js_of_ocaml/issues/2039)), testing infrastructure updates ([#2035](https://github.com/ocsigen/js_of_ocaml/issues/2035)), and merged the major arity propagation feature ([#1594](https://github.com/ocsigen/js_of_ocaml/issues/1594))\n- [Jérôme Vouillon](https://github.com/vouillon) implemented multiple WebAssembly optimizations including type analysis improvements ([#2041](https://github.com/ocsigen/js_of_ocaml/issues/2041)), equality optimizations ([#2040](https://github.com/ocsigen/js_of_ocaml/issues/2040)), method lookup fixes ([#2038](https://github.com/ocsigen/js_of_ocaml/issues/2038)), dead code elimination enhancements ([#2046](https://github.com/ocsigen/js_of_ocaml/issues/2046)), function call optimizations ([#2044](https://github.com/ocsigen/js_of_ocaml/issues/2044)), benchmark improvements ([#2036](https://github.com/ocsigen/js_of_ocaml/issues/2036)), CI fixes ([#2037](https://github.com/ocsigen/js_of_ocaml/issues/2037)), and major integer optimizations ([#2032](https://github.com/ocsigen/js_of_ocaml/issues/2032))\n- [@toastal](https://github.com/toastal) implemented DOM HTML API enhancements adding window.matchMedia and MediaQueryList support closing a long-standing feature request ([#2017](https://github.com/ocsigen/js_of_ocaml/issues/2017))\n- [Ty Overby](https://github.com/TyOverby) participated in Safari WebAssembly compatibility discussions and testing ([#1975](https://github.com/ocsigen/js_of_ocaml/issues/1975))\n- [Armaël Guéneau](https://github.com/Armael) originally requested the window.matchMedia feature in 2017 ([#608](https://github.com/ocsigen/js_of_ocaml/issues/608))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 23, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-06-02 to 2025-06-08", "start_commit": "d9588a6705242ca9921035e5a84da752c91de708", "end_commit": "11e0e52273b25c4dd92703dd684eddbccea9de87", "brief_summary": "Release preparation with OCaml 5.4 support, WebAssembly optimizations, and DOM API additions to js_of_ocaml", "new_features_summary": "OCaml 5.4 support, WebAssembly optimizations, DataView bigarrays implementation, matchMedia API, and string constants optimization", "new_features": "- **OCaml 5.4 support** with runtime primitives and compiler compatibility changes ([#2030](https://github.com/ocsigen/js_of_ocaml/issues/2030))\n- **WebAssembly integer optimizations** avoiding ref.i31/i31.get_s for better V8 performance ([#2032](https://github.com/ocsigen/js_of_ocaml/issues/2032))\n- **DataView primitives for WebAssembly bigarrays** improving performance by optimizing typed array access from Wasm ([#1979](https://github.com/ocsigen/js_of_ocaml/issues/1979))\n- **Imported string constants mechanism** for WebAssembly using JS String Builtins proposal instead of launcher script storage ([#2022](https://github.com/ocsigen/js_of_ocaml/issues/2022))\n- **window.matchMedia and MediaQueryList API** added to DOM bindings for responsive web development ([#2017](https://github.com/ocsigen/js_of_ocaml/issues/2017))\n- **WebAssembly effects disabling** via `--effects disabled` flag to avoid JavaScript function call costs with JSPI ([#2026](https://github.com/ocsigen/js_of_ocaml/issues/2026))\n- **Compiler optimization improvements** with more effective inlining passes and laziness increases for better code generation ([#2027](https://github.com/ocsigen/js_of_ocaml/issues/2027), [#2029](https://github.com/ocsigen/js_of_ocaml/issues/2029))\n- **Runtime method lookup fix** for WebAssembly addressing lookup failures ([#2034](https://github.com/ocsigen/js_of_ocaml/issues/2034))\n- **Benchmark infrastructure expansion** adding bigarrays, bin_prot, and lexifi-g2pp benchmarks for performance testing ([#2025](https://github.com/ocsigen/js_of_ocaml/issues/2025))", "activity_summary": "Active release preparation with 10 PRs merged focusing on WebAssembly optimizations and OCaml 5.4 compatibility", "activity": "- **Release preparation activities** by [@hhugo](https://github.com/hhugo) preparing version 5.4 with comprehensive changes across compiler and runtime ([#2030](https://github.com/ocsigen/js_of_ocaml/issues/2030))\n- **Cross-compilation unit arity propagation** merged after extensive testing and feedback from [@rickyvetter](https://github.com/rickyvetter) and [@TyOverby](https://github.com/TyOverby), enabling better optimization across compilation units ([#1594](https://github.com/ocsigen/js_of_ocaml/issues/1594))\n- **WebAssembly runtime improvements** with fixes to method lookup, string constant handling, and bigarray implementations by [Jérôme Vouillon](https://github.com/vouillon) ([#2033](https://github.com/ocsigen/js_of_ocaml/issues/2033), [#2034](https://github.com/ocsigen/js_of_ocaml/issues/2034))\n- **Compiler optimization enhancements** improving inlining effectiveness and dead code elimination passes to reach fixpoint faster ([#2027](https://github.com/ocsigen/js_of_ocaml/issues/2027))\n- **Performance testing infrastructure** expanded with additional benchmarks including mathematical computations and data serialization tests ([#2025](https://github.com/ocsigen/js_of_ocaml/issues/2025))", "discussions_summary": "Promise API integration discussion and WASM function export limitations explored", "notable_discussions": "- **Promise API integration proposal** by [Olivier Nicole](https://github.com/OlivierNicole) to adopt Funkyworker's type-safe Promise API implementation, with discussion from [@dbuenzli](https://github.com/dbuenzli) about existing brr bindings ([#2031](https://github.com/ocsigen/js_of_ocaml/issues/2031))\n- **WASM function export limitations** discussed by [NSlash951](https://github.com/myfreess) regarding static export definitions versus dynamic OCaml function allocation, with technical explanation from [Jérôme Vouillon](https://github.com/vouillon) ([#2028](https://github.com/ocsigen/js_of_ocaml/issues/2028))", "trends_summary": "Focus on WebAssembly performance optimization and OCaml 5.x ecosystem compatibility improvements", "emerging_trends": "- **WebAssembly optimization focus** with multiple PRs targeting V8 performance improvements through DataView primitives and integer optimizations\n- **OCaml 5.x compatibility work** with infrastructure changes to support new language features and runtime primitives\n- **Performance benchmarking expansion** adding comprehensive test suites for mathematical and data processing workloads\n- **Build system integration improvements** with better support for separate compilation and cross-module optimization", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two primary contributors [@hhugo](https://github.com/hhugo) and [Jérôme Vouillon](https://github.com/vouillon) handled most development with [@toastal](https://github.com/toastal) contributing DOM API additions", "contributors": "- [@hhugo](https://github.com/hhugo) led release preparation implementing OCaml 5.4 support ([#2030](https://github.com/ocsigen/js_of_ocaml/issues/2030)), compiler optimizations ([#2027](https://github.com/ocsigen/js_of_ocaml/issues/2027), [#2029](https://github.com/ocsigen/js_of_ocaml/issues/2029)), inlining cache improvements ([#2014](https://github.com/ocsigen/js_of_ocaml/issues/2014)), and merged cross-compilation arity propagation ([#1594](https://github.com/ocsigen/js_of_ocaml/issues/1594))\n- [Jérôme Vouillon](https://github.com/vouillon) implemented WebAssembly optimizations including integer performance improvements ([#2032](https://github.com/ocsigen/js_of_ocaml/issues/2032)), DataView bigarray implementation ([#1979](https://github.com/ocsigen/js_of_ocaml/issues/1979)), string constants mechanism ([#2022](https://github.com/ocsigen/js_of_ocaml/issues/2022)), effects disabling feature ([#2026](https://github.com/ocsigen/js_of_ocaml/issues/2026)), runtime fixes ([#2033](https://github.com/ocsigen/js_of_ocaml/issues/2033), [#2034](https://github.com/ocsigen/js_of_ocaml/issues/2034)), and expanded benchmark suite ([#2025](https://github.com/ocsigen/js_of_ocaml/issues/2025))\n- [@toastal](https://github.com/toastal) contributed DOM API enhancements by adding window.matchMedia and MediaQueryList support for responsive web development ([#2017](https://github.com/ocsigen/js_of_ocaml/issues/2017))\n- [NSlash951](https://github.com/myfreess) initiated discussion about WASM function export capabilities ([#2028](https://github.com/ocsigen/js_of_ocaml/issues/2028))\n- [Olivier Nicole](https://github.com/OlivierNicole) proposed Promise API integration exploring type-safe JavaScript Promise bindings ([#2031](https://github.com/ocsigen/js_of_ocaml/issues/2031))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 22, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-05-26 to 2025-06-01", "start_commit": "3b5660d3d8b1ceaf230211ec04c3584a3931328e", "end_commit": "ea538fb69d7db4bb18ea60f90abfdebd4a030d15", "brief_summary": "Compiler optimization improvements with enhanced inlining, effects handling, and new DOM API additions for media queries", "new_features_summary": "DOM MediaQueryList API support, improved inlining algorithm, and effects optimization for Wasm compilation", "new_features": "- **DOM API enhancement** with `window.matchMedia` and `MediaQueryList` support by [@toastal](https://github.com/toastal) for responsive web applications ([#2017](https://github.com/ocsigen/js_of_ocaml/issues/2017))\n- **Inlining algorithm improvement** by [Jérôme Vouillon](https://github.com/vouillon) ensuring inner closures are processed before their enclosing closures for better optimization results ([#2018](https://github.com/ocsigen/js_of_ocaml/issues/2018))\n- **Effects optimization** in double translation mode by [Jérôme Vouillon](https://github.com/vouillon) avoiding introduction of unused blocks during CPS transformation ([#2021](https://github.com/ocsigen/js_of_ocaml/issues/2021))\n- **Wasm effects control** with new `--effects disabled` flag by [Jérôme Vouillon](https://github.com/vouillon) for performance optimization when JSPI stack switching creates overhead ([#2026](https://github.com/ocsigen/js_of_ocaml/issues/2026))\n- **Wasm string optimization** by [Jérôme Vouillon](https://github.com/vouillon) using imported string constants mechanism instead of JavaScript launcher script storage ([#2022](https://github.com/ocsigen/js_of_ocaml/issues/2022))\n- **Recursive inlining** implementation by [Jérôme Vouillon](https://github.com/vouillon) allowing multiple inlining passes in a single optimization round for better performance ([#2027](https://github.com/ocsigen/js_of_ocaml/issues/2027))\n- **CI infrastructure improvement** removing Dune version pinning for more flexible builds ([ea538fb](https://github.com/ocsigen/js_of_ocaml/commit/ea538fb69d7db4bb18ea60f90abfdebd4a030d15))", "activity_summary": "Compiler infrastructure improvements including invariant checking, code cleanup, and benchmark additions", "activity": "- **Developer tooling enhancement** by [@hhugo](https://github.com/hhugo) adding invariant checks to CI pipeline ensuring code quality ([#2023](https://github.com/ocsigen/js_of_ocaml/issues/2023))\n- **Benchmark suite expansion** by [Jérôme Vouillon](https://github.com/vouillon) adding comprehensive tests including bigarray benchmarks for performance regression detection ([#2025](https://github.com/ocsigen/js_of_ocaml/issues/2025))\n- **Code maintenance** by [@hhugo](https://github.com/hhugo) removing unused code in compiler modules and performing general cleanup ([#2024](https://github.com/ocsigen/js_of_ocaml/issues/2024), [#2015](https://github.com/ocsigen/js_of_ocaml/issues/2015))\n- **Compiler refactoring** by [@hhugo](https://github.com/hhugo) with experimental internal API changes currently in draft status ([#2019](https://github.com/ocsigen/js_of_ocaml/issues/2019))\n- **Testing infrastructure** by [Jérôme Vouillon](https://github.com/vouillon) adding JavaScriptCore (jsc) test execution for broader JavaScript engine compatibility validation ([#1991](https://github.com/ocsigen/js_of_ocaml/issues/1991))", "discussions_summary": "Browser compatibility issues and inlining optimization strategies discussed", "notable_discussions": "- **WebAssembly Safari compatibility** discussion between [Ty Overby](https://github.com/TyOverby) and [Jérôme Vouillon](https://github.com/vouillon) regarding validation failures in Safari 18.4, with confirmation of fixes in Safari Tech Preview ([#1975](https://github.com/ocsigen/js_of_ocaml/issues/1975))\n- **Inlining optimization strategy** by [@hhugo](https://github.com/hhugo) proposing recursive inlining in single passes to improve compilation efficiency, leading to implementation in [#2027](https://github.com/ocsigen/js_of_ocaml/issues/2027) ([#2020](https://github.com/ocsigen/js_of_ocaml/issues/2020))", "trends_summary": "Performance optimization focus with compiler passes improvement and Wasm-specific enhancements", "emerging_trends": "- **Wasm compilation optimization** trend with multiple PRs targeting WebAssembly performance including string handling, effects control, and JavaScript interop improvements\n- **Compiler optimization pass redesign** pattern focusing on more efficient single-pass algorithms rather than multiple iterative passes\n- **Cross-browser compatibility focus** with enhanced testing across JavaScript engines (Node.js, JavaScriptCore) and WebAssembly runtime environments", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three active contributors focused on compiler optimization, API enhancements, and infrastructure improvements", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented multiple compiler optimizations including inlining improvements ([#2018](https://github.com/ocsigen/js_of_ocaml/issues/2018)), effects handling ([#2021](https://github.com/ocsigen/js_of_ocaml/issues/2021)), Wasm optimizations ([#2022](https://github.com/ocsigen/js_of_ocaml/issues/2022), [#2026](https://github.com/ocsigen/js_of_ocaml/issues/2026)), recursive inlining ([#2027](https://github.com/ocsigen/js_of_ocaml/issues/2027)), and expanded benchmarks ([#2025](https://github.com/ocsigen/js_of_ocaml/issues/2025))\n- [@hhugo](https://github.com/hhugo) maintained code quality with invariant checking ([#2023](https://github.com/ocsigen/js_of_ocaml/issues/2023)), performed code cleanup ([#2024](https://github.com/ocsigen/js_of_ocaml/issues/2024), [#2015](https://github.com/ocsigen/js_of_ocaml/issues/2015)), and initiated experimental API changes ([#2019](https://github.com/ocsigen/js_of_ocaml/issues/2019))\n- [@toastal](https://github.com/toastal) contributed DOM API enhancements with MediaQueryList support ([#2017](https://github.com/ocsigen/js_of_ocaml/issues/2017))\n- [Ty Overby](https://github.com/TyOverby) reported and helped resolve WebAssembly compatibility issues with Safari ([#1975](https://github.com/ocsigen/js_of_ocaml/issues/1975))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 21, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-05-19 to 2025-05-25", "start_commit": "4560e503a7b0fac1c7433412f68a6f171443ba60", "end_commit": "97aeb364859b2e6b3c20327b627eda1d5504ebe1", "brief_summary": "Compiler improvements with rewritten inlining pass, UTF-16 runtime fix, and build system updates", "new_features_summary": "Major compiler inlining pass rewrite and UTF-16 encoding bug fix in runtime", "new_features": "- **Compiler inlining pass rewrite** by [Jérôme Vouillon](https://github.com/vouillon) delivering performance improvements up to 50-80% reduction in benchmarking times for Bonsai applications ([#1935](https://github.com/ocsigen/js_of_ocaml/issues/1935))\n- **UTF-16 to UTF-8 encoding fix** in `caml_utf8_of_utf16` runtime function correcting high surrogate handling by [@hhugo](https://github.com/hhugo) ([#2008](https://github.com/ocsigen/js_of_ocaml/issues/2008))\n- **Global dead code elimination fix** for tail call preservation preventing incorrect removal of code in presence of dead tail calls ([#2010](https://github.com/ocsigen/js_of_ocaml/issues/2010))\n- **Compiler driver refactoring** merging effects and exact_calls passes for improved compilation pipeline efficiency ([#2012](https://github.com/ocsigen/js_of_ocaml/issues/2012))\n- **Build system update** to Dune 3.19 with updated workspace and project configuration ([#1957](https://github.com/ocsigen/js_of_ocaml/issues/1957))", "activity_summary": "Continued work on performance optimizations and compiler maintenance with several small fixes", "activity": "- **Timing improvements** with enhanced compilation performance measurements and debugging support ([#2005](https://github.com/ocsigen/js_of_ocaml/issues/2005), [#2011](https://github.com/ocsigen/js_of_ocaml/issues/2011))\n- **Code cleanup** removing dead code from compiler modules and improving maintainability ([#2015](https://github.com/ocsigen/js_of_ocaml/issues/2015))\n- **Cache optimization** for full size computation in inline operations improving memory usage ([#2014](https://github.com/ocsigen/js_of_ocaml/issues/2014))\n- **Build system fixes** addressing warn-error issues under .js dune special directory ([#2007](https://github.com/ocsigen/js_of_ocaml/issues/2007))\n- **Test updates** including new tail call tests and adjustments to compiler test expectations ([tailcall.ml](https://github.com/ocsigen/js_of_ocaml/commit/97aeb364859b2e6b3c20327b627eda1d5504ebe1))", "discussions_summary": "Active bug report discussion about WebAssembly event handler reliability issues", "notable_discussions": "- **WebAssembly event handler timing issue** reported by [Bikal Lem](https://github.com/bikallem) where WASM code executes after DOM load events, causing inconsistent UI rendering with ocaml-vdom ([#1948](https://github.com/ocsigen/js_of_ocaml/issues/1948)). [Jérôme Vouillon](https://github.com/vouillon) provided detailed analysis suggesting module-based script loading with top-level awaits as potential solution\n- **UTF-16 encoding bug report** by [Bao Zhiyuan](https://github.com/bzy-debug) identifying incorrect surrogate pair handling in runtime, quickly addressed with fix and comprehensive test coverage ([#2006](https://github.com/ocsigen/js_of_ocaml/issues/2006))", "trends_summary": "Focus on performance optimization and runtime correctness with enhanced testing coverage", "emerging_trends": "- **Performance-focused development** with multiple optimization passes being rewritten and benchmarked for real-world applications like Bonsai\n- **Enhanced WebAssembly support** addressing timing and execution model differences between JavaScript and WASM compilation targets\n- **Runtime robustness improvements** with better Unicode handling and comprehensive test coverage for edge cases\n- **Compilation pipeline optimization** streamlining passes and improving build system integration with modern Dune versions", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Primary development by Hugo Heuzard with significant performance contribution from Jérôme Vouillon", "contributors": "- [@hhugo](https://github.com/hhugo) implemented UTF-16 encoding fixes ([#2008](https://github.com/ocsigen/js_of_ocaml/issues/2008)), refactored compiler driver ([#2012](https://github.com/ocsigen/js_of_ocaml/issues/2012)), improved timing infrastructure ([#2005](https://github.com/ocsigen/js_of_ocaml/issues/2005), [#2011](https://github.com/ocsigen/js_of_ocaml/issues/2011)), and maintained build system updates ([#1957](https://github.com/ocsigen/js_of_ocaml/issues/1957), [#2007](https://github.com/ocsigen/js_of_ocaml/issues/2007))\n- [Jérôme Vouillon](https://github.com/vouillon) delivered the comprehensive inlining pass rewrite providing substantial performance improvements for large applications ([#1935](https://github.com/ocsigen/js_of_ocaml/issues/1935)) and provided technical analysis for WebAssembly timing issues ([#1948](https://github.com/ocsigen/js_of_ocaml/issues/1948))\n- [Bao Zhiyuan](https://github.com/bzy-debug) reported UTF-16 surrogate handling bug with detailed technical analysis and test cases ([#2006](https://github.com/ocsigen/js_of_ocaml/issues/2006))\n- [Bikal Lem](https://github.com/bikallem) reported and provided debugging information for WebAssembly event handler execution timing issues affecting ocaml-vdom integration ([#1948](https://github.com/ocsigen/js_of_ocaml/issues/1948))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 20, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-05-12 to 2025-05-18", "start_commit": "3aef7c4895959b7521fb925edd9bbbde479cea9f", "end_commit": "246df644334aa97103d1051aec128337ea1868f9", "brief_summary": "Major compiler optimizations and Wasm binary output improvements with new debugging features", "new_features_summary": "New --debug var flag, Wasm binary output instead of text, enhanced optimization passes, and improved error handling", "new_features": "- New `--debug var` flag for compiler to emit unique variable names in pretty mode for better debugging ([#1986](https://github.com/ocsigen/js_of_ocaml/pull/1986))\n- **Wasm binary output** now default instead of text format for faster compilation and parsing ([#2000](https://github.com/ocsigen/js_of_ocaml/pull/2000), [#2003](https://github.com/ocsigen/js_of_ocaml/pull/2003))\n- **Sourcemap support** for Wasm binary format with proper field ordering following spec ([#2002](https://github.com/ocsigen/js_of_ocaml/issues/2002), [#2003](https://github.com/ocsigen/js_of_ocaml/pull/2003))\n- **Werror flag** enabled for the jsoo codebase to treat warnings as errors ([#1999](https://github.com/ocsigen/js_of_ocaml/pull/1999))\n- **Profile handling refactoring** with new Profile module replacing Driver.profile ([#1993](https://github.com/ocsigen/js_of_ocaml/pull/1993))\n- **Optimization pass reordering** for better fixpoint convergence and faster compilation ([#2001](https://github.com/ocsigen/js_of_ocaml/pull/2001))\n- **Improved variable assignment** with better collision handling and no need for global name reservation ([#1986](https://github.com/ocsigen/js_of_ocaml/pull/1986))\n- **Fast free variable analysis** implementation for JS code generation ([#1989](https://github.com/ocsigen/js_of_ocaml/pull/1989))\n- **Toplevel fix** for when use-js-strings is disabled, ensuring proper string conversion ([#1997](https://github.com/ocsigen/js_of_ocaml/pull/1997))", "activity_summary": "Intensive performance optimization work with compiler speedups and Wasm improvements focusing on DataView primitives", "activity": "- **Compiler performance improvements** across multiple passes including faster constant sharing ([#1988](https://github.com/ocsigen/js_of_ocaml/pull/1988)), queue access optimizations ([#1985](https://github.com/ocsigen/js_of_ocaml/pull/1985)), and JS freevars/variable coloring speedups ([#1984](https://github.com/ocsigen/js_of_ocaml/pull/1984))\n- **Wasm runtime enhancements** using DataView primitives for bigarray implementation instead of typed arrays for better V8 optimization ([#1979](https://github.com/ocsigen/js_of_ocaml/pull/1979))\n- **JavaScript hash function relocation** from wasm:js-string to bindings for Firefox compatibility ([#1990](https://github.com/ocsigen/js_of_ocaml/pull/1990))\n- **Code quality improvements** including deprecation of polymorphic comparison functions ([#1981](https://github.com/ocsigen/js_of_ocaml/pull/1981)), deadcode removal ([#2004](https://github.com/ocsigen/js_of_ocaml/pull/2004)), and test adjustments ([#1973](https://github.com/ocsigen/js_of_ocaml/pull/1973))\n- **Runtime bug fixes** for bigarray hashing consistency across architectures ([#1977](https://github.com/ocsigen/js_of_ocaml/pull/1977)) and deadcode elimination of cyclic values ([#1978](https://github.com/ocsigen/js_of_ocaml/pull/1978))\n- **Testing infrastructure** improvements with new bigarray tests ([test_bigarray.ml](https://github.com/ocsigen/js_of_ocaml/commit/51bf9cc764462bea28ed758a969f4c2d20fc8000)) and benchmark adjustments for reduced noise", "discussions_summary": "Active discussions on Safari WebAssembly compatibility and internal performance testing feedback", "notable_discussions": "- **Safari 18.4 WebAssembly validation issue** reported by [Ty Overby](https://github.com/TyOverby) with tail call function type mismatches, confirmed resolved in Safari Tech Preview ([#1975](https://github.com/ocsigen/js_of_ocaml/issues/1975))\n- **Performance testing feedback** from [Ricky Vetter](https://github.com/rickyvetter) showing 50-80% reduction in Bonsai benchmark times with the inlining rewrite, though some compilation slowdowns noted for specific programs ([#1935](https://github.com/ocsigen/js_of_ocaml/pull/1935))\n- **Benchmark CI infrastructure** discussions between [@hhugo](https://github.com/hhugo) and [Olivier Nicole](https://github.com/OlivierNicole) regarding missing benchmark jobs and contact points ([#1971](https://github.com/ocsigen/js_of_ocaml/pull/1971))", "trends_summary": "Focus on compilation speed and Wasm output optimization with systematic performance improvements", "emerging_trends": "- **Compilation speed optimization** is the primary focus with multiple PRs targeting different bottlenecks in the compilation pipeline\n- **Wasm binary format adoption** as the new default over text format for improved toolchain performance\n- **Systematic performance profiling** with concrete benchmark results guiding optimization decisions\n- **Code quality hardening** through deprecation of problematic patterns and enabling stricter warnings\n- **Cross-browser WebAssembly compatibility** becoming more important with Safari-specific issues being tracked and resolved", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two main contributors driving extensive compiler optimizations and WebAssembly improvements", "contributors": "- [@hhugo](https://github.com/hhugo) led most optimization work including compiler performance improvements ([#1984](https://github.com/ocsigen/js_of_ocaml/pull/1984), [#1985](https://github.com/ocsigen/js_of_ocaml/pull/1985), [#1986](https://github.com/ocsigen/js_of_ocaml/pull/1986), [#1988](https://github.com/ocsigen/js_of_ocaml/pull/1988), [#1989](https://github.com/ocsigen/js_of_ocaml/pull/1989), [#1993](https://github.com/ocsigen/js_of_ocaml/pull/1993)), Wasm output improvements ([#1992](https://github.com/ocsigen/js_of_ocaml/pull/1992), [#2001](https://github.com/ocsigen/js_of_ocaml/pull/2001), [#2005](https://github.com/ocsigen/js_of_ocaml/pull/2005)), and code quality enhancements ([#1981](https://github.com/ocsigen/js_of_ocaml/pull/1981), [#1999](https://github.com/ocsigen/js_of_ocaml/pull/1999), [#2004](https://github.com/ocsigen/js_of_ocaml/pull/2004))\n- [Jérôme Vouillon](https://github.com/vouillon) focused on WebAssembly runtime improvements ([#1979](https://github.com/ocsigen/js_of_ocaml/pull/1979), [#1990](https://github.com/ocsigen/js_of_ocaml/pull/1990)), binary output implementation ([#2000](https://github.com/ocsigen/js_of_ocaml/pull/2000), [#2003](https://github.com/ocsigen/js_of_ocaml/pull/2003)), runtime bug fixes ([#1977](https://github.com/ocsigen/js_of_ocaml/pull/1977), [#1978](https://github.com/ocsigen/js_of_ocaml/pull/1978)), and toplevel fixes ([#1997](https://github.com/ocsigen/js_of_ocaml/pull/1997))\n- [Ty Overby](https://github.com/TyOverby) reported Safari WebAssembly compatibility issues ([#1975](https://github.com/ocsigen/js_of_ocaml/issues/1975)) and provided performance testing feedback on compiler improvements ([#1935](https://github.com/ocsigen/js_of_ocaml/pull/1935), [#1988](https://github.com/ocsigen/js_of_ocaml/pull/1988))\n- [Ricky Vetter](https://github.com/rickyvetter) provided extensive internal testing feedback showing significant Bonsai benchmark improvements with the inlining rewrite ([#1935](https://github.com/ocsigen/js_of_ocaml/pull/1935))\n- [Olivier Nicole](https://github.com/OlivierNicole) participated in performance analysis discussions and benchmark infrastructure coordination ([#1971](https://github.com/ocsigen/js_of_ocaml/pull/1971), [#1645](https://github.com/ocsigen/js_of_ocaml/pull/1645))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 19, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-05-05 to 2025-05-11", "start_commit": "b6edf9f200e9943e60529c1ba5ef8aede8d164cd", "end_commit": "377f56f0ffe8e04761d68d863e051924aa527214", "brief_summary": "Major compiler optimization improvements with new inlining pass and enhanced optimization scheduling", "new_features_summary": "Compiler optimization overhaul with improved scheduling, block merging, and enhanced deadcode elimination", "new_features": "- **Improved optimization pass scheduling** by [Jérôme Vouillon](https://github.com/vouillon) with smarter algorithms that stop optimization passes when they become unproductive, reducing compilation time ([#1962](https://github.com/ocsigen/js_of_ocaml/issues/1962))\n- **Enhanced deadcode elimination optimization** by [Jérôme Vouillon](https://github.com/vouillon) making the Pure_fun.f function more effective at identifying unused code ([#1963](https://github.com/ocsigen/js_of_ocaml/issues/1963))\n- **New block merging optimization** by [@hhugo](https://github.com/hhugo) that automatically merges unnecessary control flow blocks, reducing intermediate representation size ([#1967](https://github.com/ocsigen/js_of_ocaml/issues/1967))\n- **Improved coloring optimization performance** by [@hhugo](https://github.com/hhugo) with algorithm speedups that remove bottlenecks in the coloring pass ([#1971](https://github.com/ocsigen/js_of_ocaml/issues/1971))\n- **More efficient bytecode parsing** by [Jérôme Vouillon](https://github.com/vouillon) generating fewer block parameters during compilation, improving memory usage ([#1972](https://github.com/ocsigen/js_of_ocaml/issues/1972))\n- **Compact program representation** by [@hhugo](https://github.com/hhugo) with compressed Addr.t structures for sparse block addresses, reducing memory consumption by 3-5% ([#1968](https://github.com/ocsigen/js_of_ocaml/issues/1968))\n- **Enhanced static evaluation** of integer division and modulo operations by [@hhugo](https://github.com/hhugo) for better compile-time optimization ([c9ac0cf](https://github.com/ocsigen/js_of_ocaml/commit/c9ac0cf00d34c875024acfb342cc4b369ede626f))\n- **Updated example configurations** with separate compilation mode for boulderdash, graph_viewer, hyperbolic, and webgl examples, demonstrating new build system capabilities ([#1974](https://github.com/ocsigen/js_of_ocaml/issues/1974))", "activity_summary": "Bug fixes for WebAssembly validation and effects handling, with ongoing work on performance optimizations", "activity": "- **WebAssembly validation fixes** for Safari 18.4 compatibility by [Ty Overby](https://github.com/TyOverby), addressing tail call return type mismatches that prevented WASM programs from running ([#1975](https://github.com/ocsigen/js_of_ocaml/issues/1975))\n- **Effects and exception handling bug resolution** by [John Jackson](https://github.com/johnridesabike) fixing Js_error.raise_ behavior when effects are enabled with excwrap disabled ([#1970](https://github.com/ocsigen/js_of_ocaml/issues/1970))\n- **Integer conversion precision fix** by [NSlash951](https://github.com/myfreess) correcting Int32.to_int behavior in WebAssembly mode for proper sign bit handling ([#1955](https://github.com/ocsigen/js_of_ocaml/issues/1955))\n- **Event handler execution investigation** by [Bikal Lem](https://github.com/bikallem) identifying asynchronous WebAssembly loading timing issues affecting DOM event handlers ([#1948](https://github.com/ocsigen/js_of_ocaml/issues/1948))\n- **Continued WAMR runtime integration** work by [@nickbetteridge](https://github.com/nickbetteridge) with ongoing debugging of garbage collection and type casting issues ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on compiler performance improvements and WebAssembly runtime stability", "emerging_trends": "- **Compiler optimization focus** with multiple PRs targeting performance improvements in optimization passes, indicating a coordinated effort to enhance compilation speed and efficiency\n- **WebAssembly runtime maturation** with several bug reports and fixes for WASM-specific issues, showing increased adoption and testing of WebAssembly compilation mode\n- **Cross-browser compatibility emphasis** particularly for Safari WebAssembly support, addressing validation and runtime issues to ensure broader platform support\n- **Build system modernization** through the adoption of separate compilation modes in examples, demonstrating improved build tooling capabilities", "issues_summary": "Binaryen flag passing feature request available for new contributors", "good_first_issues": "- **Binaryen flags integration** requested by [Olivier Nicole](https://github.com/OlivierNicole) to add `--binaryen-opt=<flags>` support for passing custom flags to Binaryen invocations, particularly needed for `--enable multimemory` when linking Emscripten modules ([#1956](https://github.com/ocsigen/js_of_ocaml/issues/1956))", "contributors_summary": "Core team collaboration with external contributions for bug reports and feature requests", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) led major compiler optimization improvements including optimization scheduling ([#1962](https://github.com/ocsigen/js_of_ocaml/issues/1962)), deadcode enhancement ([#1963](https://github.com/ocsigen/js_of_ocaml/issues/1963)), and bytecode parsing efficiency ([#1972](https://github.com/ocsigen/js_of_ocaml/issues/1972)), while providing technical guidance on WebAssembly issues\n- [@hhugo](https://github.com/hhugo) implemented performance optimizations including block merging ([#1967](https://github.com/ocsigen/js_of_ocaml/issues/1967)), coloring speedups ([#1971](https://github.com/ocsigen/js_of_ocaml/issues/1971)), compact program representation ([#1968](https://github.com/ocsigen/js_of_ocaml/issues/1968)), and example fixes ([#1974](https://github.com/ocsigen/js_of_ocaml/issues/1974))\n- [Ty Overby](https://github.com/TyOverby) reported and helped resolve Safari WebAssembly validation issues affecting tail call compatibility ([#1975](https://github.com/ocsigen/js_of_ocaml/issues/1975))\n- [John Jackson](https://github.com/johnridesabike) identified and helped fix effects-related exception handling bugs in WebAssembly mode ([#1970](https://github.com/ocsigen/js_of_ocaml/issues/1970))\n- [NSlash951](https://github.com/myfreess) reported integer conversion precision issues in WebAssembly compilation ([#1955](https://github.com/ocsigen/js_of_ocaml/issues/1955))\n- [Bikal Lem](https://github.com/bikallem) investigated WebAssembly event handler timing issues and provided detailed debugging information ([#1948](https://github.com/ocsigen/js_of_ocaml/issues/1948))\n- [Olivier Nicole](https://github.com/OlivierNicole) proposed Binaryen flag passing enhancement for better Emscripten module linking support ([#1956](https://github.com/ocsigen/js_of_ocaml/issues/1956))\n- [@nickbetteridge](https://github.com/nickbetteridge) contributed ongoing research and debugging for WAMR runtime integration challenges ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 18, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-04-28 to 2025-05-04", "start_commit": null, "end_commit": null, "brief_summary": "Two new PRs opened for performance optimizations, one bug report resolved, and build system update merged", "new_features_summary": null, "new_features": null, "activity_summary": "Performance optimization PRs opened for reference unboxing and WASM improvements, build system updated to Dune 3.19", "activity": "- **Performance optimization initiatives** with two new draft PRs opened by [Jérôme Vouillon](https://github.com/vouillon) - reference unboxing improvements ([#1958](https://github.com/ocsigen/js_of_ocaml/issues/1958)) and WASM specialization for number comparisons and bigarray operations ([#1954](https://github.com/ocsigen/js_of_ocaml/issues/1954))\n- **Unboxing of function and block parameters** PR opened by [Jérôme Vouillon](https://github.com/vouillon) as draft implementation for compiler optimizations ([#1953](https://github.com/ocsigen/js_of_ocaml/issues/1953))\n- **Build system modernization** with [@hhugo](https://github.com/hhugo) updating the project to use Dune 3.19, affecting configuration across 20 files ([#1957](https://github.com/ocsigen/js_of_ocaml/issues/1957))\n- **Integer conversion bug** reported by [NSlash951](https://github.com/myfreess) regarding incorrect `Int32.to_int` behavior in `wasm_of_ocaml`, with technical discussion involving [Olivier Nicole](https://github.com/OlivierNicole) and [Jérôme Vouillon](https://github.com/vouillon) ([#1955](https://github.com/ocsigen/js_of_ocaml/issues/1955))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on compiler performance optimizations and WASM backend improvements", "emerging_trends": "- **Compiler optimization focus** with multiple parallel efforts on unboxing and specialization techniques for better performance ([#1958](https://github.com/ocsigen/js_of_ocaml/issues/1958), [#1954](https://github.com/ocsigen/js_of_ocaml/issues/1954), [#1953](https://github.com/ocsigen/js_of_ocaml/issues/1953))\n- **WASM backend development** continues with specialized optimizations for number operations and bigarray handling ([#1954](https://github.com/ocsigen/js_of_ocaml/issues/1954))\n- **Infrastructure maintenance** through build system updates keeping the project current with Dune ecosystem ([#1957](https://github.com/ocsigen/js_of_ocaml/issues/1957))", "issues_summary": "Feature request for Binaryen flag support in wasm_of_ocaml compilation", "good_first_issues": "- **Binaryen flags support** requested by [Olivier Nicole](https://github.com/OlivierNicole) to enable `--binaryen-opt=<flags>` parameter for WASM compilation, particularly for `--enable multimemory` when linking with Emscripten modules ([#1956](https://github.com/ocsigen/js_of_ocaml/issues/1956))", "contributors_summary": "Three core contributors active with PR development, issue reporting, and technical discussions", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) opened three draft PRs focused on compiler performance optimizations including reference unboxing ([#1958](https://github.com/ocsigen/js_of_ocaml/issues/1958)), WASM number comparison specialization ([#1954](https://github.com/ocsigen/js_of_ocaml/issues/1954)), and function parameter unboxing ([#1953](https://github.com/ocsigen/js_of_ocaml/issues/1953)), plus provided technical explanation on integer conversion behavior ([#1955](https://github.com/ocsigen/js_of_ocaml/issues/1955))\n- [@hhugo](https://github.com/hhugo) successfully merged build system improvements updating the project to Dune 3.19 across 20 configuration files ([#1957](https://github.com/ocsigen/js_of_ocaml/issues/1957))\n- [Olivier Nicole](https://github.com/OlivierNicole) opened a feature request for Binaryen flag support in WASM compilation ([#1956](https://github.com/ocsigen/js_of_ocaml/issues/1956)) and participated in technical discussion about integer conversion issues ([#1955](https://github.com/ocsigen/js_of_ocaml/issues/1955))\n- [NSlash951](https://github.com/myfreess) reported a bug with integer conversion behavior in `wasm_of_ocaml` including detailed reproduction steps ([#1955](https://github.com/ocsigen/js_of_ocaml/issues/1955))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 17, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-04-21 to 2025-04-27", "start_commit": "08f230f24401d335c2300ee754e2012e353c05ea", "end_commit": "4bafb2ee6cb2aff099f1e859cb66fc0c513bf53e", "brief_summary": "New --empty-sourcemap flag added, compiler optimizations improved, WebAssembly documentation restructured", "new_features_summary": "Added --empty-sourcemap flag for generating empty source maps and multiple compiler performance optimizations", "new_features": "- New `--empty-sourcemap` flag allows generation of empty source maps for whole-program compilation ([4bafb2ee](https://github.com/ocsigen/js_of_ocaml/commit/4bafb2ee6cb2aff099f1e859cb66fc0c513bf53e), [8e4294c6](https://github.com/ocsigen/js_of_ocaml/commit/8e4294c6c21ddd4aa257958c9eb1ab3421360125))\n- Enhanced **tailcall optimization** making it more robust across different code patterns ([2878e1ee](https://github.com/ocsigen/js_of_ocaml/commit/2878e1eef63bae5b592ca3ff58fa878fdcea7ba2))\n- New `--debug stats` option for compiler performance analysis ([8cf2a4c9](https://github.com/ocsigen/js_of_ocaml/commit/8cf2a4c905aab11e1a5a7ec575460ab710bf9a7a))\n- Improved **closure location tracking** in debug information and source maps ([acf8bb0a](https://github.com/ocsigen/js_of_ocaml/commit/acf8bb0a6c1b59a945ec6fb6a0df41977f17754a))\n- Runtime improvements using **DataView** for float-to-bit conversions replacing previous implementation ([9c157038](https://github.com/ocsigen/js_of_ocaml/commit/9c15703872174e513fa88a04c8cd3fdbd4c0a074), [08f230f2](https://github.com/ocsigen/js_of_ocaml/commit/08f230f24401d335c2300ee754e2012e353c05ea))\n- Optimized compiler passes with improved fix-point detection to stop earlier when optimizations become unproductive ([dc26f929](https://github.com/ocsigen/js_of_ocaml/commit/dc26f92939bdacf2697c59c9a090d0eb59b6f461), [a580d535](https://github.com/ocsigen/js_of_ocaml/commit/a580d5356796b765afca02319ffb038d3fac42ae), [d98717c5](https://github.com/ocsigen/js_of_ocaml/commit/d98717c518510953519312dd91874e47fb15e272))\n- Enhanced **variable printing** in debug mode for better development experience ([2878e1ee](https://github.com/ocsigen/js_of_ocaml/commit/2878e1eef63bae5b592ca3ff58fa878fdcea7ba2))\n- Updated **WebAssembly documentation** with simplified installation instructions referring to the official manual ([c3db3abf](https://github.com/ocsigen/js_of_ocaml/commit/c3db3abf5d1ebd8e69580a39cecb1a5e45a5eb7e))", "activity_summary": "Ongoing inlining pass rewrite discussion with performance testing and compiler optimizations across multiple modules", "activity": "- Major **inlining pass rewrite** being discussed in [#1935](https://github.com/ocsigen/js_of_ocaml/pull/1935) with extensive performance testing showing 50-80% reduction in Bonsai benchmark times, though some programs see 10-16% binary size increases\n- Compiler refinements across multiple modules including deadcode elimination, flow analysis, and code generation with improved debug statistics ([d48d67a6](https://github.com/ocsigen/js_of_ocaml/commit/d48d67a6df4db073647fd8c0ea4a7b18a277fe9e), [a292c4cc](https://github.com/ocsigen/js_of_ocaml/commit/a292c4cc5cdacc263fbe8a122bec44f1f03f2fcb), [4a7ea491](https://github.com/ocsigen/js_of_ocaml/commit/4a7ea491545e28edbd209d883941dde9616ff4ce))\n- **CI infrastructure** updates fixing setup-ocaml version issues ([f402eb34](https://github.com/ocsigen/js_of_ocaml/commit/f402eb34ea8a60198f5db1ee526ed9ae87bf4a05), [08f230f2](https://github.com/ocsigen/js_of_ocaml/commit/08f230f24401d335c2300ee754e2012e353c05ea))\n- Bytecode parsing improvements removing debug events after parsing for cleaner output ([92d0c42c](https://github.com/ocsigen/js_of_ocaml/commit/92d0c42c631a4c8577bb8896662cdd3a09878fb1))\n- Hash function normalization for NaN values improving runtime consistency ([821258dd](https://github.com/ocsigen/js_of_ocaml/commit/821258dde47ba6308c008eec30dba2d6e7c7d708))", "discussions_summary": "WebAssembly event handler bug discussion with timing issues and workaround solutions", "notable_discussions": "- **WebAssembly event handler timing issue** reported by [Bikal Lem](https://github.com/bikallem) in [#1948](https://github.com/ocsigen/js_of_ocaml/issues/1948) where event handlers don't execute consistently due to asynchronous WASM compilation, with [Jérôme Vouillon](https://github.com/vouillon) providing technical analysis and workaround solutions\n- **Inlining optimization strategy** debate in [#1935](https://github.com/ocsigen/js_of_ocaml/pull/1935) regarding performance trade-offs with [@hhugo](https://github.com/hhugo) noting compilation time increases but overall improvements, and discussion of inlining limits affecting specific benchmarks like fft and fannkuch_redux", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Jérôme Vouillon led compiler optimizations, with hhugo providing code reviews and CI fixes", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented the major **inlining pass rewrite** ([#1935](https://github.com/ocsigen/js_of_ocaml/pull/1935)), multiple compiler optimizations including tailcall improvements, debug statistics, closure location tracking, and various performance enhancements across 20+ commits during the week\n- [@hhugo](https://github.com/hhugo) provided extensive code reviews and testing feedback on the inlining rewrite ([#1935](https://github.com/ocsigen/js_of_ocaml/pull/1935)), implemented CI infrastructure fixes ([#1945](https://github.com/ocsigen/js_of_ocaml/issues/1945), [#1944](https://github.com/ocsigen/js_of_ocaml/issues/1944)), and contributed to **source map** improvements and documentation updates ([#1942](https://github.com/ocsigen/js_of_ocaml/issues/1942))\n- [Bikal Lem](https://github.com/bikallem) reported the WebAssembly event handler timing bug ([#1948](https://github.com/ocsigen/js_of_ocaml/issues/1948)) and engaged in technical discussions about workarounds for the asynchronous compilation issue", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 16, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-04-14 to 2025-04-20", "start_commit": "2b79e39b69148a67eef81d9489780a5ffee78335", "end_commit": "1fa0eca63bbf3befb245efc106d5bc041e972295", "brief_summary": "Compiler optimizations focused on performance improvements and bug fixes, with one major PR opened for inlining rewrites", "new_features_summary": "Compiler optimizations: faster compilation termination, empty block removal, and JavaScript simplification fixes", "new_features": "- **Compiler optimization termination** improvements to stop sooner when optimizations become unproductive, resulting in faster compilation times ([#1939](https://github.com/ocsigen/js_of_ocaml/issues/1939))\n- **Empty block removal** optimization in the compiler to generate cleaner output code ([#1934](https://github.com/ocsigen/js_of_ocaml/issues/1934))\n- **JavaScript simplification** bug fix that corrected incorrect simplification logic that could cause compilation issues ([#1940](https://github.com/ocsigen/js_of_ocaml/issues/1940))\n- **Performance improvements** for `Structure.is_merge_node` function reducing compilation bottlenecks ([#1938](https://github.com/ocsigen/js_of_ocaml/issues/1938))\n- **Polymorphic operations** usage reduction across the codebase for better performance ([#1941](https://github.com/ocsigen/js_of_ocaml/issues/1941))\n- **Benchmark reporting** enhancements to include generated code size metrics ([#1936](https://github.com/ocsigen/js_of_ocaml/issues/1936))", "activity_summary": "Active week with 6 performance-focused commits merged and ongoing discussions about bytes implementation and source map customization", "activity": "- **Performance optimization focus** across multiple compiler components with commits addressing compilation speed, code generation efficiency, and internal data structure performance improvements ([#1934](https://github.com/ocsigen/js_of_ocaml/issues/1934), [#1936](https://github.com/ocsigen/js_of_ocaml/issues/1936), [#1938](https://github.com/ocsigen/js_of_ocaml/issues/1938), [#1939](https://github.com/ocsigen/js_of_ocaml/issues/1939), [#1940](https://github.com/ocsigen/js_of_ocaml/issues/1940), [#1941](https://github.com/ocsigen/js_of_ocaml/issues/1941))\n- **Inlining pass rewrite** opened as a draft PR with substantial changes (1991 additions, 1799 deletions) affecting 15 files, representing ongoing work to improve optimization pipeline ([#1935](https://github.com/ocsigen/js_of_ocaml/issues/1935))\n- **Issue maintenance** activity with [@hhugo](https://github.com/hhugo) providing responses and guidance on several long-standing enhancement requests and bug reports", "discussions_summary": "Ongoing technical discussions about bytes implementation, source map customization, and Node.js error handling behavior", "notable_discussions": "- **Source map customization** discussion by [Jason Gross](https://github.com/JasonGross) about improving documentation and flexibility for `--source-map` flag usage, particularly regarding file relocation and renaming constraints ([#1613](https://github.com/ocsigen/js_of_ocaml/issues/1613))\n- **Bytes implementation simplification** proposal by [Jérôme Vouillon](https://github.com/vouillon) to replace current complex string representations with plain Uint8Arrays for better performance ([#1702](https://github.com/ocsigen/js_of_ocaml/issues/1702))\n- **Node.js error handling** issue discussion about js_of_ocaml generated code affecting Node's default error behavior in REPL environments ([#1277](https://github.com/ocsigen/js_of_ocaml/issues/1277))\n- **SharedArrayBuffer and Atomics** feature request by [Hyeseong Kim](https://github.com/cometkim) exploring WebAssembly-based plugin systems with shared memory for zero-copy deserialization ([#1930](https://github.com/ocsigen/js_of_ocaml/issues/1930))", "trends_summary": "Clear focus on compiler performance optimizations and addressing long-standing architectural improvements", "emerging_trends": "- **Compilation performance emphasis** with multiple commits and PRs targeting different aspects of compiler speed and efficiency improvements\n- **Code generation quality** improvements through better optimization passes and cleaner output generation\n- **WebAssembly ecosystem** interest growing with discussions about advanced features like SharedArrayBuffer for plugin architectures", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Jérôme Vouillon led development with all commits, while Hugo Heuzard provided issue maintenance and technical guidance", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented all compiler optimizations and performance improvements this week, including the optimization termination logic, empty block removal, JavaScript simplification fixes, and performance improvements ([#1934](https://github.com/ocsigen/js_of_ocaml/issues/1934), [#1936](https://github.com/ocsigen/js_of_ocaml/issues/1936), [#1938](https://github.com/ocsigen/js_of_ocaml/issues/1938), [#1939](https://github.com/ocsigen/js_of_ocaml/issues/1939), [#1940](https://github.com/ocsigen/js_of_ocaml/issues/1940), [#1941](https://github.com/ocsigen/js_of_ocaml/issues/1941)), and opened the substantial inlining pass rewrite ([#1935](https://github.com/ocsigen/js_of_ocaml/issues/1935))\n- [@hhugo](https://github.com/hhugo) provided technical support and guidance across multiple issues, responding to questions about source map usage ([#1613](https://github.com/ocsigen/js_of_ocaml/issues/1613)), bytes implementation approaches ([#1702](https://github.com/ocsigen/js_of_ocaml/issues/1702)), and Node.js error handling behavior ([#1277](https://github.com/ocsigen/js_of_ocaml/issues/1277))\n- [Jason Gross](https://github.com/JasonGross) contributed to discussions about improving source map documentation and customization options ([#1613](https://github.com/ocsigen/js_of_ocaml/issues/1613))\n- [Hyeseong Kim](https://github.com/cometkim) initiated discussion about SharedArrayBuffer and Atomics support for WebAssembly-based plugin architectures ([#1930](https://github.com/ocsigen/js_of_ocaml/issues/1930))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 15, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-04-07 to 2025-04-13", "start_commit": "dcf9970326112abbbe4b90d2ae9606b736faca60", "end_commit": "46f55cfe045cf817340b1e4d2ab1fc0c1e676388", "brief_summary": "Compiler improvements with static evaluation optimization, switch compilation enhancement, and bug fixes for documentation and runtime", "new_features_summary": "Compiler optimization for primitive static evaluation, enhanced switch compilation, and OCaml version support drop for <4.13", "new_features": "- **Enhanced compiler optimization** with more aggressive **static evaluation** of primitives including int32, nativeint, and float operations ([44e20f7c4aeea08f274c33c0292c0f69aab66317](https://github.com/ocsigen/js_of_ocaml/commit/44e20f7c4aeea08f274c33c0292c0f69aab66317), [4b2346790eca3f17ac857e47b83765c5b522b370](https://github.com/ocsigen/js_of_ocaml/commit/4b2346790eca3f17ac857e47b83765c5b522b370))\n- **Improved switch compilation** optimization for better performance in generated JavaScript ([44e20f7c4aeea08f274c33c0292c0f69aab66317](https://github.com/ocsigen/js_of_ocaml/commit/44e20f7c4aeea08f274c33c0292c0f69aab66317))\n- **CPS effects trampoline** primitive implementation for better effects handling ([bf43cc0ce0aa0d80fb6a6236855937cab03dc44d](https://github.com/ocsigen/js_of_ocaml/commit/bf43cc0ce0aa0d80fb6a6236855937cab03dc44d))\n- **Runtime optimization** with removal of unused primitives and improved primitive compilation ([e5fe85782a98e36f514c658afe28004642dceed9](https://github.com/ocsigen/js_of_ocaml/commit/e5fe85782a98e36f514c658afe28004642dceed9), [e7cc6c26df8cd6cfb80d7b5197a5ad3996487b6c](https://github.com/ocsigen/js_of_ocaml/commit/e7cc6c26df8cd6cfb80d7b5197a5ad3996487b6c))\n- **OCaml version support** dropped for versions below 4.13 ([967b503335915cb226ecd45aaff09eeeeeaa1776](https://github.com/ocsigen/js_of_ocaml/commit/967b503335915cb226ecd45aaff09eeeeeaa1776))\n- **Wasm backend improvements** including extended AST and free variable checking ([5e840e042e821e363dd6d0ae02dfdf680915c72e](https://github.com/ocsigen/js_of_ocaml/commit/5e840e042e821e363dd6d0ae02dfdf680915c72e), [3d71becb05c15d27a395622df46fe7fab452f205](https://github.com/ocsigen/js_of_ocaml/commit/3d71becb05c15d27a395622df46fe7fab452f205))\n- **Global flow analysis** performance improvements for faster compilation ([01d2711ccd8866dd1708fa85aee15f663883fe66](https://github.com/ocsigen/js_of_ocaml/commit/01d2711ccd8866dd1708fa85aee15f663883fe66))\n- **CPS effects runtime** with dedicated runtime implementation ([6e4b457ac2321755fd07bd57fd2b6876b78a3da4](https://github.com/ocsigen/js_of_ocaml/commit/6e4b457ac2321755fd07bd57fd2b6876b78a3da4))\n- **Benchmarking infrastructure** improvements with smaller docker images ([dcf9970326112abbbe4b90d2ae9606b736faca60](https://github.com/ocsigen/js_of_ocaml/commit/dcf9970326112abbbe4b90d2ae9606b736faca60), [f9aa37a70b5da53e0f130c297cb2a1c406a06ece](https://github.com/ocsigen/js_of_ocaml/commit/f9aa37a70b5da53e0f130c297cb2a1c406a06ece))\n- **CI improvements** with Cygwin compatibility fixes ([46f55cfe045cf817340b1e4d2ab1fc0c1e676388](https://github.com/ocsigen/js_of_ocaml/commit/46f55cfe045cf817340b1e4d2ab1fc0c1e676388), [7303d6c24be316a5c1fa26a89aaec9040d36a526](https://github.com/ocsigen/js_of_ocaml/commit/7303d6c24be316a5c1fa26a89aaec9040d36a526))\n- **Documentation fix** for `Sys_js.read_file` exception specification ([bed6548d4e13055ed2255fda762d8a6353d44b50](https://github.com/ocsigen/js_of_ocaml/commit/bed6548d4e13055ed2255fda762d8a6353d44b50))", "activity_summary": "Development focused on compiler optimization, WebAssembly runtime compatibility, and infrastructure improvements", "activity": "- **Compiler performance enhancements** with updated evaluation system for more primitive operations and improved switch compilation targeting better JavaScript generation\n- **WebAssembly support improvements** including runtime compatibility fixes for WAMR and extensive AST enhancements for better code generation\n- **Runtime refactoring** with cleaner primitive compilation and removal of legacy code affecting compilation speed and output quality\n- **Infrastructure improvements** including CI pipeline fixes for Windows/Cygwin compatibility and optimized benchmark Docker containers\n- **Code quality improvements** with better primitive handling, flow analysis optimizations, and cleaner separation between JavaScript and WebAssembly compilation paths\n- **Ongoing performance optimization work** with multiple draft PRs for lambda lifting improvements and aggressive optimization features under development ([#1886](https://github.com/ocsigen/js_of_ocaml/issues/1886), [#1885](https://github.com/ocsigen/js_of_ocaml/issues/1885))", "discussions_summary": "Technical discussions on WebAssembly runtime compatibility and SharedArrayBuffer/Atomics API integration", "notable_discussions": "- **WebAssembly runtime compatibility** discussion by [@nickbetteridge](https://github.com/nickbetteridge) regarding WAMR type mismatch failures and GC object pointer validation issues ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- **SharedArrayBuffer and Atomics API** feature request by [Hyeseong Kim](https://github.com/cometkim) exploring zero-copy deserialization for WASM-based ReScript compiler plugins using shared memory ([#1930](https://github.com/ocsigen/js_of_ocaml/issues/1930))\n- **ES6 compatibility** discussion with [@blueblueredred](https://github.com/blueblueredred) regarding static class fields and modern JavaScript feature usage policy ([#1906](https://github.com/ocsigen/js_of_ocaml/issues/1906))", "trends_summary": "Focus on performance optimization, WebAssembly ecosystem integration, and modernization of compilation infrastructure", "emerging_trends": "- **WebAssembly ecosystem integration** with increasing focus on runtime compatibility (WAMR) and exploring advanced features like shared memory for plugin architectures\n- **Performance-first optimization** trend with multiple ongoing efforts for lambda lifting, static evaluation, and compilation speed improvements\n- **Modern JavaScript adoption** with more liberal use of recent JavaScript features while maintaining compatibility documentation\n- **Infrastructure modernization** including CI improvements, Docker optimization, and dropping support for older OCaml versions\n- **Compiler architecture evolution** with cleaner separation between backends and more sophisticated primitive handling systems", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Multiple contributors with focus on compiler optimization, runtime improvements, and issue reporting", "contributors": "- [Raphaël Monat](https://github.com/rmonat) identified and reported documentation bug for `Sys_js.read_file` exception specification ([#1925](https://github.com/ocsigen/js_of_ocaml/issues/1925))\n- [@nickbetteridge](https://github.com/nickbetteridge) engaged in extensive technical discussion about WebAssembly runtime compatibility issues with WAMR, including debugging GC object pointer problems ([#1929](https://github.com/ocsigen/js_of_ocaml/issues/1929))\n- [Hyeseong Kim](https://github.com/cometkim) proposed feature request for SharedArrayBuffer and Atomics API support to enable shared memory deserialization in WebAssembly plugin systems ([#1930](https://github.com/ocsigen/js_of_ocaml/issues/1930))\n- [@blueblueredred](https://github.com/blueblueredred) reported ES6 compatibility issue with static class fields and engaged in discussion about modern JavaScript feature usage policy ([#1906](https://github.com/ocsigen/js_of_ocaml/issues/1906))\n- [Olivier Nicole](https://github.com/OlivierNicole) maintained multiple draft PRs for lambda lifting optimizations including aggressive lifting ([#1886](https://github.com/ocsigen/js_of_ocaml/issues/1886)) and free variable analysis improvements ([#1885](https://github.com/ocsigen/js_of_ocaml/issues/1885))\n- [@hhugo](https://github.com/hhugo) continued development on compiler primitive inlining system ([#1928](https://github.com/ocsigen/js_of_ocaml/issues/1928)) and provided guidance on documentation fixes\n- [Jérôme Vouillon](https://github.com/vouillon) engaged in technical discussions about WebAssembly compatibility and maintained draft WebAssembly optimization work ([#1790](https://github.com/ocsigen/js_of_ocaml/issues/1790))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 14, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-03-31 to 2025-04-06", "start_commit": "9d908811f94e5713ba2c1fa340ec8d51e83f5a7f", "end_commit": "a5152d33b8afecc08f1a16d28ae787b585221689", "brief_summary": "WASM runtime optimizations and PPX modernization with ppxlib 0.36 support", "new_features_summary": "WASM continuation efficiency improvements and PPX support for ppxlib 0.36", "new_features": "- **WASM continuation performance** improvements make resuming continuations more efficient in the WASM runtime ([2bac94d](https://github.com/ocsigen/js_of_ocaml/commit/2bac94d35c13b62dd1dc56d3e36b3b04beaabf80))\n- **PPX modernization** adds support for ppxlib 0.36 with updated function parameter handling and constraint management ([cbc9044](https://github.com/ocsigen/js_of_ocaml/commit/cbc9044aae647a578ae0b75abd12b5bfe8fe8c23))\n- **Testing infrastructure** enhancement enables deep_state benchmark with wasmoo for better performance testing ([a5152d3](https://github.com/ocsigen/js_of_ocaml/commit/a5152d33b8afecc08f1a16d28ae787b585221689))\n- **Dependency management** improvements normalize ppxlib version constraints and exclude problematic test combinations ([2d7dd67](https://github.com/ocsigen/js_of_ocaml/commit/2d7dd673364a3ebd6243dea6d8208bcb05615ce1), [184c470](https://github.com/ocsigen/js_of_ocaml/commit/184c470d2063417ca684418d50956efa6dbbcc5e))\n- **PPX internal improvements** enhance uid generation order control for better compilation consistency ([9d90881](https://github.com/ocsigen/js_of_ocaml/commit/9d908811f94e5713ba2c1fa340ec8d51e83f5a7f))", "activity_summary": "Major WASM runtime efficiency work and PPX library modernization focused on ppxlib compatibility", "activity": "- Core **WASM runtime restructuring** with fiber management improvements and effect handling optimizations affecting continuation performance\n- **PPX ecosystem modernization** work upgrading to ppxlib 0.36 compatibility while maintaining backward compatibility with older versions\n- **Build system maintenance** normalizing dependency constraints and improving test reliability by excluding problematic version combinations\n- **Performance testing infrastructure** expansion enabling WASM-specific benchmarking capabilities for better performance tracking", "discussions_summary": "Discussion around benchmark visibility and WASM exception handling approaches", "notable_discussions": "- Technical discussion in experimental [#1910](https://github.com/ocsigen/js_of_ocaml/issues/1910) between [Jérôme Vouillon](https://github.com/vouillon) and [Olivier Nicole](https://github.com/OlivierNicole) about microbenchmark results visibility and benchmark infrastructure limitations affecting WASM exception handling experiments", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Multiple contributors focused on WASM optimization and PPX modernization work", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented core WASM continuation efficiency improvements ([2bac94d](https://github.com/ocsigen/js_of_ocaml/commit/2bac94d35c13b62dd1dc56d3e36b3b04beaabf80)), PPX modernization for ppxlib 0.36 support ([cbc9044](https://github.com/ocsigen/js_of_ocaml/commit/cbc9044aae647a578ae0b75abd12b5bfe8fe8c23)), and PPX internal improvements ([9d90881](https://github.com/ocsigen/js_of_ocaml/commit/9d908811f94e5713ba2c1fa340ec8d51e83f5a7f)), while also participating in technical discussions about WASM exception handling experiments ([#1910](https://github.com/ocsigen/js_of_ocaml/issues/1910))\n- [@hhugo](https://github.com/hhugo) closed the WASM continuation efficiency feature request ([#1779](https://github.com/ocsigen/js_of_ocaml/issues/1779)) and contributed to testing infrastructure improvements ([a5152d3](https://github.com/ocsigen/js_of_ocaml/commit/a5152d33b8afecc08f1a16d28ae787b585221689))\n- [Olivier Nicole](https://github.com/OlivierNicole) provided technical feedback on benchmark visibility issues affecting WASM performance testing in ongoing experimental work ([#1910](https://github.com/ocsigen/js_of_ocaml/issues/1910))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 13, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-03-24 to 2025-03-30", "start_commit": "d87bf330e26919b0c0058d57a7cf5faa6a242c04", "end_commit": "a8e8d2c1696a5fb3ddb4fe15495b1a8625a29b4b", "brief_summary": "PPX enhancements, security fixes, and WASM improvements with bug reporting on ES6 compatibility issues", "new_features_summary": "PPX syntax support improvements, security fixes for temporary files, and WASM runtime enhancements", "new_features": "- Enhanced **PPX preprocessing** to handle `Pexp_function` and `Pexp_newtype` expressions with polymorphic method validation in JavaScript object literals ([ba3f4733](https://github.com/ocsigen/js_of_ocaml/commit/ba3f4733))\n- Security improvement to prevent **temporary file naming** based on user-provided data that could cause path traversal issues ([a8e8d2c1](https://github.com/ocsigen/js_of_ocaml/commit/a8e8d2c1))\n- Fixed **bound checking for empty float arrays** in WASM backend to properly handle Invalid_argument exceptions ([44d2050f](https://github.com/ocsigen/js_of_ocaml/commit/44d2050f))\n- **Lambda-lifting optimization** disabled for WASM target while maintaining it for JavaScript compilation for better performance ([39f8e7da](https://github.com/ocsigen/js_of_ocaml/commit/39f8e7da))\n- Improved **OCAMLRUNPARAM parsing** to handle malformed environment variable configurations more gracefully ([fd5cae71](https://github.com/ocsigen/js_of_ocaml/commit/fd5cae71))", "activity_summary": "Mixed development activity with WASM enhancements, dependency management discussions, and compatibility concerns", "activity": "- **WASM backend improvements** by [Jérôme Vouillon](https://github.com/vouillon) with two draft pull requests focusing on type precision optimizations ([#1907](https://github.com/ocsigen/js_of_ocaml/issues/1907), [#1908](https://github.com/ocsigen/js_of_ocaml/issues/1908))\n- **ppxlib dependency upgrade** discussion by [Antonio Nuno Monteiro](https://github.com/anmonteiro) for ppxlib 0.36 compatibility, currently blocked on test infrastructure ([#1866](https://github.com/ocsigen/js_of_ocaml/issues/1866))\n- **CI infrastructure cleanup** removing test dependencies on cohttp-lwt-unix to streamline build process ([19b816ec](https://github.com/ocsigen/js_of_ocaml/commit/19b816ec))\n- **Test coverage expansion** with new WASM-specific test cases for array bound checking scenarios ([44d2050f](https://github.com/ocsigen/js_of_ocaml/commit/44d2050f))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on WASM backend maturation and modern JavaScript compatibility considerations", "emerging_trends": "- **WASM backend maturation** with targeted performance optimizations and type system improvements indicating preparation for production use ([#1907](https://github.com/ocsigen/js_of_ocaml/issues/1907), [#1908](https://github.com/ocsigen/js_of_ocaml/issues/1908))\n- **JavaScript compatibility evolution** as the project adopts modern ES features while addressing user concerns about ES6 compatibility ([#1906](https://github.com/ocsigen/js_of_ocaml/issues/1906))\n- **Security-focused development** with proactive fixes for potential security issues in file handling and build processes ([a8e8d2c1](https://github.com/ocsigen/js_of_ocaml/commit/a8e8d2c1))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Development by project maintainers with community bug reporting and dependency upgrade contributions", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented PPX syntax enhancements, WASM optimizations, security fixes, and runtime improvements with multiple commits focusing on compiler robustness ([ba3f4733](https://github.com/ocsigen/js_of_ocaml/commit/ba3f4733), [44d2050f](https://github.com/ocsigen/js_of_ocaml/commit/44d2050f), [a8e8d2c1](https://github.com/ocsigen/js_of_ocaml/commit/a8e8d2c1), [#1907](https://github.com/ocsigen/js_of_ocaml/issues/1907), [#1908](https://github.com/ocsigen/js_of_ocaml/issues/1908))\n- [@blueblueredred](https://github.com/blueblueredred) reported ES6 compatibility issues with static class fields in generated JavaScript code and provided constructive feedback on the project's modern JavaScript adoption policy ([#1906](https://github.com/ocsigen/js_of_ocaml/issues/1906))\n- [Antonio Nuno Monteiro](https://github.com/anmonteiro) contributed ppxlib 0.36 upgrade work to modernize the dependency stack, though currently blocked on test infrastructure updates ([#1866](https://github.com/ocsigen/js_of_ocaml/issues/1866))\n- [@hhugo](https://github.com/hhugo) provided maintainer guidance on JavaScript compatibility policy and engaged in technical discussions about dependency upgrades ([#1906](https://github.com/ocsigen/js_of_ocaml/issues/1906), [#1866](https://github.com/ocsigen/js_of_ocaml/issues/1866))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 12, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-03-17 to 2025-03-23", "start_commit": "c5d39ced971b8c7cc14d991ae3c82490967ee387", "end_commit": "7b511d35e6eb2586ff0116644e5add66fdba468a", "brief_summary": "Benchmarking infrastructure improvements and compiler code cleanup", "new_features_summary": "New current-bench integration and enhanced file reading utilities in compiler", "new_features": "- **Benchmarking suite** targeting current-bench infrastructure with new configuration files and Docker support for performance tracking ([#1860](https://github.com/ocsigen/js_of_ocaml/issues/1860))\n- **Enhanced file I/O utilities** in compiler stdlib including `file_lines_bin`, `file_lines_text`, and improved line reading functions for better file processing ([7b511d35e6eb2586ff0116644e5add66fdba468a](https://github.com/ocsigen/js_of_ocaml/commit/7b511d35e6eb2586ff0116644e5add66fdba468a))\n- **Deprecated file I/O functions** with clear migration path to text/binary specific variants for safer file handling ([7b511d35e6eb2586ff0116644e5add66fdba468a](https://github.com/ocsigen/js_of_ocaml/commit/7b511d35e6eb2586ff0116644e5add66fdba468a))\n- **Benchmark build fixes** for current-bench time measurement accuracy and file size calculations ([74393731e33b77735f7b137b31356420ac855adf](https://github.com/ocsigen/js_of_ocaml/commit/74393731e33b77735f7b137b31356420ac855adf))", "activity_summary": "Code cleanup and repository maintenance with dependency upgrade discussions", "activity": "- **Code consolidation** removing duplicate utility functions across multiple compiler modules and centralizing them in stdlib ([7b511d35e6eb2586ff0116644e5add66fdba468a](https://github.com/ocsigen/js_of_ocaml/commit/7b511d35e6eb2586ff0116644e5add66fdba468a), [#1893](https://github.com/ocsigen/js_of_ocaml/issues/1893))\n- **Benchmark integer parsing fixes** in splay tree implementation using Int64 conversion for proper handling of large hex constants ([55c622862c506a2d403d3f1d5d5c6bfda6bf45d7](https://github.com/ocsigen/js_of_ocaml/commit/55c622862c506a2d403d3f1d5d5c6bfda6bf45d7))\n- **PPXlib 0.36 upgrade** discussions with blocked status due to test compatibility issues in [Antonio Nuno Monteiro](https://github.com/anmonteiro)'s [#1866](https://github.com/ocsigen/js_of_ocaml/issues/1866), awaiting ppx_expect updates\n- **Runtime template improvements** in [Sora Morimoto](https://github.com/smorimoto)'s draft [#1862](https://github.com/ocsigen/js_of_ocaml/issues/1862) for useTemplate functionality with merge conflicts to resolve", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on infrastructure modernization and performance measurement capabilities", "emerging_trends": "- **Continuous benchmarking** integration with current-bench ecosystem for automated performance regression detection\n- **Code quality improvements** through dependency upgrades and elimination of duplicate utility functions\n- **WebAssembly integration** discussions continuing with third-party library usage requests in [#1438](https://github.com/ocsigen/js_of_ocaml/issues/1438)", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active maintenance by core team with infrastructure and cleanup contributions", "contributors": "- [@hhugo](https://github.com/hhugo) provided review comments on PPXlib upgrade compatibility ([#1866](https://github.com/ocsigen/js_of_ocaml/issues/1866)) and inquired about template runtime improvements ([#1862](https://github.com/ocsigen/js_of_ocaml/issues/1862))\n- [Antonio Nuno Monteiro](https://github.com/anmonteiro) contributed PPXlib 0.36 upgrade implementation addressing dependency modernization ([#1866](https://github.com/ocsigen/js_of_ocaml/issues/1866))\n- [Sora Morimoto](https://github.com/smorimoto) worked on runtime template functionality improvements in draft [#1862](https://github.com/ocsigen/js_of_ocaml/issues/1862)\n- Core team contributors implemented benchmarking infrastructure ([#1860](https://github.com/ocsigen/js_of_ocaml/issues/1860)) and compiler cleanup work ([#1893](https://github.com/ocsigen/js_of_ocaml/issues/1893), [7b511d35e6eb2586ff0116644e5add66fdba468a](https://github.com/ocsigen/js_of_ocaml/commit/7b511d35e6eb2586ff0116644e5add66fdba468a))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 11, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-03-10 to 2025-03-16", "start_commit": "d8faae318d651ce487a1ce981001b8f102ef9e95", "end_commit": "bdc6d9f5c5b535bd9cc1bcf2629a03bb7bbc9f91", "brief_summary": "Multiple compiler bug fixes and runtime improvements including BLAKE2b implementation and optimization work", "new_features_summary": "BLAKE2b implementation for Wasm runtime, improved source map handling, and compiler optimizations", "new_features": "- **BLAKE2b implementation** for Wasm runtime with complete cryptographic primitives including create, update, and final operations ([3d8e70da](https://github.com/ocsigen/js_of_ocaml/commit/3d8e70da7c560920857c8e487d966f55b98f2fda))\n- **Obj.dup functionality** now works correctly with floats and boxed integers in the runtime ([255e68da](https://github.com/ocsigen/js_of_ocaml/commit/255e68da6653594bc9fef30c2b7ae5c9bcbef809))\n- **Json.output improvements** for Wasm version to work with native ints and JavaScript objects ([559fbce6](https://github.com/ocsigen/js_of_ocaml/commit/559fbce6b64030180449a0b9d4b124cb78bbb9b5))\n- **Int64.of_string** overflow check fixes preventing incorrect handling of large integers ([7244c946](https://github.com/ocsigen/js_of_ocaml/commit/7244c946cb42293b26ac8d39b73e9408d493cd6d))\n- **caml_string_concat** fixes when not using JS strings for improved string handling ([e4e8311a](https://github.com/ocsigen/js_of_ocaml/commit/e4e8311aa51100fc7766ef80a31e20236e4e10d4))\n- **Source map path rewriting** improvements for Wasm compilation with better handling of duplicate rewrites ([5d99ba8f](https://github.com/ocsigen/js_of_ocaml/commit/5d99ba8f9490befe67679511aa0c2d4061298b7d), [b555916](https://github.com/ocsigen/js_of_ocaml/commit/b555916826c5d5d1966a6f83327b42287af8de6c))\n- **List.map optimization** using `tail_mod_cons` for better performance ([c38bec81](https://github.com/ocsigen/js_of_ocaml/commit/c38bec811d77e7c88a3d7fcc76ac9f543c748d51))\n- **useOptionalChain runtime fixes** in JavaScript runtime ([ac2affec](https://github.com/ocsigen/js_of_ocaml/commit/ac2affec14c7e76a3481160d255adc68582ef4c0))\n- **Benchmark script refactoring** with current-bench support for improved performance testing ([d8faae31](https://github.com/ocsigen/js_of_ocaml/commit/d8faae318d651ce487a1ce981001b8f102ef9e95))", "activity_summary": "Compiler stability improvements and ongoing optimization work with lambda lifting enhancements", "activity": "- **Minifier stability fixes** by [Jérôme Vouillon](https://github.com/vouillon) addressing function declaration scopes and variable renaming issues ([#1867](https://github.com/ocsigen/js_of_ocaml/issues/1867), [#1864](https://github.com/ocsigen/js_of_ocaml/issues/1864), [#1865](https://github.com/ocsigen/js_of_ocaml/issues/1865))\n- **Double translation assertion failure** fixed preventing compiler crashes with nested exception handling ([#1870](https://github.com/ocsigen/js_of_ocaml/issues/1870), [#1868](https://github.com/ocsigen/js_of_ocaml/issues/1868))\n- **Dom_html.Keyboard_code.of_event** fix resolving incorrect key code handling ([549287868](https://github.com/ocsigen/js_of_ocaml/commit/549287868f9cc92736db6f96c51a707199944ac4))\n- **Lambda lifting optimization work** by [Olivier Nicole](https://github.com/OlivierNicole) exploring aggressive lifting strategies and performance improvements ([#1886](https://github.com/ocsigen/js_of_ocaml/issues/1886), [#1885](https://github.com/ocsigen/js_of_ocaml/issues/1885))\n- **Compiler simplification** removing CRC parsing and improving unit info handling ([e22c7ec4](https://github.com/ocsigen/js_of_ocaml/commit/e22c7ec4381cf99018276e72b45ccf6a9597bbfe))\n- **Wasm runtime stubs** added for caml_create_file and caml_mount_autoload functions ([2be8d1ce](https://github.com/ocsigen/js_of_ocaml/commit/2be8d1ce40da3eeb99daaef35b08988067c4850a))", "discussions_summary": "Feature request for disabling missing primitives messages and ppxlib upgrade discussions", "notable_discussions": "- **Missing primitives message suppression** requested by [Daniel Bünzli](https://github.com/dbuenzli) for cleaner build output when Unix primitives are expected to be missing ([#1863](https://github.com/ocsigen/js_of_ocaml/issues/1863))\n- **ppxlib 0.36 upgrade** discussion by [Antonio Nuno Monteiro](https://github.com/anmonteiro) addressing dependency updates and test compatibility ([#1866](https://github.com/ocsigen/js_of_ocaml/issues/1866))\n- **Lambda lifting performance analysis** ongoing discussion about V8 performance improvements and code size implications for more aggressive optimization strategies ([#1886](https://github.com/ocsigen/js_of_ocaml/issues/1886))", "trends_summary": "Focus on compiler robustness, runtime optimization, and WebAssembly feature parity", "emerging_trends": "- **Compiler stability emphasis** with multiple bug fixes targeting edge cases in minification and double translation modes\n- **WebAssembly runtime completion** with BLAKE2b implementation bringing cryptographic functionality closer to feature parity with JavaScript runtime\n- **Performance optimization exploration** through lambda lifting experiments showing potential for significant speedups in V8\n- **Runtime robustness improvements** with fixes to core operations like string concatenation and object duplication\n- **Source map infrastructure** enhancements for better debugging experience in WebAssembly compilation", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active week with contributions from maintainers focusing on compiler fixes and runtime improvements", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented multiple compiler fixes including double translation assertion failures ([#1870](https://github.com/ocsigen/js_of_ocaml/issues/1870), [#1868](https://github.com/ocsigen/js_of_ocaml/issues/1868)) and minifier improvements ([#1867](https://github.com/ocsigen/js_of_ocaml/issues/1867)), reported and resolved variable scoping issues ([#1864](https://github.com/ocsigen/js_of_ocaml/issues/1864), [#1865](https://github.com/ocsigen/js_of_ocaml/issues/1865))\n- [Olivier Nicole](https://github.com/OlivierNicole) advanced lambda lifting optimization work with two active PRs exploring aggressive lifting strategies and performance improvements ([#1886](https://github.com/ocsigen/js_of_ocaml/issues/1886), [#1885](https://github.com/ocsigen/js_of_ocaml/issues/1885))\n- [Daniel Bünzli](https://github.com/dbuenzli) opened feature request for suppressing missing primitives messages ([#1863](https://github.com/ocsigen/js_of_ocaml/issues/1863)) and provided detailed workflow requirements\n- [Antonio Nuno Monteiro](https://github.com/anmonteiro) contributed ppxlib 0.36 upgrade work ([#1866](https://github.com/ocsigen/js_of_ocaml/issues/1866)) addressing dependency compatibility issues\n- [@hhugo](https://github.com/hhugo) provided code review and project guidance across multiple PRs and issues", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 10, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-03-03 to 2025-03-09", "start_commit": "cc2cbd5e98de16744ae5b9c7cf64c5b7088515e0", "end_commit": "779c0debd7b0945414e2157804745b648c39a2df", "brief_summary": "Runtime fixes for filesystem issues and benchmarking enhancements with expanded ECMAScript documentation", "new_features_summary": "Fixed filesystem offset computation, updated Node.js module imports, and enhanced benchmarking with effects support", "new_features": "- Fixed **offset computation** in pseudo-filesystem read/write operations preventing incorrect file position tracking ([779c0de](https://github.com/ocsigen/js_of_ocaml/commit/779c0debd7b0945414e2157804745b648c39a2df))\n- Updated **Node.js module imports** to use `node:fs` constants instead of deprecated `node:constants` ([cc2cbd5](https://github.com/ocsigen/js_of_ocaml/commit/cc2cbd5e98de16744ae5b9c7cf64c5b7088515e0))\n- Enhanced **benchmarking system** with wasm_of_ocaml support and separate effects compilation modes (CPS vs double-translation) ([665535d](https://github.com/ocsigen/js_of_ocaml/commit/665535d08390ad9ff6d1e8509a018069ec32dac2), [2d848bd](https://github.com/ocsigen/js_of_ocaml/commit/2d848bd2801d6b014c0d32459f99618f979a24ea))\n- Removed **dune subst** dependency for builds outside git repositories ([264978202](https://github.com/ocsigen/js_of_ocaml/commit/264978202ec8a20904aa1e894906d1db1f062abd))\n- Expanded **ECMAScript compatibility documentation** with detailed browser support information for features like optional chaining, FinalizationRegistry, and various Web APIs ([1aac41e](https://github.com/ocsigen/js_of_ocaml/commit/1aac41e830caa4d020d29f667b230b67dca93919))", "activity_summary": "Multiple bug fixes resolved filesystem and Windows compatibility issues with active community engagement", "activity": "- Resolved **parent directory resolution bug** in pseudo-filesystem where `..` from root child directories incorrectly pointed to themselves by [roodni](https://github.com/roodni) ([#1847](https://github.com/ocsigen/js_of_ocaml/issues/1847))\n- Fixed **input_line and input_char exceptions** on Windows with js_of_ocaml 6.0.1 reported by [Benoit Montagu](https://github.com/esope) and addressed through filesystem improvements ([#1856](https://github.com/ocsigen/js_of_ocaml/issues/1856))\n- Addressed **Node.js fstat errors** on Windows affecting stdout/stderr detection by [Jérôme Vouillon](https://github.com/vouillon) ([#1845](https://github.com/ocsigen/js_of_ocaml/issues/1845))\n- [Daniel Bünzli](https://github.com/dbuenzli) requested feature to **disable primitive warnings** with granular control for specific missing primitives ([#1863](https://github.com/ocsigen/js_of_ocaml/issues/1863))\n- [Olivier Nicole](https://github.com/OlivierNicole) initiated removal of `dune subst` requirement to improve builds from non-git source trees for benchmarking CI ([#1852](https://github.com/ocsigen/js_of_ocaml/issues/1852))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on runtime stability, platform compatibility, and expanded ECMAScript feature documentation", "emerging_trends": "- **Runtime robustness** improvements targeting filesystem edge cases and cross-platform compatibility issues\n- **Enhanced benchmarking infrastructure** with support for WebAssembly compilation and effects system evaluation\n- **Documentation expansion** for ECMAScript feature compatibility to help developers understand browser support requirements\n- **Build system improvements** reducing git dependencies for more flexible deployment and CI scenarios", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active bug reporting and fixes by core maintainers and community members addressing filesystem and platform issues", "contributors": "- [@hhugo](https://github.com/hhugo) implemented filesystem fixes for offset computation and Node.js module imports, provided support for bug reports ([#1856](https://github.com/ocsigen/js_of_ocaml/issues/1856), [#1863](https://github.com/ocsigen/js_of_ocaml/issues/1863), [#1845](https://github.com/ocsigen/js_of_ocaml/issues/1845))\n- [Olivier Nicole](https://github.com/OlivierNicole) contributed benchmarking enhancements and dune build improvements ([#1857](https://github.com/ocsigen/js_of_ocaml/issues/1857), [#1855](https://github.com/ocsigen/js_of_ocaml/issues/1855), [#1852](https://github.com/ocsigen/js_of_ocaml/issues/1852))\n- [Sora Morimoto](https://github.com/smorimoto) updated ECMAScript documentation and submitted runtime template fixes ([#1851](https://github.com/ocsigen/js_of_ocaml/issues/1851), [#1862](https://github.com/ocsigen/js_of_ocaml/issues/1862))\n- [Benoit Montagu](https://github.com/esope) reported filesystem read/write bug with detailed reproduction case ([#1856](https://github.com/ocsigen/js_of_ocaml/issues/1856))\n- [@roodni](https://github.com/roodni) identified and reported parent directory resolution bug in pseudo-filesystem ([#1847](https://github.com/ocsigen/js_of_ocaml/issues/1847))\n- [Daniel Bünzli](https://github.com/dbuenzli) requested enhanced control over primitive warning messages ([#1863](https://github.com/ocsigen/js_of_ocaml/issues/1863))\n- [John Jackson](https://github.com/johnridesabike) reported Windows-specific fstat errors in generated JavaScript ([#1845](https://github.com/ocsigen/js_of_ocaml/issues/1845))\n- [Jérôme Vouillon](https://github.com/vouillon) provided analysis and solutions for Windows compatibility issues ([#1845](https://github.com/ocsigen/js_of_ocaml/issues/1845))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 9, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-02-24 to 2025-03-02", "start_commit": "c1b59dd190d1fe3c81ef3b4666f7d5521eb7b1c7", "end_commit": "46b4ca8046987d4134fa5eb74e8fe0fc84da5bb9", "brief_summary": "Multiple bug fixes with Windows fstat error, pseudo filesystem parent directory resolution, and OCaml 4.14.3 compilation support", "new_features_summary": "New WASM text preprocessor, expanded Unix function support, improved XMLHttpRequest implementation, and enhanced compiler compatibility", "new_features": "- **Wasm text files preprocessor** implementation for better build pipeline management ([46b4ca8](https://github.com/ocsigen/js_of_ocaml/commit/46b4ca8046987d4134fa5eb74e8fe0fc84da5bb9))\n- **OCaml 4.14.3+trunk support** added to compiler with updated bytecode parsing compatibility ([285b240](https://github.com/ocsigen/js_of_ocaml/commit/285b2409685ea37c8412690e3537cac57d409854))\n- **Enhanced Unix function support** including `access`, `chmod`, `link`, and `sync` operations for Node.js runtime ([f21eef0](https://github.com/ocsigen/js_of_ocaml/commit/f21eef0cb9ce0e9dae0697a210c5df2512814836))\n- **Refactored XMLHttpRequest implementation** to remove polyfill dependency and simplify MlObjectTable ([f678b83](https://github.com/ocsigen/js_of_ocaml/commit/f678b83bc00e3d51537ad196ec4aadbdfea7d81a), [0da311f](https://github.com/ocsigen/js_of_ocaml/commit/0da311f8bd867ed98c6bba09c569db064f8e98d6))\n- **Improved WASM effects handling** with better error messages when JSPI API is unavailable ([c1b59dd](https://github.com/ocsigen/js_of_ocaml/commit/c1b59dd190d1fe3c81ef3b4666f7d5521eb7b1c7))\n- **Documentation updates** including enhanced ECMASCRIPT.md with Map and XMLHttpRequest compatibility information ([46b4ca8](https://github.com/ocsigen/js_of_ocaml/commit/46b4ca8046987d4134fa5eb74e8fe0fc84da5bb9))", "activity_summary": "Five issues reported and resolved focusing on Windows compatibility, filesystem bugs, and compilation errors", "activity": "- **Windows Node.js fstat error** resolved by [John Jackson](https://github.com/johnridesabike) reporting issue with Node 18 affecting JS code execution, fixed by [Jérôme Vouillon](https://github.com/vouillon) ([#1845](https://github.com/ocsigen/js_of_ocaml/issues/1845))\n- **Pseudo filesystem parent directory bug** identified and fixed by [@roodni](https://github.com/roodni) where `..` for child directories incorrectly pointed to themselves instead of root ([#1847](https://github.com/ocsigen/js_of_ocaml/issues/1847))\n- **OCaml 4.14.3 compilation failure** reported by [Enrico Tassi](https://github.com/gares) and addressed with compiler environment field compatibility ([#1843](https://github.com/ocsigen/js_of_ocaml/issues/1843))\n- **Reactive table headers bug** affecting TyXML tables resolved through ReactiveData dependency fix suggested by [@hhugo](https://github.com/hhugo) ([#1837](https://github.com/ocsigen/js_of_ocaml/issues/1837))\n- **WASM effects runtime error** with illegal cast exception fixed by [Jérôme Vouillon](https://github.com/vouillon) recommending Node.js 23+ for JSPI API compatibility ([#1839](https://github.com/ocsigen/js_of_ocaml/issues/1839))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Growing focus on WASM runtime stability and cross-platform compatibility improvements", "emerging_trends": "- **WASM runtime maturation** with enhanced effects handling, system primitives implementation, and better error reporting for platform compatibility\n- **Cross-platform robustness** improvements addressing Windows-specific issues and Node.js version compatibility requirements\n- **Build system modernization** through introduction of WASM text preprocessor and enhanced compiler toolchain flexibility\n- **Expanded Unix compatibility** bringing more system functions to browser and Node.js environments for better native code portability", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Community bug reports with quick maintainer response and comprehensive fixes across runtime and compiler components", "contributors": "- [John Jackson](https://github.com/johnridesabike) reported Windows Node.js fstat compatibility issue affecting JS code execution ([#1845](https://github.com/ocsigen/js_of_ocaml/issues/1845))\n- [@roodni](https://github.com/roodni) identified and documented pseudo filesystem parent directory resolution bug with code analysis ([#1847](https://github.com/ocsigen/js_of_ocaml/issues/1847))\n- [Enrico Tassi](https://github.com/gares) reported OCaml 4.14.3 compilation errors and provided detailed error messages for debugging ([#1843](https://github.com/ocsigen/js_of_ocaml/issues/1843))\n- [@hhugo](https://github.com/hhugo) provided quick responses and solutions across multiple issues, suggesting ReactiveData fixes and investigating Node.js version compatibility ([#1837](https://github.com/ocsigen/js_of_ocaml/issues/1837), [#1845](https://github.com/ocsigen/js_of_ocaml/issues/1845))\n- [Jérôme Vouillon](https://github.com/vouillon) implemented fixes for filesystem bugs, provided WASM effects guidance, and contributed to Windows compatibility solutions ([#1845](https://github.com/ocsigen/js_of_ocaml/issues/1845), [#1839](https://github.com/ocsigen/js_of_ocaml/issues/1839))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 8, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-02-17 to 2025-02-23", "start_commit": "2b421491629ebad4e43c006ca0f5dd8f7c15895d", "end_commit": "937e84920335b58a5598f222a613f62f781912f7", "brief_summary": "WASM runtime improvements and bug fixes for reactive table headers and effect handlers", "new_features_summary": "WASM compilation optimizations, type renaming, and runtime linking improvements", "new_features": "- **WASM compilation process** improvements including better **runtime linking** and optimized **intermediate file handling** by [Jérôme Vouillon](https://github.com/vouillon) ([#1838](https://github.com/ocsigen/js_of_ocaml/issues/1838))\n- **Type system update** renaming `$string` to `$bytes` in WASM runtime for improved **type clarity** ([#1835](https://github.com/ocsigen/js_of_ocaml/issues/1835))\n- **WASM runtime cleanup** and **small fixes** across multiple runtime modules by [Jérôme Vouillon](https://github.com/vouillon) ([#1836](https://github.com/ocsigen/js_of_ocaml/issues/1836), [#1834](https://github.com/ocsigen/js_of_ocaml/issues/1834))\n- **Documentation update** in WASM runtime manual reflecting the type system changes ([6d6fc9d](https://github.com/ocsigen/js_of_ocaml/commit/6d6fc9d2666875bc098b4a8b19953b0afa070fde))", "activity_summary": "Bug reports and resolution for reactive components and WASM effect handlers", "activity": "- **Reactive table headers** bug investigation and resolution by [Ali El-Madani](https://github.com/Ali-7CC) affecting js_of_ocaml 5.8.2 with OCaml 5.2.0, resolved through ReactiveData dependency fix ([#1837](https://github.com/ocsigen/js_of_ocaml/issues/1837))\n- **WASM effect handler** runtime error debugging by [Satoru Kawahara](https://github.com/Nymphium) with guidance from [Jérôme Vouillon](https://github.com/vouillon) on using `--effects=cps` flag and Node.js 23 compatibility ([#1839](https://github.com/ocsigen/js_of_ocaml/issues/1839))\n- **Cross-repository coordination** with [@hhugo](https://github.com/hhugo) addressing ReactiveData dependency issues through [ocsigen/reactiveData#35](https://github.com/ocsigen/reactiveData/issues/35) and [ocaml/opam-repository#27511](https://github.com/ocaml/opam-repository/issues/27511)", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on WASM backend stability and cross-version compatibility", "emerging_trends": "- **WASM backend maturation** with systematic cleanup and optimization efforts across the entire runtime stack\n- **Version compatibility focus** addressing issues between js_of_ocaml versions 4.0.0 and 5.8.2 with corresponding OCaml version changes\n- **Effect handler implementation** refinement for WASM targets with improved tooling support and documentation", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Four contributors active with code implementation, bug reporting, and issue resolution", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) implemented **WASM compilation improvements** and **runtime optimizations** across four merged pull requests ([#1834](https://github.com/ocsigen/js_of_ocaml/issues/1834), [#1835](https://github.com/ocsigen/js_of_ocaml/issues/1835), [#1836](https://github.com/ocsigen/js_of_ocaml/issues/1836), [#1838](https://github.com/ocsigen/js_of_ocaml/issues/1838))\n- [Ali El-Madani](https://github.com/Ali-7CC) reported **reactive table headers bug** with comprehensive reproduction steps and code examples ([#1837](https://github.com/ocsigen/js_of_ocaml/issues/1837))\n- [Satoru Kawahara](https://github.com/Nymphium) identified **WASM effect handler runtime error** and provided detailed reproduction case ([#1839](https://github.com/ocsigen/js_of_ocaml/issues/1839))\n- [@hhugo](https://github.com/hhugo) coordinated **dependency fixes** across repositories and provided ReactiveData pinning solution ([#1837](https://github.com/ocsigen/js_of_ocaml/issues/1837))\n- [Olivier Nicole](https://github.com/OlivierNicole) contributed **technical insights** on dune integration for effect handler flags ([#1839](https://github.com/ocsigen/js_of_ocaml/issues/1839))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 7, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-02-10 to 2025-02-16", "start_commit": null, "end_commit": null, "brief_summary": "New CSS Font Loading API wrapper PR opened and ongoing WASM development discussion", "new_features_summary": null, "new_features": null, "activity_summary": "CSS Font Loading API implementation and WASM runtime development guidance discussion", "activity": "- [@mesmerizingwaft](https://github.com/mesmerizingwaft) opened **CSS Font Loading API wrapper** implementation adding css_font_load.ml(i), fonts property to Dom_html.document, and example code ([#1833](https://github.com/ocsigen/js_of_ocaml/issues/1833))\n- [@hhugo](https://github.com/hhugo) provided **code review feedback** requesting clarification on testing requirements and referencing [#2031](https://github.com/ocsigen/js_of_ocaml/issues/2031) for additional context ([#1833](https://github.com/ocsigen/js_of_ocaml/issues/1833))", "discussions_summary": "WASM development workflow improvements and testing approach for Font Loading API", "notable_discussions": "- **WASM runtime development challenges** discussed by [@hhugo](https://github.com/hhugo) regarding editing WAT files, including issues with nested parentheses, control flow complexity, and poor error reporting ([#1818](https://github.com/ocsigen/js_of_ocaml/issues/1818))\n- **Testing methodology** for Font Loading API discussed, with [@mesmerizingwaft](https://github.com/mesmerizingwaft) noting challenges with straightforward testing and [@hhugo](https://github.com/hhugo) requesting clarification ([#1833](https://github.com/ocsigen/js_of_ocaml/issues/1833))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two contributors active with new PR submission and code review participation", "contributors": "- [Mesmera (WAFT)](https://github.com/mesmerizingwaft) submitted first-time contribution implementing **CSS Font Loading API wrapper** with comprehensive implementation including core functionality, DOM integration, and example code ([#1833](https://github.com/ocsigen/js_of_ocaml/issues/1833))\n- [@hhugo](https://github.com/hhugo) provided **code review** on the Font Loading API implementation, participated in **WASM development discussion** seeking guidance on WAT file editing workflows, and referenced related issues for context ([#1818](https://github.com/ocsigen/js_of_ocaml/issues/1818), [#1833](https://github.com/ocsigen/js_of_ocaml/issues/1833))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 6, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-02-03 to 2025-02-09", "start_commit": "8cd721b3df5deb4f04e30cee0247d69960c723e5", "end_commit": "b6d60e4f8ff35e7c7b3bb52b97ffedc3eb8e3d08", "brief_summary": "Version 6.0.1 bugfix release with DOM API compatibility improvements and documentation enhancements", "new_features_summary": "DOM API compatibility fixes for Chrome's fake keyboard events and optional storage properties", "new_features": "- **DOM API compatibility improvements** reverted some `optdef` type annotations to fix compatibility issues with Chrome's fake keyboard events and non-Web environments ([b7506383243d3ecd2f7ef447028e4822782678d2](https://github.com/ocsigen/js_of_ocaml/commit/b7506383243d3ecd2f7ef447028e4822782678d2))\n- **Version 6.0.1 bugfix release** published with continuation performance improvements, filesystem fixes, and marshalling bug fixes ([b6d60e4f8ff35e7c7b3bb52b97ffedc3eb8e3d08](https://github.com/ocsigen/js_of_ocaml/commit/b6d60e4f8ff35e7c7b3bb52b97ffedc3eb8e3d08))\n- **Manual and documentation formatting improvements** with consistent markup using triple braces for code elements and better cross-referencing ([8cd721b3df5deb4f04e30cee0247d69960c723e5](https://github.com/ocsigen/js_of_ocaml/commit/8cd721b3df5deb4f04e30cee0247d69960c723e5))", "activity_summary": "Two draft WebAssembly PRs introduced WASI runtime and Stack Switching support for effects", "activity": "- **WASI runtime implementation** by [Jérôme Vouillon](https://github.com/vouillon) provides WebAssembly target with full WASI support, enabling execution with wasmtime and Wizard engines ([#1831](https://github.com/ocsigen/js_of_ocaml/issues/1831))\n- **Stack Switching effects support** by [Jérôme Vouillon](https://github.com/vouillon) implements effects based on the WebAssembly Stack Switching proposal, requiring development version of Binaryen ([#1832](https://github.com/ocsigen/js_of_ocaml/issues/1832))\n- **DOM HTML library compatibility discussion** raised by [@hhugo](https://github.com/hhugo) about making `Dom_html.window` properties optdef for better cross-environment support ([#1830](https://github.com/ocsigen/js_of_ocaml/issues/1830))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on WebAssembly ecosystem expansion with WASI and Stack Switching proposal implementations", "emerging_trends": "- **WebAssembly ecosystem maturation** with comprehensive WASI runtime support and cutting-edge Stack Switching proposal integration, positioning js_of_ocaml as a leader in OCaml-to-WebAssembly compilation\n- **Cross-platform compatibility improvements** through careful handling of browser-specific quirks and environment-specific API availability, ensuring robust behavior across different JavaScript runtimes\n- **Documentation quality enhancement** with systematic formatting improvements and better cross-referencing between manual sections, improving developer experience", "issues_summary": null, "good_first_issues": null, "contributors_summary": "[@hhugo](https://github.com/hhugo) managed release process and DOM compatibility fixes, [Jérôme Vouillon](https://github.com/vouillon) advanced WebAssembly capabilities", "contributors": "- [@hhugo](https://github.com/hhugo) published version 6.0.1 bugfix release ([b6d60e4f8ff35e7c7b3bb52b97ffedc3eb8e3d08](https://github.com/ocsigen/js_of_ocaml/commit/b6d60e4f8ff35e7c7b3bb52b97ffedc3eb8e3d08)), implemented DOM API compatibility fixes for Chrome's fake keyboard events ([b7506383243d3ecd2f7ef447028e4822782678d2](https://github.com/ocsigen/js_of_ocaml/commit/b7506383243d3ecd2f7ef447028e4822782678d2)), and raised compatibility questions about window properties ([#1830](https://github.com/ocsigen/js_of_ocaml/issues/1830))\n- [Jérôme Vouillon](https://github.com/vouillon) developed comprehensive WASI runtime support for WebAssembly target with wasmtime and Wizard engine compatibility ([#1831](https://github.com/ocsigen/js_of_ocaml/issues/1831)) and implemented effects based on the WebAssembly Stack Switching proposal requiring development Binaryen ([#1832](https://github.com/ocsigen/js_of_ocaml/issues/1832))\n- Documentation improvements include consistent markup formatting and better cross-referencing throughout the manual sections ([8cd721b3df5deb4f04e30cee0247d69960c723e5](https://github.com/ocsigen/js_of_ocaml/commit/8cd721b3df5deb4f04e30cee0247d69960c723e5))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 5, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-01-27 to 2025-02-02", "start_commit": "64dcb4c041fb58c423c38a90470c13bc02219a09", "end_commit": "b64a46c9e182d8b959ea9fa42bb69f43892dbb7f", "brief_summary": "Extensive runtime fixes and test suite expansion with bug fixes affecting Unix operations and JavaScript parsing", "new_features_summary": "Runtime fixes for Unix stat functions, JavaScript float parsing, WASM marshal improvements, and documentation enhancements", "new_features": "- Fixed **Unix.LargeFile.stat/lstat** functions to properly handle large files and correct time representation ([1778bb5](https://github.com/ocsigen/js_of_ocaml/commit/1778bb56b7b0b10a9f871defcc497f98f2c29fa3))\n- Improved **hexadecimal float parsing** with proper handling of very large exponents in both JavaScript and WASM runtimes ([def6a78](https://github.com/ocsigen/js_of_ocaml/commit/def6a78e48e31284a21240b4dbca5bfc4a5a18e4), [adf3d06](https://github.com/ocsigen/js_of_ocaml/commit/adf3d06c02dd90b8b9b57c4fc27b7dbbdbff867d))\n- Fixed **integer overflow protection** in runtime operations to prevent DCE optimization issues ([029d985](https://github.com/ocsigen/js_of_ocaml/commit/029d985bed7da5ffd16fc216dadcd06803e5d968))\n- Enhanced **WASM object marshalling** with proper ID refresh during unmarshalling ([e78549a](https://github.com/ocsigen/js_of_ocaml/commit/e78549ae922ad762e72786da65e84841e4fdc7b6))\n- Improved **callback handling** in double translation mode with proper arity detection ([3c02f11](https://github.com/ocsigen/js_of_ocaml/commit/3c02f1159231a6c7a1ddd7345f9d2713722478d1))\n- Fixed **I/O channel position handling** for better Windows compatibility ([3c9e46f](https://github.com/ocsigen/js_of_ocaml/commit/3c9e46f0882da8ab8d5963c8093baeb478154ead))\n- Added comprehensive **JavaScript stacktrace documentation** with usage examples for `Js.Js_error.attach_js_backtrace` and environment variable configuration ([be5bf51](https://github.com/ocsigen/js_of_ocaml/commit/be5bf51e95c4c4c2f6fc3ba3c5d6d6895dc4cdde))\n- Created new **environment variable documentation** explaining resolution order and `globalThis.jsoo_env` usage for web browsers ([be8f842](https://github.com/ocsigen/js_of_ocaml/commit/be8f84222beb4f0c05965b075a5b34bb93a2788b))\n- Added **awesome-js_of_ocaml.md** resource collection documenting third-party libraries, bindings, and alternative stdlibs ([b64a46c](https://github.com/ocsigen/js_of_ocaml/commit/b64a46c9e182d8b959ea9fa42bb69f43892dbb7f))", "activity_summary": "Major test suite expansion with comprehensive OCaml test imports and runtime stability improvements", "activity": "- **Test suite expansion** with import of numerous OCaml compiler tests covering basic operations, floating-point handling, effects, lazy evaluation, and standard library functions ([64dcb4c](https://github.com/ocsigen/js_of_ocaml/commit/64dcb4c041fb58c423c38a90470c13bc02219a09))\n- **Runtime stability improvements** addressing multiple edge cases in numeric operations, file system interactions, and cross-platform compatibility\n- **Documentation maintenance** with closure of long-standing documentation issues about third-party libraries ([#1217](https://github.com/ocsigen/js_of_ocaml/issues/1217)) and JavaScript error handling features ([#1044](https://github.com/ocsigen/js_of_ocaml/issues/1044))\n- **Build system updates** with improved test synchronization tools and better Windows support", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on runtime robustness and comprehensive testing infrastructure", "emerging_trends": "- **Runtime hardening** efforts targeting edge cases in numeric computations and file system operations across different platforms\n- **Cross-platform compatibility** improvements with specific attention to Windows and Node.js environments\n- **Test coverage expansion** through systematic import of OCaml compiler test suite to ensure compatibility\n- **Documentation consolidation** with centralized resource collections and improved developer guidance", "issues_summary": null, "good_first_issues": null, "contributors_summary": "[@hhugo](https://github.com/hhugo) led development with runtime fixes, documentation improvements, and issue management", "contributors": "- [@hhugo](https://github.com/hhugo) implemented multiple runtime fixes including Unix stat functions, float parsing improvements, and WASM marshalling enhancements, created comprehensive documentation for JavaScript stacktrace features and environment variables, authored the awesome-js_of_ocaml resource collection, and closed documentation issues [#1217](https://github.com/ocsigen/js_of_ocaml/issues/1217) and [#1044](https://github.com/ocsigen/js_of_ocaml/issues/1044)\n- [@hhugo](https://github.com/hhugo) opened issue [#1818](https://github.com/ocsigen/js_of_ocaml/issues/1818) seeking guidance on WASM WAT file editing tools and workflows to improve the development experience for WebAssembly runtime modifications", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 4, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-01-20 to 2025-01-26", "brief_summary": "Resolution of dead code elimination and React Native deployment issues with test suite organization improvements", "overall_activity": "- **Dead code elimination bug** resolved for React Native deployments where filesystem dependencies were unnecessarily included ([#1809](https://github.com/ocsigen/js_of_ocaml/issues/1809))\n- **Test suite synchronization** task completed to align tests-ocaml directory with upstream OCaml repository ([#1804](https://github.com/ocsigen/js_of_ocaml/issues/1804))", "ongoing_summary": null, "ongoing_projects": null, "priority_summary": "React Native deployment compatibility and cross-platform build configuration improvements", "priority_items": "- **React Native deployment** compatibility issues requiring better target environment configuration for platforms lacking standard Node.js modules ([#1809](https://github.com/ocsigen/js_of_ocaml/issues/1809))\n- **Target environment flags** configuration needs clearer documentation for browser vs Node.js vs React Native environments ([#1809](https://github.com/ocsigen/js_of_ocaml/issues/1809))", "discussions_summary": "Technical solutions for cross-platform deployment and build configuration challenges", "notable_discussions": "- **Dead code elimination** discussion between [@xzxzzxzxzca](https://github.com/xzxzzxzxzca) and [@hhugo](https://github.com/hhugo) about filesystem dependencies being included despite optimization flags ([#1809](https://github.com/ocsigen/js_of_ocaml/issues/1809))\n- **Target environment configuration** guidance provided for browser vs Node.js compilation with `--target-env` flags and runtime build configuration ([#1809](https://github.com/ocsigen/js_of_ocaml/issues/1809))", "trends_summary": "Focus on cross-platform deployment compatibility and build tooling improvements", "emerging_trends": "- **Cross-platform deployment** challenges highlighting need for better React Native support and target environment configuration ([#1809](https://github.com/ocsigen/js_of_ocaml/issues/1809))\n- **Build tooling maintenance** with emphasis on keeping test suites synchronized with upstream OCaml changes ([#1804](https://github.com/ocsigen/js_of_ocaml/issues/1804))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Community issue reporting with maintainer guidance on build configuration", "contributors": "- [@xzxzzxzxzca](https://github.com/xzxzzxzxzca) reported React Native deployment issues with dead code elimination ([#1809](https://github.com/ocsigen/js_of_ocaml/issues/1809))\n- [@hhugo](https://github.com/hhugo) provided technical guidance on target environment configuration and completed test suite organization ([#1804](https://github.com/ocsigen/js_of_ocaml/issues/1804), [#1809](https://github.com/ocsigen/js_of_ocaml/issues/1809))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 3, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-01-13 to 2025-01-19", "brief_summary": "WASM optimization work and test infrastructure improvements for js_of_ocaml", "overall_activity": "- [@hhugo](https://github.com/hhugo) focused on **test infrastructure improvements** with synchronization of tests-ocaml directory with upstream OCaml repository ([#1804](https://github.com/ocsigen/js_of_ocaml/issues/1804))\n- **WASM Windows compatibility** enhancements by [@hhugo](https://github.com/hhugo) addressing asset directory copying and path length issues ([#1797](https://github.com/ocsigen/js_of_ocaml/issues/1797))\n- [Jérôme Vouillon](https://github.com/vouillon) contributed **WASM performance optimizations** for statically known function calls, though work remains in draft status ([#1790](https://github.com/ocsigen/js_of_ocaml/pull/1790))", "ongoing_summary": "WASM optimization work and Windows compatibility fixes continue development", "ongoing_projects": "- **WASM function call optimization** by [Jérôme Vouillon](https://github.com/vouillon) enabling direct calls to statically known functions instead of loading code pointers from closures ([#1790](https://github.com/ocsigen/js_of_ocaml/pull/1790))\n- **Test infrastructure modernization** by [@hhugo](https://github.com/hhugo) to synchronize tests-ocaml directory with upstream OCaml repository, including scripting automation and documentation improvements ([#1804](https://github.com/ocsigen/js_of_ocaml/issues/1804))", "priority_summary": "Windows WASM compatibility issues need resolution for proper CI functionality", "priority_items": "- **Windows WASM compatibility** requires fixing asset directory copying and path length limitations affecting CI builds ([#1797](https://github.com/ocsigen/js_of_ocaml/issues/1797))\n- **Binaryen toolchain issues** on Windows platform where wasm*.exe tools return without output, blocking WASM development workflow ([#1797](https://github.com/ocsigen/js_of_ocaml/issues/1797))", "discussions_summary": "Technical discussions around WASM toolchain compatibility and optimization approaches", "notable_discussions": "- **Path length limitations** on Windows affecting WASM asset generation, with [Jérôme Vouillon](https://github.com/vouillon) identifying specific filename length thresholds causing \"no such file or directory\" errors ([#1797](https://github.com/ocsigen/js_of_ocaml/issues/1797))\n- **Binaryen toolchain problems** on Windows where [@hhugo](https://github.com/hhugo) reports wasm*.exe utilities failing silently, with [Jérôme Vouillon](https://github.com/vouillon) unable to reproduce the issue ([#1797](https://github.com/ocsigen/js_of_ocaml/issues/1797))", "trends_summary": "Focus on WASM backend maturity with platform compatibility and performance work", "emerging_trends": "- **WASM backend stabilization** with both performance optimizations and cross-platform compatibility fixes being prioritized ([#1790](https://github.com/ocsigen/js_of_ocaml/pull/1790), [#1797](https://github.com/ocsigen/js_of_ocaml/issues/1797))\n- **Test infrastructure alignment** with upstream OCaml project to maintain compatibility and reduce maintenance burden ([#1804](https://github.com/ocsigen/js_of_ocaml/issues/1804))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Core maintainers @hhugo and Jérôme Vouillon driving WASM and infrastructure work", "contributors": "- [@hhugo](https://github.com/hhugo) focused on **infrastructure improvements** including Windows WASM compatibility fixes and test synchronization with upstream OCaml ([#1797](https://github.com/ocsigen/js_of_ocaml/issues/1797), [#1804](https://github.com/ocsigen/js_of_ocaml/issues/1804))\n- [Jérôme Vouillon](https://github.com/vouillon) working on **WASM performance optimizations** and providing technical debugging assistance for Windows compatibility issues ([#1790](https://github.com/ocsigen/js_of_ocaml/pull/1790), [#1797](https://github.com/ocsigen/js_of_ocaml/issues/1797))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 2, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2025-01-06 to 2025-01-12", "brief_summary": "WASM optimization work and runtime architecture improvements", "overall_activity": "- **WASM optimization** development by [Jérôme Vouillon](https://github.com/vouillon) implementing direct calls to statically known functions ([#1790](https://github.com/ocsigen/js_of_ocaml/issues/1790))\n- **Runtime architecture** enhancement proposed by [@hhugo](https://github.com/hhugo) to split JSPI and CPS effect runtime components for better readability ([#1788](https://github.com/ocsigen/js_of_ocaml/issues/1788))\n- **Build system** modernization attempt by [Sora Morimoto](https://github.com/smorimoto) using dune-build-info for version management ([#1783](https://github.com/ocsigen/js_of_ocaml/issues/1783))", "ongoing_summary": "WASM performance optimizations and runtime code organization improvements", "ongoing_projects": "- **Double translation lambda lifting** optimizations being refined by [Jérôme Vouillon](https://github.com/vouillon) to reduce unnecessary function lifting ([#1792](https://github.com/ocsigen/js_of_ocaml/issues/1792))\n- **WASM function call optimization** draft implementation exploring direct calls instead of closure indirection ([#1790](https://github.com/ocsigen/js_of_ocaml/issues/1790))\n- **Effect runtime refactoring** discussion about separating JSPI and CPS components into dedicated files with clearer naming ([#1788](https://github.com/ocsigen/js_of_ocaml/issues/1788))", "priority_summary": "Runtime architecture decisions and WASM optimization approach need review", "priority_items": "- **Runtime organization** decision needed on [@hhugo](https://github.com/hhugo)'s proposal to split effect.wat into separate JSPI and CPS files ([#1788](https://github.com/ocsigen/js_of_ocaml/issues/1788))\n- **Lambda lifting refinement** requires implementation of [Jérôme Vouillon](https://github.com/vouillon)'s optimization to avoid lifting functions without free variables ([#1792](https://github.com/ocsigen/js_of_ocaml/issues/1792))\n- **WASM optimization approach** evaluation needed for draft PR that has conflicts and requires review decisions ([#1790](https://github.com/ocsigen/js_of_ocaml/issues/1790))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on WASM performance improvements and runtime code organization", "emerging_trends": "- **WASM performance focus** with direct function call optimizations and compilation strategy improvements ([#1790](https://github.com/ocsigen/js_of_ocaml/issues/1790), [#1792](https://github.com/ocsigen/js_of_ocaml/issues/1792))\n- **Runtime architecture refinement** toward cleaner separation of concerns in effect handling systems ([#1788](https://github.com/ocsigen/js_of_ocaml/issues/1788))\n- **Build system modernization** attempts to leverage dune ecosystem tools for better version management ([#1783](https://github.com/ocsigen/js_of_ocaml/issues/1783))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active development by core maintainers focusing on performance and architecture", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon): WASM optimization implementation and lambda lifting improvements ([#1790](https://github.com/ocsigen/js_of_ocaml/issues/1790), [#1792](https://github.com/ocsigen/js_of_ocaml/issues/1792))\n- [@hhugo](https://github.com/hhugo): Runtime architecture enhancement proposals for effect handling ([#1788](https://github.com/ocsigen/js_of_ocaml/issues/1788))\n- [Sora Morimoto](https://github.com/smorimoto): Build system modernization work with dune-build-info integration ([#1783](https://github.com/ocsigen/js_of_ocaml/issues/1783))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 1, "year": 2025, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-12-30 to 2025-01-05", "brief_summary": "Continuation performance improvements completed and version management modernization work initiated", "overall_activity": "- **Continuation performance optimization** work concluded with [Jérôme Vouillon](https://github.com/vouillon) closing the original enhancement request ([#1658](https://github.com/ocsigen/js_of_ocaml/issues/1658)) and [@hhugo](https://github.com/hhugo) closing the related WASM-specific follow-up ([#1779](https://github.com/ocsigen/js_of_ocaml/issues/1779))\n- **Build system modernization** effort started by [Sora Morimoto](https://github.com/smorimoto) with draft PR to integrate dune-build-info for version management ([#1783](https://github.com/ocsigen/js_of_ocaml/pull/1783))", "ongoing_summary": "Version management modernization work needs refinement to address build conflicts and version reporting issues", "ongoing_projects": "- **Dune-build-info integration** by [Sora Morimoto](https://github.com/smorimoto) to simplify package version management, currently blocked by build conflicts and incorrect version reporting in mono-repo setups ([#1783](https://github.com/ocsigen/js_of_ocaml/pull/1783))", "priority_summary": "Draft PR requires conflict resolution and version reporting fixes before merge consideration", "priority_items": "- **Build conflicts resolution** needed for dune-build-info integration PR which currently has mergeable status \"CONFLICTING\" and affects 22 files ([#1783](https://github.com/ocsigen/js_of_ocaml/pull/1783))\n- **Version reporting accuracy** issue where expected version prefix should be 5.9.1 but currently shows 5.9.0-617-g3b9f656 ([#1783](https://github.com/ocsigen/js_of_ocaml/pull/1783))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on build system modernization and performance optimization for continuation handling", "emerging_trends": "- **Build tooling modernization** with adoption of dune-build-info for automated version management across the js_of_ocaml ecosystem ([#1783](https://github.com/ocsigen/js_of_ocaml/pull/1783))\n- **Continuation performance improvements** completed across both standard and WebAssembly implementations, aligning with upstream OCaml optimizations from [ocaml/ocaml#12735](https://github.com/ocaml/ocaml/issues/12735) ([#1658](https://github.com/ocsigen/js_of_ocaml/issues/1658), [#1779](https://github.com/ocsigen/js_of_ocaml/issues/1779))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three contributors active with completion of performance work and initiation of build system improvements", "contributors": "- [Jérôme Vouillon](https://github.com/vouillon) completed **continuation performance enhancement** work by closing the foundational issue ([#1658](https://github.com/ocsigen/js_of_ocaml/issues/1658))\n- [@hhugo](https://github.com/hhugo) finalized **WASM-specific continuation optimizations** by resolving the related enhancement request ([#1779](https://github.com/ocsigen/js_of_ocaml/issues/1779))\n- [Sora Morimoto](https://github.com/smorimoto) initiated **build system modernization** work with dune-build-info integration draft PR ([#1783](https://github.com/ocsigen/js_of_ocaml/pull/1783))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 52, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-12-23 to 2024-12-29", "brief_summary": null, "overall_activity": null, "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 51, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-12-16 to 2024-12-22", "brief_summary": null, "overall_activity": null, "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 50, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-12-09 to 2024-12-15", "brief_summary": null, "overall_activity": null, "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 49, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-12-02 to 2024-12-08", "brief_summary": "Release 5.9.1 published with deprecated runtime primitives mechanism and caml_new_string re-introduction", "overall_activity": "- **Release 5.9.1** published by [@hhugo](https://github.com/hhugo) with **deprecation mechanism** for runtime primitives and **caml_new_string re-introduction** ([release](https://github.com/ocsigen/js_of_ocaml/releases/tag/5.9.1))", "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on maintaining backward compatibility while introducing deprecation mechanisms for runtime primitives", "emerging_trends": "- **Runtime primitive deprecation** mechanism added to help transition away from legacy APIs while maintaining compatibility\n- **Backward compatibility** maintained by re-introducing caml_new_string (marked as deprecated) for existing code ([release](https://github.com/ocsigen/js_of_ocaml/releases/tag/5.9.1))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "[@hhugo](https://github.com/hhugo) published release 5.9.1 with compiler and runtime improvements", "contributors": "- [@hhugo](https://github.com/hhugo) published **version 5.9.1** with **deprecation mechanism** for runtime primitives and **caml_new_string** re-introduction ([release](https://github.com/ocsigen/js_of_ocaml/releases/tag/5.9.1))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 48, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-11-25 to 2024-12-01", "brief_summary": null, "overall_activity": null, "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 47, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-11-18 to 2024-11-24", "brief_summary": "Release 5.9.0 published by @hhugo with compiler optimizations, runtime improvements, and OCaml 5.3 support", "overall_activity": "- **Version 5.9.0 release** published by [@hhugo](https://github.com/hhugo) on November 22nd featuring comprehensive **compiler optimizations** and **runtime improvements** ([release](https://github.com/ocsigen/js_of_ocaml/releases/tag/5.9.0))\n- **OCaml 5.3 finalization support** completed with testsuite updates to **OCaml 5.2** and **CI infrastructure modernization** using opam.2.2\n- **Global dead code elimination improvements** and **speedup optimizations** for global_flow and global_deadcode passes on large bytecode files\n- **Source map generation enhancements** including improved index source map emission and decode optimizations for better debugging support\n- **Runtime system overhaul** with rewritten weak and ephemeron implementations, **backtraces optimization**, and **dynlink support** for precompiled JavaScript", "ongoing_summary": "Compiler pipeline preparation for wasm_of_ocaml merge with Wasm backend support and Targetint module introduction", "ongoing_projects": "- **WebAssembly backend integration** preparation with **Targetint module** introduction following backend semantics and **Wasm support** added to compiler pipeline ([release](https://github.com/ocsigen/js_of_ocaml/releases/tag/5.9.0))\n- **Typed_array API modifications** for **WebAssembly compatibility** ensuring consistent behavior across JavaScript and WebAssembly targets\n- **Runtime system modernization** with **separate compilation support** for dynlink of precompiled JavaScript files and improved **constant precomputation** optimizations", "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": "Performance optimization focus with compiler speedup improvements and runtime efficiency enhancements", "emerging_trends": "- **Performance-first development approach** with **global deadcode elimination improvements**, **JSON parsing speedup** using Yojson.Raw, and **global_flow optimization** for large bytecode processing ([release](https://github.com/ocsigen/js_of_ocaml/releases/tag/5.9.0))\n- **WebAssembly ecosystem preparation** through **API compatibility updates**, **Targetint semantic alignment**, and **Wasm backend pipeline integration** for upcoming wasm_of_ocaml merge\n- **Runtime debugging optimization** with **backtrace performance improvements** requiring explicit compilation flags (--enable with-js-error) or startup parameters (OCAMLRUNPARAM=b=1) for cost-conscious debugging", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Primary release activity by @hhugo with comprehensive feature development and maintenance", "contributors": "- **Release management and development** by [@hhugo](https://github.com/hhugo) with **version 5.9.0 publication** including extensive **compiler optimizations**, **runtime improvements**, and **OCaml 5.3 support** finalization ([release](https://github.com/ocsigen/js_of_ocaml/releases/tag/5.9.0))", "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 46, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-11-11 to 2024-11-17", "brief_summary": null, "overall_activity": null, "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 45, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-11-04 to 2024-11-10", "brief_summary": null, "overall_activity": null, "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 44, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-10-28 to 2024-11-03", "brief_summary": null, "overall_activity": null, "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 43, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-10-21 to 2024-10-27", "brief_summary": null, "overall_activity": null, "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 42, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-10-14 to 2024-10-20", "brief_summary": null, "overall_activity": null, "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}, {"week": 41, "year": 2024, "repo": "ocsigen/js_of_ocaml", "week_range": "2024-10-07 to 2024-10-13", "brief_summary": null, "overall_activity": null, "ongoing_summary": null, "ongoing_projects": null, "priority_summary": null, "priority_items": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocsigen", "repo_name": "js_of_ocaml", "repo_full": "ocsigen/js_of_ocaml"}]}