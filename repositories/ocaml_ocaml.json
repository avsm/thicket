{"repo_full": "ocaml/ocaml", "org": "ocaml", "repo_name": "ocaml", "total_weeks": 49, "summaries": [{"week": 38, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-09-15 to 2025-09-21", "start_commit": "27ccbcc05e22a257a61a875d09ca704dd5ad510a", "end_commit": "27ccbcc05e22a257a61a875d09ca704dd5ad510a", "brief_summary": "Focus on AST refactoring, TSan bug fixes, and new stdlib addition with one variadic macro fix merged", "new_features_summary": "Fixed variadic macro warnings in C runtime headers for better compiler compatibility", "new_features": "- Fixed **variadic macro warnings** in C runtime headers (`misc.h`) by correcting parameter handling in `CAMLrealloc`, `CAMLalloc`, `CAMLmalloc`, `CAMLcalloc`, and `CAMLaligned_alloc` macros to prevent C warnings under certain conditions ([27ccbcc](https://github.com/ocaml/ocaml/commit/27ccbcc05e22a257a61a875d09ca704dd5ad510a))", "activity_summary": "Seven new PRs opened including typing recovery, TSan fixes, and relocatable OCaml work, with three PRs merged", "activity": "- **Seven new PRs opened** this week including [Olivier Nicole](https://github.com/OlivierNicole)'s TSan bug fix for C calls with many arguments ([#14255](https://github.com/ocaml/ocaml/issues/14255)), [Xavier Van de Woestyne](https://github.com/xvw)'s Merlin typing recovery implementation ([#14241](https://github.com/ocaml/ocaml/issues/14241)), [David Allsopp](https://github.com/dra27)'s opam scripts restoration ([#14250](https://github.com/ocaml/ocaml/issues/14250)), and [Takafumi Saikawa](https://github.com/t6s)'s `#show_constructor` fix ([#14239](https://github.com/ocaml/ocaml/issues/14239))\n- **Three PRs merged** including [Gabriel Scherer](https://github.com/gasche)'s AST location functions refactoring ([#14237](https://github.com/ocaml/ocaml/issues/14237)), [Raphael Proust](https://github.com/raphael-proust)'s domain systhreads documentation ([#14248](https://github.com/ocaml/ocaml/issues/14248)), and [Emile Trotignon](https://github.com/EmileTrotignon)'s stdlib `filter_mapi` function addition ([#14227](https://github.com/ocaml/ocaml/issues/14227))\n- **Threading and runtime improvements** with [Olivier Nicole](https://github.com/OlivierNicole) advancing TSan shadow stack bug fixes ([#14213](https://github.com/ocaml/ocaml/issues/14213)) and [Guillaume Munch-Maccagnoni](https://github.com/gadmm) refining Domain.spawn error handling ([#12410](https://github.com/ocaml/ocaml/issues/12410))\n- **Typing system enhancements** via [Olivier Nicole](https://github.com/OlivierNicole)'s work on existentials in as-patterns ([#14229](https://github.com/ocaml/ocaml/issues/14229)) and [David Allsopp](https://github.com/dra27)'s relocatable OCaml development with explicit-relative paths in `ld.conf` ([#14243](https://github.com/ocaml/ocaml/issues/14243))\n- **Lazy evaluation research** continues with [Gabriel Scherer](https://github.com/gasche)'s atomic repeating lazy thunks proposal ([#14043](https://github.com/ocaml/ocaml/issues/14043))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Continued focus on multicore robustness, build system improvements, and type system refinements", "emerging_trends": "- **Threading robustness** improvements with multiple TSan-related bug fixes and Domain error handling enhancements targeting production multicore stability ([#14213](https://github.com/ocaml/ocaml/issues/14213), [#14255](https://github.com/ocaml/ocaml/issues/14255), [#12410](https://github.com/ocaml/ocaml/issues/12410))\n- **Developer experience enhancements** through Merlin typing recovery upstreaming ([#14241](https://github.com/ocaml/ocaml/issues/14241)) and better error messages for GADT patterns and recursive modules ([#14224](https://github.com/ocaml/ocaml/issues/14224), [#12628](https://github.com/ocaml/ocaml/issues/12628))\n- **Build system modernization** with relocatable OCaml implementation, opam integration improvements, and Windows compatibility fixes ([#14243](https://github.com/ocaml/ocaml/issues/14243), [#14250](https://github.com/ocaml/ocaml/issues/14250), [#13704](https://github.com/ocaml/ocaml/issues/13704))\n- **Type system edge case resolution** addressing GADTs, existentials, and rigid type annotations ([#14254](https://github.com/ocaml/ocaml/issues/14254), [#14229](https://github.com/ocaml/ocaml/issues/14229), [#14253](https://github.com/ocaml/ocaml/issues/14253))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Eight contributors active including three merges by Gabriel, Raphael, and Emile plus ongoing work by Olivier, David, and others", "contributors": "- [Gabriel Scherer](https://github.com/gasche) merged AST location functions refactoring ([#14237](https://github.com/ocaml/ocaml/issues/14237)) and provided extensive review feedback on multiple typing-related issues ([#14254](https://github.com/ocaml/ocaml/issues/14254), [#14253](https://github.com/ocaml/ocaml/issues/14253))\n- [Olivier Nicole](https://github.com/OlivierNicole) opened multiple TSan bug fixes ([#14255](https://github.com/ocaml/ocaml/issues/14255), [#14213](https://github.com/ocaml/ocaml/issues/14213)) and advanced existentials work ([#14229](https://github.com/ocaml/ocaml/issues/14229)) while merging quick TSan build fix ([#14252](https://github.com/ocaml/ocaml/issues/14252))\n- [David Allsopp](https://github.com/dra27) opened relocatable OCaml PR with comprehensive `ld.conf` improvements ([#14243](https://github.com/ocaml/ocaml/issues/14243)) and opam scripts restoration work ([#14250](https://github.com/ocaml/ocaml/issues/14250))\n- [Emile Trotignon](https://github.com/EmileTrotignon) successfully merged new stdlib `filter_mapi` function ([#14227](https://github.com/ocaml/ocaml/issues/14227))\n- [Raphael Proust](https://github.com/raphael-proust) merged domain systhreads documentation improvements ([#14248](https://github.com/ocaml/ocaml/issues/14248))\n- [Takafumi Saikawa](https://github.com/t6s) opened fix for `#show_constructor` type parameter printing ([#14239](https://github.com/ocaml/ocaml/issues/14239))\n- [Xavier Van de Woestyne](https://github.com/xvw) opened substantial Merlin typing recovery implementation ([#14241](https://github.com/ocaml/ocaml/issues/14241))\n- [Nicolás Ojeda Bär](https://github.com/nojb) provided review coordination and merge approvals across multiple PRs", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 37, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-09-08 to 2025-09-14", "start_commit": "ba67146c64f9abd8928d19b2e19b42f4b2ba1195", "end_commit": "a34d7cf5b969ccc97f5ca7cd173ffc58b9794ff5", "brief_summary": "Native debugging documentation, private constructor warning fixes, compaction integrity improvements, and variance syntax documentation.", "new_features_summary": "Native debugging manual chapter, private constructor warning suppression, and compaction integer overflow fixes.", "new_features": "- **Native debugging manual chapter** added comprehensive documentation for debugging OCaml programs with GDB and LLDB, including DWARF support, CFI information, and practical debugging workflows ([#13747](https://github.com/ocaml/ocaml/issues/13747))\n- **Private constructor warning suppression** eliminates unused-constructor warnings for private variant constructors (e.g., `type safe = private Safe`) typically used as GADT indices ([#14225](https://github.com/ocaml/ocaml/issues/14225))\n- **Compaction integer overflow fixes** improve heap compaction safety by implementing proper integral type hygiene throughout compaction code ([#14123](https://github.com/ocaml/ocaml/issues/14123))\n- **Variance syntax documentation** documents the bivariance indicators (`+-`, `-+`) introduced in [#13820](https://github.com/ocaml/ocaml/issues/13820) ([#14126](https://github.com/ocaml/ocaml/issues/14126))\n- **AST mapper location handling** fixes forgotten location mapping in toplevel directive arguments for tools like ocamlformat ([#14236](https://github.com/ocaml/ocaml/issues/14236))\n- **Format.sprintf documentation** clarifies the difference between `sprintf` and `asprintf` regarding `%a` format specifier handling ([#14226](https://github.com/ocaml/ocaml/issues/14226))", "activity_summary": "Major documentation updates, compiler warnings improvements, build system fixes, and ongoing large-scale feature development.", "activity": "- **New PRs opened** include filter_mapi function for stdlib by [Emile Trotignon](https://github.com/EmileTrotignon) ([#14227](https://github.com/ocaml/ocaml/issues/14227)), Merlin's typing recovery integration by [Xavier Van de Woestyne](https://github.com/xvw) ([#14241](https://github.com/ocaml/ocaml/issues/14241)), and relocatable OCaml implementation by [David Allsopp](https://github.com/dra27) ([#14244](https://github.com/ocaml/ocaml/issues/14244), [#14245](https://github.com/ocaml/ocaml/issues/14245))\n- **Android cross-build fixes** merged by [Antonin Décimo](https://github.com/MisterDA) addressing undeclared function errors and updating GitHub Actions workflows ([#14240](https://github.com/ocaml/ocaml/issues/14240))\n- **Build system improvements** included Makefile variable scoping fixes by [Damien Doligez](https://github.com/damiendoligez) ([#14231](https://github.com/ocaml/ocaml/issues/14231)), ocamltest linking criterion fixes ([#14230](https://github.com/ocaml/ocaml/issues/14230)), and test-in-prefix workflow corrections ([#14216](https://github.com/ocaml/ocaml/issues/14216))\n- **AppVeyor CI updates** by [David Allsopp](https://github.com/dra27) fixed testsuite skipping and added mingw-runtime version reporting ([#14242](https://github.com/ocaml/ocaml/issues/14242))\n- **Active development** continues on Windows concurrency primitives migration ([#13416](https://github.com/ocaml/ocaml/issues/13416)), transparent ascription feature implementation ([#14064](https://github.com/ocaml/ocaml/issues/14064)), and as-pattern existential handling ([#14229](https://github.com/ocaml/ocaml/issues/14229))", "discussions_summary": "Technical discussions focus on GADT warning behavior, typing recovery integration, and manual improvements.", "notable_discussions": "- **GADT warning regression** discussed in [#14224](https://github.com/ocaml/ocaml/issues/14224) where [Gabriel Scherer](https://github.com/gasche) and [Kate](https://github.com/kit-ty-kate) explored solutions for partial-match warnings triggered by GADTs in trunk\n- **Merlin typing recovery** integration conversation between [Nicolás Ojeda Bär](https://github.com/nojb) and [Xavier Van de Woestyne](https://github.com/xvw) regarding upstreaming to reduce compiler-libs dependencies ([#14241](https://github.com/ocaml/ocaml/issues/14241))\n- **Manual improvements** coordination between [Tim McGilchrist](https://github.com/tmcgilchrist) and [Olivier Nicole](https://github.com/OlivierNicole) about backporting native debugging documentation to 5.4 ([#13747](https://github.com/ocaml/ocaml/issues/13747))\n- **Extension constructor printing** technical discussion between [Takafumi Saikawa](https://github.com/t6s), [Gabriel Scherer](https://github.com/gasche), and [Jacques Garrigue](https://github.com/garrigue) about type parameter handling in `#show_constructor` ([#14239](https://github.com/ocaml/ocaml/issues/14239))", "trends_summary": "Focus on developer experience improvements through better documentation, tooling integration, and warning system refinements.", "emerging_trends": "- **Developer experience prioritization** evident through comprehensive native debugging documentation, improved compiler warnings, and better tooling integration\n- **Large-scale architectural changes** progressing with relocatable OCaml implementation, transparent ascription features, and Windows platform modernization\n- **Cross-platform consistency** improvements including Android build fixes, Windows CI updates, and architecture-specific optimizations\n- **Community-driven contributions** from external contributors addressing documentation gaps and standard library functionality\n- **Build system modernization** with cleaner variable scoping, better test workflows, and more reliable CI infrastructure", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Core team and external contributors active in documentation, warnings, build fixes, and major feature development.", "contributors": "- [Gabriel Scherer](https://github.com/gasche) implemented private constructor warning fixes ([#14225](https://github.com/ocaml/ocaml/issues/14225)) and led technical discussions on GADT behavior and AST mapper improvements\n- [Tim McGilchrist](https://github.com/tmcgilchrist) authored comprehensive native debugging manual chapter ([#13747](https://github.com/ocaml/ocaml/issues/13747)) covering GDB, LLDB, DWARF, and profiling workflows\n- [David Allsopp](https://github.com/dra27) contributed AppVeyor CI fixes ([#14242](https://github.com/ocaml/ocaml/issues/14242)) and opened major relocatable OCaml PRs for community review\n- [Florian Angeletti](https://github.com/Octachron) fixed AST mapper location handling ([#14236](https://github.com/ocaml/ocaml/issues/14236)) and provided code reviews across multiple PRs\n- [@MisterDA](https://github.com/MisterDA) resolved Android cross-build issues ([#14240](https://github.com/ocaml/ocaml/issues/14240)) and addressed Make undefined variable warnings ([#14234](https://github.com/ocaml/ocaml/issues/14234))\n- [@damiendoligez](https://github.com/damiendoligez) fixed multiple build system issues including Makefile local variables ([#14231](https://github.com/ocaml/ocaml/issues/14231)) and test workflows ([#14216](https://github.com/ocaml/ocaml/issues/14216), [#14230](https://github.com/ocaml/ocaml/issues/14230))\n- [@NickBarnes](https://github.com/NickBarnes) contributed compaction integer overflow fixes ([#14123](https://github.com/ocaml/ocaml/issues/14123)) improving runtime safety\n- [Emile Trotignon](https://github.com/EmileTrotignon) opened filter_mapi stdlib addition ([#14227](https://github.com/ocaml/ocaml/issues/14227)) and improved Format documentation ([#14226](https://github.com/ocaml/ocaml/issues/14226))\n- [@t6s](https://github.com/t6s) documented variance syntax changes ([#14126](https://github.com/ocaml/ocaml/issues/14126)) and worked on show_constructor improvements ([#14239](https://github.com/ocaml/ocaml/issues/14239))\n- [@xvw](https://github.com/xvw) opened Merlin typing recovery integration PR ([#14241](https://github.com/ocaml/ocaml/issues/14241)) for upstreaming community tooling improvements", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 36, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-09-01 to 2025-09-07", "start_commit": "d487ddfaa8a353441253adca8266ae2bde559bb7", "end_commit": "3224d3d8413825ac7b536ba1bb9cddfe26bc1041", "brief_summary": "Week focused on C++ compatibility fixes, error message improvements, and new stdlib function proposals", "new_features_summary": "C++ name-mangling fix for Cygwin, improved module inclusion error messages, manual documentation updates", "new_features": "- **C++ compatibility fix** for Cygwin resolving name-mangling issues with `caml_state` when linking with flexlink ([#14220](https://github.com/ocaml/ocaml/issues/14220))\n- **Module inclusion error messages** improvements fixing confused error messages for functor inclusions that were missing type equalities ([#14221](https://github.com/ocaml/ocaml/issues/14221))\n- **Manual attributes page** fixes and improvements to documentation ([#14233](https://github.com/ocaml/ocaml/issues/14233))\n- **ThreadSanitizer support** improvements with fixes for deliberately racy tests to reduce false positives ([#14232](https://github.com/ocaml/ocaml/issues/14232), [#14219](https://github.com/ocaml/ocaml/issues/14219))\n- **Toplevel constructor printing** improvements for better display of qualified names ([#14192](https://github.com/ocaml/ocaml/issues/14192))", "activity_summary": "Multiple new PRs opened including stdlib additions and GADT improvements, with several bug fixes merged", "activity": "- **New standard library function** proposed by [Emile Trotignon](https://github.com/EmileTrotignon) adding `filter_mapi` function to combine filtering and mapping with indices ([#14227](https://github.com/ocaml/ocaml/issues/14227))\n- **Relocatable OCaml initiative** advanced with [David Allsopp](https://github.com/dra27) opening comprehensive PR for opam integration and installation mechanism improvements ([#14246](https://github.com/ocaml/ocaml/issues/14246))\n- **GADT existentials support** enhanced by [Olivier Nicole](https://github.com/OlivierNicole) allowing retyping of as-patterns containing existentials ([#14229](https://github.com/ocaml/ocaml/issues/14229))\n- **Variance syntax documentation** merged by [Takafumi Saikawa](https://github.com/t6s) explaining bivariance indicators introduced in earlier releases ([#14126](https://github.com/ocaml/ocaml/issues/14126))\n- **Initialization flag improvements** in progress by [Emile Trotignon](https://github.com/EmileTrotignon) making `-init` work correctly with `-e` flag ([#14190](https://github.com/ocaml/ocaml/issues/14190))\n- **Private constructor warnings** fixed by [Gabriel Scherer](https://github.com/gasche) silencing unused-constructor warnings for private variant constructors ([#14225](https://github.com/ocaml/ocaml/issues/14225))", "discussions_summary": "Active discussions on GADT warning changes, multicore performance issues, and C++ compatibility concerns", "notable_discussions": "- **GADT warning behavior** heavily discussed in [#14224](https://github.com/ocaml/ocaml/issues/14224) regarding partial-match warnings triggered by GADTs in trunk, with [Kate Deplaix](https://github.com/kit-ty-kate) reporting backward compatibility concerns and [Gabriel Scherer](https://github.com/gasche) providing workaround solutions\n- **ThreadSanitizer race conditions** analyzed in [#14136](https://github.com/ocaml/ocaml/issues/14136) with [Nathan Taylor](https://github.com/dijkstracula) investigating benign races in `strstubs.c` and [Gabriel Scherer](https://github.com/gasche) suggesting potential fixes\n- **Multicore performance bottlenecks** investigated in [#14047](https://github.com/ocaml/ocaml/issues/14047) with [Nikos Gorogiannis](https://github.com/ngorogiannis) reporting prohibitive runtime lock waits in Infer analysis and [Gabriel Scherer](https://github.com/gasche) providing analysis guidance", "trends_summary": "Focus on multicore stability, C++ interoperability, and standard library ergonomics improvements", "emerging_trends": "- **C++ interoperability** receiving attention with name-mangling fixes and compatibility improvements for cross-platform development\n- **Error message quality** being systematically improved with clearer functor inclusion messages and better diagnostic output\n- **Standard library ergonomics** enhanced through community contributions adding commonly-requested utility functions\n- **ThreadSanitizer integration** being refined to reduce false positives while maintaining race detection capabilities\n- **Documentation quality** improved with manual updates and syntax clarifications for new language features", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active contributions from core team including Gabriel Scherer, Florian Angeletti, David Allsopp, and community members", "contributors": "- [Gabriel Scherer](https://github.com/gasche) implemented C++ name-mangling fix for Cygwin ([#14220](https://github.com/ocaml/ocaml/issues/14220)), fixed private constructor warnings ([#14225](https://github.com/ocaml/ocaml/issues/14225)), and provided guidance on various technical discussions\n- [Florian Angeletti](https://github.com/Octachron) improved module inclusion error messages ([#14221](https://github.com/ocaml/ocaml/issues/14221)), fixed manual attributes documentation ([#14233](https://github.com/ocaml/ocaml/issues/14233)), and provided extensive code reviews\n- [David Allsopp](https://github.com/dra27) opened major relocatable OCaml PR ([#14246](https://github.com/ocaml/ocaml/issues/14246)) and contributed to C++ compatibility discussions\n- [Emile Trotignon](https://github.com/EmileTrotignon) proposed stdlib `filter_mapi` function ([#14227](https://github.com/ocaml/ocaml/issues/14227)) and worked on initialization flag improvements ([#14190](https://github.com/ocaml/ocaml/issues/14190))\n- [Olivier Nicole](https://github.com/OlivierNicole) enhanced GADT existentials support ([#14229](https://github.com/ocaml/ocaml/issues/14229)) as part of Jane Street upstream integration\n- [Nicolás Ojeda Bär](https://github.com/nojb) provided code reviews and technical feedback across multiple PRs\n- [@t6s](https://github.com/t6s) contributed variance syntax documentation ([#14126](https://github.com/ocaml/ocaml/issues/14126))\n- [@damiendoligez](https://github.com/damiendoligez) fixed ThreadSanitizer issues for racy tests ([#14219](https://github.com/ocaml/ocaml/issues/14219))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 35, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-08-25 to 2025-08-31", "start_commit": "6b21d6a625650b45d20008da2fa6660ffdceaa89", "end_commit": "1ac6152ec7becb7a29ef69b9b42ff78effb19c3e", "brief_summary": "Memory model fixes for weak arrays, new List.split_map function, and improved error messages for functors and debugger tools.", "new_features_summary": "Added List.split_map function, fixed %identity nonexpansive recognition, improved debugger BUILD_PATH_PREFIX_MAP support.", "new_features": "- **New `List.split_map` function** in standard library that combines mapping and splitting operations for improved efficiency by [Jeremy Yallop](https://github.com/yallop) ([#14185](https://github.com/ocaml/ocaml/issues/14185))\n- **Enhanced %identity primitive recognition** allowing `%identity` to be recognized as nonexpansive, exempting `Obj.magic` and similar primitives from value restriction by [Olivier Nicole](https://github.com/OlivierNicole) ([#14029](https://github.com/ocaml/ocaml/issues/14029))\n- **Improved debugger path resolution** with `BUILD_PATH_PREFIX_MAP` inversion to enable `ocamldebug` to work properly with dune build systems by [Pierre Boutillier](https://github.com/pirbo) ([#14055](https://github.com/ocaml/ocaml/issues/14055))\n- **Fixed memory model for Weak.set** operations addressing data race issues and memory synchronization problems affecting concurrent usage of weak arrays by [Damien Doligez](https://github.com/damiendoligez) ([#14209](https://github.com/ocaml/ocaml/issues/14209))\n- **Enhanced variance checking** for private types fixing incorrect rejections when using private type aliases as GADT indices by [Jacques Garrigue](https://github.com/garrigue) ([#14202](https://github.com/ocaml/ocaml/issues/14202))\n- **Improved ocamltest output** displaying test names before execution for easier identification of slow-running tests by [Damien Doligez](https://github.com/damiendoligez) ([#14212](https://github.com/ocaml/ocaml/issues/14212))\n- **Better functor error messages** when a functor references itself in its own definition providing clearer diagnostic information by [Stefan Muenzel](https://github.com/smuenzel) ([#14215](https://github.com/ocaml/ocaml/issues/14215))", "activity_summary": "Five new PRs opened including error message fixes and TSan improvements, alongside twelve PRs merged addressing memory model and developer experience.", "activity": "- **Five new PRs opened** this week including inclusion check error message improvements by [Liam Stevenson](https://github.com/liam923) ([#14205](https://github.com/ocaml/ocaml/issues/14205)), runtime flag compatibility by [Damien Doligez](https://github.com/damiendoligez) ([#14211](https://github.com/ocaml/ocaml/issues/14211)), and TSan shadow stack fixes by [Olivier Nicole](https://github.com/OlivierNicole) ([#14213](https://github.com/ocaml/ocaml/issues/14213))\n- **Memory synchronization improvements** delivered through fast-tracked weak array fixes addressing persistent CI failures ([#14209](https://github.com/ocaml/ocaml/issues/14209)), ephemeron data race resolution ([#14210](https://github.com/ocaml/ocaml/issues/14210)), and TSan test updates ([#14203](https://github.com/ocaml/ocaml/issues/14203))\n- **Developer experience enhancements** through debugger path mapping improvements ([#14055](https://github.com/ocaml/ocaml/issues/14055)), better functor error messages ([#14215](https://github.com/ocaml/ocaml/issues/14215)), and module unpacking constraint fixes ([#14198](https://github.com/ocaml/ocaml/issues/14198))\n- **Standard library additions** including the new `List.split_map` function ([#14185](https://github.com/ocaml/ocaml/issues/14185)) and runtime system optimizations for ephemeron handling ([#14175](https://github.com/ocaml/ocaml/issues/14175))\n- **Platform-specific fixes** for NetBSD pthread compatibility ([#14208](https://github.com/ocaml/ocaml/issues/14208)) and minor documentation corrections in Format module ([#14194](https://github.com/ocaml/ocaml/issues/14194))", "discussions_summary": "Technical discussion on module subtyping improvements and variant type abbreviation exports.", "notable_discussions": "- **Module subtyping enhancement** discussed by [Jacques Garrigue](https://github.com/garrigue) regarding allowing type abbreviations to be exported as variants for improved API flexibility ([#14204](https://github.com/ocaml/ocaml/issues/14204))\n- **Memory model correctness** extensively analyzed in ongoing ephemeron data race investigation with detailed technical discussion about concurrent access patterns and synchronization requirements by [Gabriel Scherer](https://github.com/gasche) and others ([#14061](https://github.com/ocaml/ocaml/issues/14061))", "trends_summary": "Focus on memory model correctness, developer experience improvements, and standard library expansion.", "emerging_trends": "- **Memory model and concurrency focus** with multiple PRs addressing ThreadSanitizer failures, weak array data races, and ephemeron synchronization issues showing increased attention to multicore correctness\n- **Developer experience prioritization** through improved error messages, better debugger tooling, and enhanced development workflow support indicating focus on usability improvements\n- **Standard library evolution** with functional programming utilities like `List.split_map` and primitive optimization enhancements showing continued expansion of core functionality", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Thirteen contributors active with memory model fixes by Doligez and Scherer, library enhancements by Yallop, and error message improvements by multiple developers.", "contributors": "- [Damien Doligez](https://github.com/damiendoligez) delivered critical **memory model fixes** for weak arrays ([#14209](https://github.com/ocaml/ocaml/issues/14209)), ThreadSanitizer test updates ([#14203](https://github.com/ocaml/ocaml/issues/14203)), and ocamltest improvements ([#14212](https://github.com/ocaml/ocaml/issues/14212)), plus opened PR for runtime flag compatibility ([#14211](https://github.com/ocaml/ocaml/issues/14211))\n- [Gabriel Scherer](https://github.com/gasche) provided extensive **technical analysis** of ephemeron data races ([#14061](https://github.com/ocaml/ocaml/issues/14061)) and authored atomic write fixes for ephemeron data ([#14210](https://github.com/ocaml/ocaml/issues/14210))\n- [Jeremy Yallop](https://github.com/yallop) contributed the **new `List.split_map` function** enhancing standard library functional programming utilities ([#14185](https://github.com/ocaml/ocaml/issues/14185))\n- [Olivier Nicole](https://github.com/OlivierNicole) implemented **%identity nonexpansive recognition** improvements ([#14029](https://github.com/ocaml/ocaml/issues/14029)) and opened TSan shadow stack fixes ([#14213](https://github.com/ocaml/ocaml/issues/14213))\n- [Stefan Muenzel](https://github.com/smuenzel) improved **functor error messages** for recursive definitions ([#14215](https://github.com/ocaml/ocaml/issues/14215))\n- [@garrigue](https://github.com/garrigue) fixed **variance checking** for private types ([#14202](https://github.com/ocaml/ocaml/issues/14202)) and initiated module subtyping discussions ([#14204](https://github.com/ocaml/ocaml/issues/14204))\n- [@liam923](https://github.com/liam923) addressed **error message clarity** for inclusion checks involving ppx build artifacts ([#14205](https://github.com/ocaml/ocaml/issues/14205))\n- [@pirbo](https://github.com/pirbo) enhanced **debugger functionality** with BUILD_PATH_PREFIX_MAP support for dune compatibility ([#14055](https://github.com/ocaml/ocaml/issues/14055))\n- [@MisterDA](https://github.com/MisterDA) provided **NetBSD compatibility** fixes for pthread functions ([#14208](https://github.com/ocaml/ocaml/issues/14208))\n- [@smjleo](https://github.com/smjleo) contributed **documentation corrections** in Format module ([#14194](https://github.com/ocaml/ocaml/issues/14194))\n- [@kayceesrk](https://github.com/kayceesrk) delivered **runtime optimizations** for ephemeron status checking ([#14175](https://github.com/ocaml/ocaml/issues/14175))\n- [@trefis](https://github.com/trefis) fixed **module unpacking constraints** and grammar cleanup ([#14198](https://github.com/ocaml/ocaml/issues/14198))\n- [@bclement-ocp](https://github.com/bclement-ocp) reported **functor signature error** clarity issues ([#14214](https://github.com/ocaml/ocaml/issues/14214))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 34, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-08-18 to 2025-08-24", "start_commit": "150be346abde5afc76d6a07d01d37651e42fc15f", "end_commit": "2cbb0075e02bc2046b6724366fbd5b54949cd312", "brief_summary": "Runtime events documentation improvements and several bug fixes with new PRs for major language features", "new_features_summary": "Enhanced runtime events documentation with units clarification for memory counters", "new_features": "- **Enhanced runtime events documentation** with explicit {b words} units clarification for memory-related counters in the runtime_events.mli interface ([2cbb007](https://github.com/ocaml/ocaml/commit/2cbb0075e02bc2046b6724366fbd5b54949cd312))\n- **Runtime counters addition** of EV_C_MINOR_PROMOTED_WORDS and EV_C_MINOR_ALLOCATED_WORDS for tracking per-domain memory metrics ([#14189](https://github.com/ocaml/ocaml/issues/14189))", "activity_summary": "Five new PRs opened including Dependabot setup and interprocedural tail call flags, plus multiple merged bug fixes", "activity": "- **Five new PRs opened** this week including Dependabot setup for GitHub Actions by [Sora Morimoto](https://github.com/smorimoto) ([#14199](https://github.com/ocaml/ocaml/issues/14199)), interprocedural tail call optimization flag by [Adam Dingle](https://github.com/medovina) ([#14186](https://github.com/ocaml/ocaml/issues/14186)), and `include functor` structure-only feature by [Olivier Nicole](https://github.com/OlivierNicole) ([#14177](https://github.com/ocaml/ocaml/issues/14177))\n- **Bug fixes merged** including variance check fix for private aliases by [Jacques Garrigue](https://github.com/garrigue) ([#14202](https://github.com/ocaml/ocaml/issues/14202)), module unpacking constraint handling by [Thomas Refis](https://github.com/trefis) ([#14198](https://github.com/ocaml/ocaml/issues/14198)), and ocamlprof refutation case fix by [Gabriel Scherer](https://github.com/gasche) ([#14197](https://github.com/ocaml/ocaml/issues/14197))\n- **Runtime events improvements** delivered through merged PR by [Tim McGilchrist](https://github.com/tmcgilchrist) adding new word-based counters and documentation clarifications ([#14189](https://github.com/ocaml/ocaml/issues/14189))\n- **Thread sanitizer test fixes** merged by [Damien Doligez](https://github.com/damiendoligez) to account for previous changes ([#14203](https://github.com/ocaml/ocaml/issues/14203))\n- **Toplevel printing restoration** merged by [Florian Angeletti](https://github.com/Octachron) for qualified labels ([#14192](https://github.com/ocaml/ocaml/issues/14192))\n- **Major ongoing work** continues on transparent ascription feature split ([#14064](https://github.com/ocaml/ocaml/issues/14064)), modular explicits documentation ([#14048](https://github.com/ocaml/ocaml/issues/14048)), and Git archive optimization for opam installations ([#14152](https://github.com/ocaml/ocaml/issues/14152))", "discussions_summary": "Technical discussions on Windows float formatting, domain stack configuration, and variance checking", "notable_discussions": "- **Windows float formatting inconsistency** reported by [Martin Jambon](https://github.com/mjambon) affecting CI tests with zero-padded exponents on Windows versus Linux/macOS ([#14201](https://github.com/ocaml/ocaml/issues/14201))\n- **Domain stack size configuration** feature request by [Nathan Taylor](https://github.com/dijkstracula) for configurable pthread stack sizes to handle deep recursion scenarios ([#14195](https://github.com/ocaml/ocaml/issues/14195))\n- **Type variance checking vulnerability** discovered by [Stephen Dolan](https://github.com/stedolan) affecting private aliases and bivariant type annotations, leading to immediate fix ([#14200](https://github.com/ocaml/ocaml/issues/14200))", "trends_summary": "Focus on runtime performance monitoring, memory management tooling, and type system soundness improvements", "emerging_trends": "- **Runtime observability enhancement** with expanded memory tracking capabilities and improved documentation for performance analysis tools\n- **Developer experience improvements** including CI dependency management through Dependabot and build system optimizations for Windows users\n- **Type system robustness** addressing edge cases in variance checking and module constraint handling to prevent soundness issues", "issues_summary": "Good first issue available for storing source locations in compiler structures and signatures", "good_first_issues": "- **Compiler error message improvement** by storing source locations in structures and signatures to show actual source files instead of compiled artifacts in error messages ([#12629](https://github.com/ocaml/ocaml/issues/12629))", "contributors_summary": "Eight contributors delivered code changes, reviews, and bug reports across runtime events, type system, and tooling", "contributors": "- [Tim McGilchrist](https://github.com/tmcgilchrist) implemented runtime events counters for minor GC memory tracking and enhanced documentation clarity ([#14189](https://github.com/ocaml/ocaml/issues/14189))\n- [Gabriel Scherer](https://github.com/gasche) fixed ocamlprof instrumentation bug affecting refutation cases and contributed to ongoing modular explicits documentation ([#14197](https://github.com/ocaml/ocaml/issues/14197), [#14048](https://github.com/ocaml/ocaml/issues/14048))\n- [Jacques Garrigue](https://github.com/garrigue) resolved variance checking vulnerability in private type aliases preventing potential type soundness issues ([#14202](https://github.com/ocaml/ocaml/issues/14202))\n- [Thomas Refis](https://github.com/trefis) corrected module unpacking constraint handling and improved parser grammar tooling ([#14198](https://github.com/ocaml/ocaml/issues/14198))\n- [Florian Angeletti](https://github.com/Octachron) restored toplevel printing behavior for qualified variant constructors and record labels ([#14192](https://github.com/ocaml/ocaml/issues/14192))\n- [@damiendoligez](https://github.com/damiendoligez) updated thread sanitizer tests to maintain compatibility with recent runtime changes ([#14203](https://github.com/ocaml/ocaml/issues/14203))\n- [Sora Morimoto](https://github.com/smorimoto) opened PR for Dependabot configuration to automate GitHub Actions dependency updates ([#14199](https://github.com/ocaml/ocaml/issues/14199))\n- [@medovina](https://github.com/medovina) proposed interprocedural tail call optimization control flag for improved debugging and profiling support ([#14186](https://github.com/ocaml/ocaml/issues/14186))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 33, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-08-11 to 2025-08-17", "start_commit": "38a962c50b4cee9cafb7d04cdd9de3fa40250c87", "end_commit": "d5be817f104721b4a41ecf7729f16f72b51cb407", "brief_summary": "Fix for toplevel printing and GC runtime improvements merged alongside 8 new PRs covering features and tooling enhancements", "new_features_summary": "Fixed toplevel qualified label printing regression and improved minor GC runtime behavior", "new_features": "- **Toplevel printing fix** for qualified variant constructors and record labels by [Florian Angeletti](https://github.com/Octachron) ([d5be817](https://github.com/ocaml/ocaml/commit/d5be817f104721b4a41ecf7729f16f72b51cb407))\n- **Minor GC runtime improvement** removing outdated comment and optimizing function call by [Nick Barnes](https://github.com/NickBarnes) ([38a962c](https://github.com/ocaml/ocaml/commit/38a962c50b4cee9cafb7d04cdd9de3fa40250c87))", "activity_summary": "Eight new PRs opened covering init file handling, tail call optimization, documentation fixes, and runtime improvements", "activity": "- **Eight new PRs opened** this week including `-init` flag fixes by [Emile Trotignon](https://github.com/EmileTrotignon) ([#14190](https://github.com/ocaml/ocaml/issues/14190)), tail call optimization control by [Adam Dingle](https://github.com/medovina) ([#14186](https://github.com/ocaml/ocaml/issues/14186)), and GC documentation clarification by [Tim McGilchrist](https://github.com/tmcgilchrist) ([#14191](https://github.com/ocaml/ocaml/issues/14191))\n- **Standard library enhancement** with `List.split_map` function merged by [Jeremy Yallop](https://github.com/yallop) ([#14185](https://github.com/ocaml/ocaml/issues/14185))\n- **Runtime events fixes** merged by [Tim McGilchrist](https://github.com/tmcgilchrist) addressing counter reporting in bytes vs words ([#14189](https://github.com/ocaml/ocaml/issues/14189))\n- **Documentation improvements** with Format module typo fixes merged by [Leo Lee](https://github.com/smjleo) ([#14194](https://github.com/ocaml/ocaml/issues/14194))\n- **Ongoing development** on transparent ascription features ([#14064](https://github.com/ocaml/ocaml/issues/14064)) and modular explicits documentation ([#14048](https://github.com/ocaml/ocaml/issues/14048))", "discussions_summary": "Active discussions on compiler behavior improvements and build system optimization", "notable_discussions": "- **Build optimization request** by [Kate](https://github.com/kit-ty-kate) to stop installing bytecode binaries by default, citing 15MB disk space savings per installation ([#14193](https://github.com/ocaml/ocaml/issues/14193))\n- **Stack size configuration** feature request by [Nathan Taylor](https://github.com/dijkstracula) for configurable domain stack sizes to prevent crashes in deep FFI code, with technical discussion by [Gabriel Scherer](https://github.com/gasche) ([#14195](https://github.com/ocaml/ocaml/issues/14195))\n- **Runtime debugging** issues reported with Clang 19 affecting native debugger tests due to inlining differences ([#14167](https://github.com/ocaml/ocaml/issues/14167))\n- **Data race investigation** continuing in weak array parallel tests with ThreadSanitizer findings ([#14061](https://github.com/ocaml/ocaml/issues/14061))", "trends_summary": "Focus on runtime system improvements, build optimization, and compiler tooling enhancements", "emerging_trends": "- **Runtime system refinement** with multiple fixes for GC behavior, memory reporting consistency, and domain stack management\n- **Build system optimization** discussions around reducing installation footprint and improving compilation performance\n- **Debugging and tooling improvements** addressing stack trace quality and test suite robustness across different compiler versions\n- **Standard library expansion** with utility functions like `List.split_map` addressing common programming patterns", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Seven contributors active with mix of runtime fixes, library additions, and ongoing feature development", "contributors": "- [Florian Angeletti](https://github.com/Octachron) merged toplevel printing fixes and provided review guidance on constructor printing behavior ([#14192](https://github.com/ocaml/ocaml/issues/14192))\n- [Nick Barnes](https://github.com/NickBarnes) merged minor GC runtime improvements and participated in memory management discussions ([#14187](https://github.com/ocaml/ocaml/issues/14187))\n- [Tim McGilchrist](https://github.com/tmcgilchrist) opened and merged runtime events fixes ([#14189](https://github.com/ocaml/ocaml/issues/14189)) and documentation clarifications ([#14191](https://github.com/ocaml/ocaml/issues/14191))\n- [Jeremy Yallop](https://github.com/yallop) implemented and merged `List.split_map` function enhancement ([#14185](https://github.com/ocaml/ocaml/issues/14185))\n- [Leo Lee](https://github.com/smjleo) contributed Format module documentation fixes ([#14194](https://github.com/ocaml/ocaml/issues/14194))\n- [Emile Trotignon](https://github.com/EmileTrotignon) opened PR for `-init` flag behavior fixes in toplevel scripts ([#14190](https://github.com/ocaml/ocaml/issues/14190))\n- [Adam Dingle](https://github.com/medovina) opened PR for tail call optimization control to improve stack trace debugging ([#14186](https://github.com/ocaml/ocaml/issues/14186))\n- [Gabriel Scherer](https://github.com/gasche) provided technical review and guidance on multiple issues including stack size configuration and runtime behavior ([#14195](https://github.com/ocaml/ocaml/issues/14195))\n- [Kate](https://github.com/kit-ty-kate) raised build system optimization proposal for bytecode binary installation ([#14193](https://github.com/ocaml/ocaml/issues/14193))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 32, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-08-04 to 2025-08-10", "start_commit": "8e07de861d4ea0a77dcb1fe61a95e1289e462b35", "end_commit": "b386fd53a7c6c198b8ef45b564040a48723c5b9e", "brief_summary": "Type system fixes and error message improvements with active contributor discussions on language features", "new_features_summary": "Fixed recursive function type handling, improved error messages, and enhanced minor heap management", "new_features": "- Fixed handling of recursive function types that can result in unbounded labeled or optional arguments [#13658](https://github.com/ocaml/ocaml/issues/13658), [#14181](https://github.com/ocaml/ocaml/pull/14181)\n- Improved error messages for mismatched universal variables and universal quantifications [#14111](https://github.com/ocaml/ocaml/pull/14111)\n- Enhanced minor heap management to ensure proper emptying before reallocation [#12879](https://github.com/ocaml/ocaml/pull/12879)", "activity_summary": "Three new issues opened exploring language features while ongoing PRs advance installation improvements and type system work", "activity": "- **New issues opened** this week include [Jean-Christophe Filliatre](https://github.com/backtracking) exploring generative functor limitations ([#14183](https://github.com/ocaml/ocaml/issues/14183)), type propagation improvements by [@rr0gi](https://github.com/rr0gi) ([#14182](https://github.com/ocaml/ocaml/issues/14182)), and [Kate](https://github.com/kit-ty-kate) reporting toplevel printer regression ([#14184](https://github.com/ocaml/ocaml/issues/14184))\n- **Installation improvements** progressing through [David Allsopp](https://github.com/dra27)'s git archive optimization work to reduce OCaml package size for opam installations ([#14152](https://github.com/ocaml/ocaml/pull/14152))\n- **Type system development** continues with [Stefan Muenzel](https://github.com/smuenzel)'s proxy type refactoring for Out_type ([#14156](https://github.com/ocaml/ocaml/pull/14156)) and [Olivier Nicole](https://github.com/OlivierNicole)'s include functor feature implementation ([#14177](https://github.com/ocaml/ocaml/pull/14177))\n- **Documentation updates** merged with [Takafumi Saikawa](https://github.com/t6s) documenting bivariance indicators syntax changes ([#14126](https://github.com/ocaml/ocaml/pull/14126))", "discussions_summary": "Active technical discussions on functor generativity and include functor design decisions", "notable_discussions": "- Technical exploration of **generative functor limitations** by [Jean-Christophe Filliatre](https://github.com/backtracking) with [Gabriel Scherer](https://github.com/gasche) explaining type system constraints and pointing to related work by [Samuel Vivien](https://github.com/samsa1) ([#14183](https://github.com/ocaml/ocaml/issues/14183))\n- **Include functor feature** drawing design feedback from [Kate](https://github.com/kit-ty-kate) questioning implicit behavior patterns while [Richard Eisenberg](https://github.com/goldfirere) defends the convenience benefits demonstrated by Jane Street adoption ([#14177](https://github.com/ocaml/ocaml/pull/14177))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Core OCaml team members delivered fixes while external contributors explored language feature extensions", "contributors": "- [Stefan Muenzel](https://github.com/smuenzel) implemented recursive function type fixes ([#13658](https://github.com/ocaml/ocaml/issues/13658), [#14181](https://github.com/ocaml/ocaml/pull/14181)) and contributed type system refactoring work ([#14156](https://github.com/ocaml/ocaml/pull/14156))\n- [Florian Angeletti](https://github.com/Octachron) enhanced error messages for universal quantifications ([#14111](https://github.com/ocaml/ocaml/pull/14111)) and provided technical guidance on functor discussions\n- [Mark Shinwell](https://github.com/mshinwell) delivered minor heap management improvements ([#12879](https://github.com/ocaml/ocaml/pull/12879))\n- [Jean-Christophe Filliatre](https://github.com/backtracking) explored generative functor limitations and engaged in technical discussions ([#14183](https://github.com/ocaml/ocaml/issues/14183))\n- [Kate](https://github.com/kit-ty-kate) reported toplevel printer regression ([#14184](https://github.com/ocaml/ocaml/issues/14184)) and provided design feedback on language features ([#14177](https://github.com/ocaml/ocaml/pull/14177))\n- [@rr0gi](https://github.com/rr0gi) investigated type propagation improvements for pipeline operations ([#14182](https://github.com/ocaml/ocaml/issues/14182))\n- [@dra27](https://github.com/dra27) advanced installation optimization work to reduce package extraction time ([#14152](https://github.com/ocaml/ocaml/pull/14152))\n- [@OlivierNicole](https://github.com/OlivierNicole) continued development of include functor syntax extension ([#14177](https://github.com/ocaml/ocaml/pull/14177))\n- [@t6s](https://github.com/t6s) contributed documentation updates for syntax changes ([#14126](https://github.com/ocaml/ocaml/pull/14126))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 31, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-07-28 to 2025-08-03", "start_commit": "bab7aa8a5838830b5bb41a3c4b12dcd058665344", "end_commit": "71a4142d44293e99abf8f201f5207ae592741ae0", "brief_summary": "Major week for OCaml with 12 PRs merged including GC performance improvements, better error messages, and new memory statistics", "new_features_summary": "Added Gc.Memprof.is_sampling function, restored stack statistics in Gc.stat, and improved row type display in error messages", "new_features": "- **Memprof sampling control** added `Gc.Memprof.is_sampling` function allowing domains to replace profiles without stopping in all domains ([#14053](https://github.com/ocaml/ocaml/pull/14053))\n- **GC statistics enhancement** restored `stack_size` field and added new `live_stacks_words` field to `Gc.stat` for tracking total size of live stacks ([#14168](https://github.com/ocaml/ocaml/pull/14168))\n- **Error message improvement** for row types in GADT constructors now display as `< foo : int; .. as $0>` when type variables are introduced by constructors ([#14147](https://github.com/ocaml/ocaml/pull/14147))\n- **Deprecation alert fix** added proper file location to deprecation alerts for implicit library usage (unix, threads, dynlink) ([#14176](https://github.com/ocaml/ocaml/pull/14176))\n- **Value restriction relaxation** for `%identity` primitives like `Obj.magic` which are now recognized as nonexpansive ([bab7aa8a58](https://github.com/ocaml/ocaml/commit/bab7aa8a5838830b5bb41a3c4b12dcd058665344))\n- **GC performance improvement** introduced sweep-only phase at start of major GC cycle to reduce latent-garbage delay ([#13580](https://github.com/ocaml/ocaml/pull/13580))", "activity_summary": "Eight new PRs opened including major language features like include functor and tuple coercion, alongside completion of runtime improvements and error message enhancements", "activity": "- **Runtime fiber cache fix** by [Florian Angeletti](https://github.com/Octachron) resolved cache miss issue where aligned fibers failed to use cache on reallocation ([#14169](https://github.com/ocaml/ocaml/issues/14169))\n- **Error message improvements** delivered by [Stefan Muenzel](https://github.com/smuenzel) for quantifier mismatches and row type display in GADT error messages ([#14111](https://github.com/ocaml/ocaml/issues/14111), [#14147](https://github.com/ocaml/ocaml/issues/14147))\n- **Memory profiling enhancements** from [Guillaume Munch-Maccagnoni](https://github.com/gadmm) making memprof more compositional for multicore usage ([#14053](https://github.com/ocaml/ocaml/issues/14053))\n- **Major GC latency reduction** by [Nick Barnes](https://github.com/NickBarnes) introducing mark-delay performance improvement ([#13580](https://github.com/ocaml/ocaml/issues/13580))\n- **Build system fixes** including deprecation alert locations by [Florian Angeletti](https://github.com/Octachron) and test expectations by [Stefan Muenzel](https://github.com/smuenzel) ([#14176](https://github.com/ocaml/ocaml/issues/14176), [#14170](https://github.com/ocaml/ocaml/issues/14170))\n- **New language features opened** including `include functor` syntax by [Olivier Nicole](https://github.com/OlivierNicole) and tuple coercion across labels by [Malek Ben Romdhane](https://github.com/malekbr) ([#14177](https://github.com/ocaml/ocaml/issues/14177), [#14180](https://github.com/ocaml/ocaml/issues/14180))\n- **Tool fixes** with ocamlmklib -L option ordering by [Alexandre DOUARD](https://github.com/VecoMr) addressing library search path issues ([#14173](https://github.com/ocaml/ocaml/issues/14173))\n- **Platform support expansion** for Haiku native backend activation by [Anarchos](https://github.com/Sylvain78) ([#14138](https://github.com/ocaml/ocaml/issues/14138))", "discussions_summary": "Thread sanitizer issues dominated discussion with multiple TSan-related crashes and data race reports requiring runtime fixes", "notable_discussions": "- **Thread sanitizer crashes** reported by [Nathan Taylor](https://github.com/dijkstracula) affecting both Semgrep and dune build processes, with [Olivier Nicole](https://github.com/OlivierNicole) providing workarounds using specific configure flags ([#14083](https://github.com/ocaml/ocaml/issues/14083))\n- **Ephemeron data race** identified by [Olivier Nicole](https://github.com/OlivierNicole) in minor GC with TSan reporting race conditions in weak array parallel tests ([#14061](https://github.com/ocaml/ocaml/issues/14061))\n- **Minor heap virtual memory** concerns raised by [KC Sivaramakrishnan](https://github.com/kayceesrk) about OCaml 5's aggressive memory reservation causing crashes in applications like Rocq with large minor heaps ([#14153](https://github.com/ocaml/ocaml/issues/14153))\n- **Effect keyword proposal** by [Ali Caglayan](https://github.com/Alizter) for syntactic sugar around effect declarations, ultimately closed as the feature wasn't deemed necessary ([#14178](https://github.com/ocaml/ocaml/issues/14178))", "trends_summary": "Strong focus on multicore stability, runtime performance, and developer experience improvements with enhanced error messages", "emerging_trends": "- **Multicore stability focus** with multiple TSan-related issues being actively investigated and fixed, showing continued commitment to thread safety in OCaml 5\n- **Error message quality improvements** across type system with better GADT equation display and quantifier mismatch explanations enhancing developer experience\n- **Runtime performance optimization** through GC improvements, fiber cache fixes, and memory profiling enhancements targeting multicore performance\n- **Build system modernization** addressing tool quirks like ocamlmklib option ordering and platform support expansion for emerging operating systems\n- **Language feature experimentation** with major syntax additions like `include functor` and tuple coercion being actively developed and discussed", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active week with 15+ contributors across runtime improvements, type system enhancements, and major language features", "contributors": "- [Florian Angeletti](https://github.com/Octachron) delivered five merged PRs including runtime fiber cache fixes ([#14169](https://github.com/ocaml/ocaml/issues/14169)), deprecation alert improvements ([#14176](https://github.com/ocaml/ocaml/issues/14176)), GC statistics restoration ([#14168](https://github.com/ocaml/ocaml/issues/14168)), and error message enhancements ([#14111](https://github.com/ocaml/ocaml/issues/14111))\n- [Stefan Muenzel](https://github.com/smuenzel) contributed three PRs focusing on type system error messages with row type display improvements ([#14147](https://github.com/ocaml/ocaml/issues/14147)), test expectations ([#14170](https://github.com/ocaml/ocaml/issues/14170)), and ongoing GADT equation work ([#14142](https://github.com/ocaml/ocaml/issues/14142))\n- [Olivier Nicole](https://github.com/OlivierNicole) worked on value restriction improvements ([#14029](https://github.com/ocaml/ocaml/issues/14029)) and opened major `include functor` feature ([#14177](https://github.com/ocaml/ocaml/issues/14177)), plus contributed to TSan issue discussions ([#14083](https://github.com/ocaml/ocaml/issues/14083))\n- [Gabriel Scherer](https://github.com/gasche) advanced external types documentation ([#13994](https://github.com/ocaml/ocaml/issues/13994)) and resolved type application non-termination bug ([#13658](https://github.com/ocaml/ocaml/issues/13658))\n- [Guillaume Munch-Maccagnoni](https://github.com/gadmm) delivered multicore memprof compositional improvements ([#14053](https://github.com/ocaml/ocaml/issues/14053)) enhancing memory profiling capabilities\n- [Nick Barnes](https://github.com/NickBarnes) contributed major GC performance improvement with mark-delay optimization ([#13580](https://github.com/ocaml/ocaml/issues/13580))\n- [@malekbr](https://github.com/malekbr) implemented tuple coercion across labels feature ([#14180](https://github.com/ocaml/ocaml/issues/14180)) enabling coercion between labeled and unlabeled tuples\n- [@VecoMr](https://github.com/VecoMr) identified and fixed ocamlmklib -L option ordering issue ([#14172](https://github.com/ocaml/ocaml/issues/14172), [#14173](https://github.com/ocaml/ocaml/issues/14173))\n- [@kayceesrk](https://github.com/kayceesrk) contributed ephemeron optimization ([#14175](https://github.com/ocaml/ocaml/issues/14175)) and raised minor heap memory reservation concerns ([#14153](https://github.com/ocaml/ocaml/issues/14153))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 30, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-07-21 to 2025-07-27", "start_commit": "54054646820a8badc82eff58412c552753b866d5", "end_commit": "9d44d724ad63ea76e22f5ac4740d7d0a66ec92bd", "brief_summary": "Major language enhancement with polymorphic parameters, runtime performance optimizations, and new Hashtbl APIs", "new_features_summary": "Polymorphic parameters support, new Hashtbl functions for value-returning operations, and parser improvements for module patterns", "new_features": "- **Polymorphic parameters** language feature by [Ulysse](https://github.com/voodoos) enables functions with rank-2 types like `val f : ('a. 'a -> 'a list) -> int list` ([#13806](https://github.com/ocaml/ocaml/issues/13806))\n- **New Hashtbl functions** `find_and_remove` and `find_and_replace` by [Sacha Ayoun](https://github.com/giltho) return previous values during modification operations ([#14060](https://github.com/ocaml/ocaml/issues/14060))\n- **Module pattern parsing** enhancement by [Samuel Vivien](https://github.com/samsa1) distinguishes between `(module M : S)` and `(module M) : (module S)` in pattern matching ([#14149](https://github.com/ocaml/ocaml/issues/14149))\n- **Shared heap optimization** by [Sadiq Jaffer](https://github.com/sadiqj) implements run-length encoding for free blocks, achieving 3.85x performance improvement for sparse heaps ([#13616](https://github.com/ocaml/ocaml/issues/13616))\n- **Symbol name compatibility** fix by [Florian Angeletti](https://github.com/Octachron) restores perf/flamegraph.pl support while maintaining lldb debugging on macOS ([#14143](https://github.com/ocaml/ocaml/issues/14143))", "activity_summary": "Runtime system improvements with memory management fixes and build system enhancements across multiple areas", "activity": "- **Minor heap management** fixes by [Gabriel Scherer](https://github.com/gasche) including proper domain initialization handling ([#14158](https://github.com/ocaml/ocaml/issues/14158)) and reservation resizing corrections ([#14164](https://github.com/ocaml/ocaml/issues/14164))\n- **Build system reliability** improvements by [David Allsopp](https://github.com/dra27) addressing dependency generation when tools are disabled ([#14159](https://github.com/ocaml/ocaml/issues/14159))\n- **Runtime refactoring** by [Gabriel Scherer](https://github.com/gasche) introducing clearer domain state categorization with parked/active/stopped classifications ([#14161](https://github.com/ocaml/ocaml/issues/14161))\n- **Code quality improvements** including consistent memprof logging ([#14157](https://github.com/ocaml/ocaml/issues/14157)) and terminology updates for heap reservation ([#14160](https://github.com/ocaml/ocaml/issues/14160))", "discussions_summary": "Thread safety validation challenges and location reporting issues in compiler alerts", "notable_discussions": "- **Thread Sanitizer compatibility** investigation by [Nathan Taylor](https://github.com/dijkstracula) addressing crashes in OCaml programs under TSAN, with ongoing debugging of runtime stack management ([#14083](https://github.com/ocaml/ocaml/issues/14083))\n- **Str module data races** analysis by [Nathan Taylor](https://github.com/dijkstracula) exploring potential TSAN annotation approaches for benign races in string matching ([#14136](https://github.com/ocaml/ocaml/issues/14136))\n- **Compiler alert location** issue raised by [Ali Caglayan](https://github.com/Alizter) regarding missing file information in deprecated auto-include warnings, ultimately resolved through build system improvements ([#14163](https://github.com/ocaml/ocaml/issues/14163))", "trends_summary": "Focus on runtime system optimization, external tool compatibility, and language expressiveness enhancements", "emerging_trends": "- **Runtime performance focus** with multiple optimizations targeting memory management efficiency and domain lifecycle improvements\n- **External tooling compatibility** prioritized through symbol naming fixes and debugger support maintenance\n- **Type system advancement** continuing with polymorphic parameters and improved pattern matching capabilities\n- **Thread safety validation** becoming a priority with dedicated TSAN compatibility investigations", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Gabriel Scherer led runtime system improvements with 6 merged PRs, while significant language features came from Ulysse and other core developers", "contributors": "- [Gabriel Scherer](https://github.com/gasche) implemented extensive **runtime system improvements** including minor heap fixes ([#14158](https://github.com/ocaml/ocaml/issues/14158), [#14164](https://github.com/ocaml/ocaml/issues/14164)), domain state refactoring ([#14161](https://github.com/ocaml/ocaml/issues/14161)), logging consistency ([#14157](https://github.com/ocaml/ocaml/issues/14157)), and terminology updates ([#14160](https://github.com/ocaml/ocaml/issues/14160))\n- [Ulysse](https://github.com/voodoos) delivered the **polymorphic parameters** language feature, a substantial enhancement enabling rank-2 types ([#13806](https://github.com/ocaml/ocaml/issues/13806))\n- [Sadiq Jaffer](https://github.com/sadiqj) contributed **shared heap optimization** with significant performance improvements through free block encoding ([#13616](https://github.com/ocaml/ocaml/issues/13616))\n- [David Allsopp](https://github.com/dra27) enhanced **build system reliability** by fixing dependency generation issues ([#14159](https://github.com/ocaml/ocaml/issues/14159))\n- [@Octachron](https://github.com/Octachron) restored **tooling compatibility** through symbol naming fixes ([#14143](https://github.com/ocaml/ocaml/issues/14143))\n- [Sacha Ayoun](https://github.com/giltho) added useful **Hashtbl utility functions** for value-returning operations ([#14060](https://github.com/ocaml/ocaml/issues/14060))\n- [@samsa1](https://github.com/samsa1) improved **parser precision** for module pattern distinctions ([#14149](https://github.com/ocaml/ocaml/issues/14149))\n- [@dijkstracula](https://github.com/dijkstracula) investigated **thread safety issues** and provided detailed TSAN compatibility analysis ([#14083](https://github.com/ocaml/ocaml/issues/14083), [#14136](https://github.com/ocaml/ocaml/issues/14136))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 29, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-07-14 to 2025-07-20", "start_commit": "2105aac83f498e73e365c8e813a41ac54b232789", "end_commit": "43c24c7a1cd9f39119aeac9f7f3eafb6f49b56d6", "brief_summary": "Active week with 9 PRs merged, improved error messages for external declarations and type printing, plus GC and runtime fixes", "new_features_summary": "Improved error messages for external declarations, better type printing in row types, memprof compositional improvements", "new_features": "- Enhanced **error messages** for external declarations with non-syntactic arity now show proper error instead of internal failure ([#14146](https://github.com/ocaml/ocaml/issues/14146))\n- Improved **type printing** in error messages by showing row types when they are type constructors, making `< bar : int; foo : int; .. as $1>` visible instead of hidden ([#14147](https://github.com/ocaml/ocaml/issues/14147))\n- **Gc.Memprof** interface made more compositional allowing `start` to be called when profile already sampling, with new `is_sampling` function ([#14053](https://github.com/ocaml/ocaml/issues/14053))\n- **Symbol naming** reverted to using `.` as module separator on non-Apple Unix systems to restore perf tool support ([#14150](https://github.com/ocaml/ocaml/issues/14150))\n- **C++ compatibility** improvements by moving atomic helper type definitions inside `caml/misc.h` ([#14139](https://github.com/ocaml/ocaml/issues/14139))\n- **Constraint terminology** cleanup renaming `cstrs` to `constraints` throughout codebase to avoid confusion with constructors ([#14141](https://github.com/ocaml/ocaml/issues/14141))\n- **Minor heap decommission** fix ensuring domains properly decommit minor heap when leaving STW participant set ([#14152](https://github.com/ocaml/ocaml/issues/14152))\n- **Consistent GC logging** using `caml_gc_log` instead of `CAML_GC_MESSAGE` for memprof minor GC operations ([#14151](https://github.com/ocaml/ocaml/issues/14151))\n- **Package type cleanup** removing unused `tpt_type` field from `package_type` in typedtree ([#14148](https://github.com/ocaml/ocaml/issues/14148))\n- **Test suite improvements** fixing unexecuted phrases in expect tests and missing expectations ([#14155](https://github.com/ocaml/ocaml/issues/14155))", "activity_summary": "New PRs opened for GADT error messages, type proxy refactoring, and module pattern distinctions alongside ongoing modular explicits documentation", "activity": "- **New PRs opened** include GADT equation printing in error messages by [Stefan Muenzel](https://github.com/smuenzel) ([#14142](https://github.com/ocaml/ocaml/issues/14142)), strong typing for Out_type proxies ([#14156](https://github.com/ocaml/ocaml/issues/14156)), and pattern distinction for `(module M : S)` vs `(module M) : (module S)` ([#14149](https://github.com/ocaml/ocaml/issues/14149))\n- **Runtime issues** reported including custom runtime events behaving randomly in fast-paced environments by [Mattias](https://github.com/mattiasdrp) ([#14151](https://github.com/ocaml/ocaml/issues/14151)) and minor heap virtual memory reservation improvements needed by [KC Sivaramakrishnan](https://github.com/kayceesrk) ([#14153](https://github.com/ocaml/ocaml/issues/14153))\n- **Documentation requests** for library installation file conventions by [Daniel Bünzli](https://github.com/dbuenzli) ([#14154](https://github.com/ocaml/ocaml/issues/14154)) and color flag affecting error message content by [Ali Caglayan](https://github.com/Alizter) ([#14144](https://github.com/ocaml/ocaml/issues/14144))\n- **Ongoing work** on modular explicits documentation by [Gabriel Scherer](https://github.com/gasche) ([#14048](https://github.com/ocaml/ocaml/issues/14048)) and monadic binding operators attributes support ([#11398](https://github.com/ocaml/ocaml/issues/11398))\n- **Long-standing bug** in recursive module functor application approximation identified affecting GADT type checking by [Ryan Tjoa](https://github.com/rtjoa) ([#14140](https://github.com/ocaml/ocaml/issues/14140))", "discussions_summary": "Active discussions on GC behavior with OCaml 5, runtime events implementation challenges, and virtual memory usage patterns", "notable_discussions": "- **GC performance** concerns raised by [Nat Mote](https://github.com/nmote) showing OCaml 5 requiring space_overhead tuning to match OCaml 4 performance in Semgrep benchmarks ([#13868](https://github.com/ocaml/ocaml/issues/13868))\n- **Runtime events reliability** issues discussed with [Mattias](https://github.com/mattiasdrp) experiencing corrupt stream errors and inconsistent results when events written faster than polled ([#14151](https://github.com/ocaml/ocaml/issues/14151))\n- **Virtual memory usage** analysis by [KC Sivaramakrishnan](https://github.com/kayceesrk) exploring dynamic minor heap reservation strategies to reduce initial 32GB allocation impact ([#14153](https://github.com/ocaml/ocaml/issues/14153))\n- **Technical deep-dive** by [Gabriel Scherer](https://github.com/gasche) on domain spawning complexity and potential approaches for gradual address space reservation ([#14153](https://github.com/ocaml/ocaml/issues/14153))\n- **Color flag behavior** discussion between [Ali Caglayan](https://github.com/Alizter) and [Florian Angeletti](https://github.com/Octachron) about quotation marks in error messages affecting CI environments ([#14144](https://github.com/ocaml/ocaml/issues/14144))", "trends_summary": "Focus on runtime reliability, error message clarity, and multicore performance optimization with increased attention to tooling compatibility", "emerging_trends": "- **Error message quality** improvements with multiple PRs focusing on clearer type information display and better diagnostic messaging ([#14146](https://github.com/ocaml/ocaml/issues/14146), [#14147](https://github.com/ocaml/ocaml/issues/14147), [#14142](https://github.com/ocaml/ocaml/issues/14142))\n- **Runtime robustness** emphasis addressing multicore-specific issues including domain spawning, memory management, and event system reliability ([#14153](https://github.com/ocaml/ocaml/issues/14153), [#14151](https://github.com/ocaml/ocaml/issues/14151), [#14152](https://github.com/ocaml/ocaml/issues/14152))\n- **Tooling compatibility** focus ensuring OCaml works well with external tools like perf, debuggers, and CI systems ([#14150](https://github.com/ocaml/ocaml/issues/14150), [#14144](https://github.com/ocaml/ocaml/issues/14144))\n- **Code quality initiatives** with systematic cleanup efforts removing unused fields, fixing terminology consistency, and auditing test suites ([#14148](https://github.com/ocaml/ocaml/issues/14148), [#14141](https://github.com/ocaml/ocaml/issues/14141), [#14155](https://github.com/ocaml/ocaml/issues/14155))\n- **Performance analysis** increased attention to OCaml 5 multicore performance characteristics and GC behavior optimization ([#13868](https://github.com/ocaml/ocaml/issues/13868), [#14151](https://github.com/ocaml/ocaml/issues/14151))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Stefan Muenzel led activity with 4 PRs, while Gabriel Scherer and Florian Angeletti provided extensive reviews and technical guidance", "contributors": "- [Stefan Muenzel](https://github.com/smuenzel) contributed **error message improvements** ([#14147](https://github.com/ocaml/ocaml/issues/14147)), **constraint renaming** ([#14141](https://github.com/ocaml/ocaml/issues/14141)), **test suite fixes** ([#14155](https://github.com/ocaml/ocaml/issues/14155)), opened **GADT equation printing** ([#14142](https://github.com/ocaml/ocaml/issues/14142)) and **type proxy refactoring** ([#14156](https://github.com/ocaml/ocaml/issues/14156))\n- [Gabriel Scherer](https://github.com/gasche) reviewed multiple PRs and provided technical insights on modular explicits documentation ([#14048](https://github.com/ocaml/ocaml/issues/14048)) and domain spawning complexity ([#14153](https://github.com/ocaml/ocaml/issues/14153))\n- [Florian Angeletti](https://github.com/Octachron) delivered **external declaration error** fix ([#14146](https://github.com/ocaml/ocaml/issues/14146)), **C++ compatibility** improvements ([#14139](https://github.com/ocaml/ocaml/issues/14139)), and provided guidance on color flag behavior ([#14144](https://github.com/ocaml/ocaml/issues/14144))\n- [@samsa1](https://github.com/samsa1) implemented **package type cleanup** removing unused fields ([#14148](https://github.com/ocaml/ocaml/issues/14148)) and worked on module pattern distinctions ([#14149](https://github.com/ocaml/ocaml/issues/14149))\n- [@gadmm](https://github.com/gadmm) completed **memprof compositional** improvements enabling better domain-specific profiling ([#14053](https://github.com/ocaml/ocaml/issues/14053))\n- [@kayceesrk](https://github.com/kayceesrk) identified **minor heap reservation** issues ([#14153](https://github.com/ocaml/ocaml/issues/14153)) and addressed **finalizer processing** improvements ([#14145](https://github.com/ocaml/ocaml/issues/14145))\n- [@mattiasdrp](https://github.com/mattiasdrp) reported **runtime events reliability** issues with detailed analysis and reproduction steps ([#14151](https://github.com/ocaml/ocaml/issues/14151))\n- [@nmote](https://github.com/nmote) provided comprehensive **GC performance** analysis comparing OCaml 4 and 5 behavior ([#13868](https://github.com/ocaml/ocaml/issues/13868))\n- [@dbuenzli](https://github.com/dbuenzli) requested **library installation** documentation improvements ([#14154](https://github.com/ocaml/ocaml/issues/14154)) and [@Alizter](https://github.com/Alizter) reported **color flag** behavior inconsistency ([#14144](https://github.com/ocaml/ocaml/issues/14144))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 28, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-07-07 to 2025-07-13", "start_commit": "a4a7be5ce4387cc91d9d30335c14d2be4d6921e8", "end_commit": "220981bdb4c9f9bc168fe4909fb698abef6f162d", "brief_summary": "Merged compiler bug fixes and ThreadSanitizer compatibility improvements with active thread safety analysis", "new_features_summary": "ThreadSanitizer build compatibility fix and pattern matching determinism improvement with documentation correction", "new_features": "- **ThreadSanitizer compatibility** fix for `__tsan_func_exit()` signature mismatch with GCC 15, including configure-time builtin verification ([#14082](https://github.com/ocaml/ocaml/issues/14082))\n- **Pattern matching determinism** fix resolving non-deterministic code generation in compilation ([#14091](https://github.com/ocaml/ocaml/issues/14091), [#14088](https://github.com/ocaml/ocaml/issues/14088))\n- **Typechecker robustness** improvement fixing internal error in recursive modules with polymorphic fields ([#14135](https://github.com/ocaml/ocaml/issues/14135))\n- **Performance optimization** in Set/Map operations replacing `cardinal = 0` with more efficient `is_empty` calls ([#14119](https://github.com/ocaml/ocaml/issues/14119))\n- **Documentation accuracy** improvement in `Float.frexp` specification correcting range description to `0.5 <= abs x < 1.0` ([fa858d9](https://github.com/ocaml/ocaml/commit/fa858d9d631782d95d7d5a9c5abe595e8ea506a6))", "activity_summary": "Five new PRs opened including Haiku OS support and GADT error improvements alongside continued thread safety analysis", "activity": "- **Five new PRs opened** this week including [Anarchos](https://github.com/Sylvain78) proposing Haiku OS native backend activation ([#14138](https://github.com/ocaml/ocaml/issues/14138)), [Stefan Muenzel](https://github.com/smuenzel) opening GADT error message improvements ([#14142](https://github.com/ocaml/ocaml/issues/14142)), and [Daniel Bünzli](https://github.com/dbuenzli) adding stdlib string manipulation functions before closing for broader API discussion ([#14125](https://github.com/ocaml/ocaml/issues/14125))\n- **Compiler quality improvements** merged including [Stefan Muenzel](https://github.com/smuenzel) delivering terminology cleanup across 40 files ([#14141](https://github.com/ocaml/ocaml/issues/14141)), [Florian Angeletti](https://github.com/Octachron) fixing typechecker internal error ([#14135](https://github.com/ocaml/ocaml/issues/14135)) and C++ compatibility ([#14139](https://github.com/ocaml/ocaml/issues/14139)), plus [Gabriel Scherer](https://github.com/gasche) resolving pattern matching non-determinism ([#14091](https://github.com/ocaml/ocaml/issues/14091))\n- **ThreadSanitizer infrastructure** completed with [Hari Hara Naveen S](https://github.com/Johan511) merging comprehensive signature fixes for GCC 15 compatibility ([#14082](https://github.com/ocaml/ocaml/issues/14082)) and [Kate](https://github.com/kit-ty-kate) providing performance optimizations ([#14119](https://github.com/ocaml/ocaml/issues/14119))", "discussions_summary": "OCaml.org package documentation accuracy issue regarding release dates identified", "notable_discussions": "- **Documentation accuracy** concern raised by [Gabriel Scherer](https://github.com/gasche) regarding incorrect OCaml release dates displayed on ocaml.org package pages ([#14132](https://github.com/ocaml/ocaml/issues/14132))", "trends_summary": "Thread safety analysis intensification with systematic race condition investigation across runtime components", "emerging_trends": "- **Thread safety focus intensification** with [Nathan Taylor](https://github.com/dijkstracula) conducting systematic ThreadSanitizer analysis across OCaml runtime, identifying potential races in string handling ([#14136](https://github.com/ocaml/ocaml/issues/14136)), object system ([#14131](https://github.com/ocaml/ocaml/issues/14131)), and GC operations ([#14133](https://github.com/ocaml/ocaml/issues/14133))\n- **Type system robustness** improvements continuing with recursive module approximation bugs reported ([#14140](https://github.com/ocaml/ocaml/issues/14140)) and GADT error message enhancements in development ([#14142](https://github.com/ocaml/ocaml/issues/14142))\n- **Platform expansion** efforts with Haiku OS native backend implementation ([#14138](https://github.com/ocaml/ocaml/issues/14138)) and continued cross-language compatibility work ([#14139](https://github.com/ocaml/ocaml/issues/14139))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active contributions across compiler internals, thread safety, and platform support from experienced OCaml developers", "contributors": "- [Nathan Taylor](https://github.com/dijkstracula) led **thread safety analysis** creating three issues identifying potential race conditions in OCaml runtime including string operations ([#14136](https://github.com/ocaml/ocaml/issues/14136)), object system state ([#14131](https://github.com/ocaml/ocaml/issues/14131)), and GC operations ([#14133](https://github.com/ocaml/ocaml/issues/14133))\n- [Florian Angeletti](https://github.com/Octachron) contributed **core compiler maintenance** merging critical typechecker fix for recursive modules ([#14135](https://github.com/ocaml/ocaml/issues/14135)) and C++ compatibility improvements ([#14139](https://github.com/ocaml/ocaml/issues/14139))\n- [Stefan Muenzel](https://github.com/smuenzel) focused on **developer experience** delivering large-scale terminology cleanup ([#14141](https://github.com/ocaml/ocaml/issues/14141)) and opening GADT error message improvements ([#14142](https://github.com/ocaml/ocaml/issues/14142))\n- [Gabriel Scherer](https://github.com/gasche) addressed **compilation quality** fixing pattern matching non-determinism ([#14091](https://github.com/ocaml/ocaml/issues/14091)) and raising documentation accuracy concerns ([#14132](https://github.com/ocaml/ocaml/issues/14132))\n- [Hari Hara Naveen S](https://github.com/Johan511) delivered **build system robustness** with comprehensive ThreadSanitizer compatibility fixes for modern GCC versions ([#14082](https://github.com/ocaml/ocaml/issues/14082))\n- [Kate](https://github.com/kit-ty-kate) provided **performance optimizations** in standard library Set/Map operations ([#14119](https://github.com/ocaml/ocaml/issues/14119))\n- [Anarchos](https://github.com/Sylvain78) contributed **platform expansion** work with Haiku OS native backend implementation ([#14138](https://github.com/ocaml/ocaml/issues/14138))\n- [Daniel Bünzli](https://github.com/dbuenzli) proposed **stdlib enhancements** with string manipulation functions ([#14125](https://github.com/ocaml/ocaml/issues/14125)) and identified memory model documentation gaps ([#14134](https://github.com/ocaml/ocaml/issues/14134))\n- [Ryan Tjoa](https://github.com/rtjoa) reported **type system issues** with recursive module approximation bugs ([#14140](https://github.com/ocaml/ocaml/issues/14140))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 27, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-06-30 to 2025-07-06", "start_commit": "d7af01eec1f8ff8cdd3b0b375f6ba9a0dc55f8e4", "end_commit": "dc7baf3cd1e821a8a10be7ccb12346f18ee764df", "brief_summary": "Active week with standard library enhancements, signature merging fixes, and performance improvements across multiple areas", "new_features_summary": "New Set/Map is_singleton functions, improved List.take/drop behavior, and corrected Float.frexp documentation", "new_features": "- Added **is_singleton functions** to Set and Map modules for testing whether containers have exactly one element ([#14118](https://github.com/ocaml/ocaml/issues/14118))\n- Made **List.take and List.drop total functions** by removing Invalid_argument exception for negative inputs, now returning empty list and original list respectively ([#14124](https://github.com/ocaml/ocaml/issues/14124))\n- Fixed **Float.frexp documentation** to correctly handle negative numbers by specifying `0.5 <= abs x < 1.0` condition ([#14128](https://github.com/ocaml/ocaml/issues/14128))\n- Improved **Char.compare documentation** to clarify it uses ASCII ordering ([#14090](https://github.com/ocaml/ocaml/issues/14090))\n- Fixed **non-deterministic code generation** in pattern matching compilation ([#14091](https://github.com/ocaml/ocaml/issues/14091))\n- Corrected **non-destructive `with type` constraints** to properly handle type constraints in module signatures ([#14117](https://github.com/ocaml/ocaml/issues/14117))", "activity_summary": "String API extensions debated, tooling improvements for project-wide indexing, and multiple module system refinements", "activity": "- **New PRs opened** include [Clément Blaudeau](https://github.com/clementblaudeau) proposing structured diagnostics for the compiler ([#14126](https://github.com/ocaml/ocaml/issues/14126)), [Vincent Laviron](https://github.com/lthls) adding get_singleton functions to Set/Map ([#14121](https://github.com/ocaml/ocaml/issues/14121)), and [Ulysse](https://github.com/voodoos) improving tooling with uid association for better project-wide indexing ([#14120](https://github.com/ocaml/ocaml/issues/14120))\n- **Standard library expansion** discussed with [Daniel Bünzli](https://github.com/dbuenzli) proposing String.{take,drop,span} functions with active debate over naming conventions, particularly the `span` function name ([#14125](https://github.com/ocaml/ocaml/issues/14125))\n- **Module system improvements** by [Clément Blaudeau](https://github.com/clementblaudeau) including signature merging refactoring ([#14127](https://github.com/ocaml/ocaml/issues/14127)) and fixes for recursive module signature constraints ([#14100](https://github.com/ocaml/ocaml/issues/14100))\n- **Performance optimizations** delivered by [Kate](https://github.com/kit-ty-kate) using is_empty instead of cardinal comparisons in Set/Map operations ([#14119](https://github.com/ocaml/ocaml/issues/14119))\n- **Documentation fixes** merged including [Jan Midtgaard](https://github.com/jmid) correcting Float.frexp for negative numbers ([#14128](https://github.com/ocaml/ocaml/issues/14128)) and [Pierre Rousselin](https://github.com/Villetaneuse) clarifying Char.compare ASCII ordering ([#14090](https://github.com/ocaml/ocaml/issues/14090))", "discussions_summary": "Naming debate over String.span function and evaluation order concerns for record updates with mutable fields", "notable_discussions": "- **String API naming conventions** sparked debate in ([#14125](https://github.com/ocaml/ocaml/issues/14125)) with [Gabriel Scherer](https://github.com/gasche) and [Daniel Bünzli](https://github.com/dbuenzli) disagreeing on `span` vs `take_drop` naming, considering alternatives like `cut` and `split`\n- **Record update evaluation order** raised by [Guillaume Bury](https://github.com/Gbury) highlighting how field ordering in type definitions affects runtime behavior with mutable fields, potentially breaking invariants ([#14129](https://github.com/ocaml/ocaml/issues/14129))\n- **Thread sanitizer crashes** continue to be investigated by [Nathan Taylor](https://github.com/dijkstracula) with [Olivier Nicole](https://github.com/OlivierNicole) providing workarounds for TSAN issues affecting multicore programs ([#14083](https://github.com/ocaml/ocaml/issues/14083))", "trends_summary": "Focus on standard library completeness, module system robustness, and performance optimization with careful API design consideration", "emerging_trends": "- **Standard library API consistency** emphasis shown through careful naming discussions for new String functions and systematic addition of is_singleton predicates to Set/Map\n- **Module system robustness** improvements with multiple fixes for edge cases in signature merging, recursive modules, and type constraints handling\n- **Performance-conscious development** demonstrated by optimizing common operations like Set/Map emptiness checks and fixing non-deterministic code generation\n- **Tooling infrastructure** enhancements for better IDE support with project-wide indexing improvements and uid tracking for functor parameters", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Diverse contributions from standard library enhancements to module system fixes, with active collaboration on API design decisions", "contributors": "- [Clément Blaudeau](https://github.com/clementblaudeau) led module system improvements with signature merging refactoring ([#14127](https://github.com/ocaml/ocaml/issues/14127)), recursive module fixes ([#14100](https://github.com/ocaml/ocaml/issues/14100)), and opened structured diagnostics proposal ([#14126](https://github.com/ocaml/ocaml/issues/14126))\n- [Gabriel Scherer](https://github.com/gasche) fixed pattern matching non-determinism ([#14091](https://github.com/ocaml/ocaml/issues/14091)), merged List.take/drop improvements ([#14124](https://github.com/ocaml/ocaml/issues/14124)), and actively participated in String API naming discussions ([#14125](https://github.com/ocaml/ocaml/issues/14125))\n- [Daniel Bünzli](https://github.com/dbuenzli) proposed String.{take,drop,span} additions ([#14125](https://github.com/ocaml/ocaml/issues/14125)) and provided detailed feedback on Set/Map get_singleton naming ([#14121](https://github.com/ocaml/ocaml/issues/14121))\n- [@kit-ty-kate](https://github.com/kit-ty-kate) optimized Set/Map operations ([#14119](https://github.com/ocaml/ocaml/issues/14119)) and investigated perf/flamegraph issues in 5.4 ([#14104](https://github.com/ocaml/ocaml/issues/14104))\n- [Jan Midtgaard](https://github.com/jmid) corrected Float.frexp documentation for negative numbers ([#14128](https://github.com/ocaml/ocaml/issues/14128))\n- [@rtjoa](https://github.com/rtjoa) fixed non-destructive `with type` constraints ([#14117](https://github.com/ocaml/ocaml/issues/14117))\n- [@lthls](https://github.com/lthls) proposed Set/Map get_singleton functions ([#14121](https://github.com/ocaml/ocaml/issues/14121)) and reviewed various changes\n- [@voodoos](https://github.com/voodoos) improved tooling infrastructure with uid association for better IDE support ([#14120](https://github.com/ocaml/ocaml/issues/14120))\n- [@Villetaneuse](https://github.com/Villetaneuse) clarified Char.compare documentation ([#14090](https://github.com/ocaml/ocaml/issues/14090))\n- [@NickBarnes](https://github.com/NickBarnes) contributed test improvements for pipe data handling ([#14116](https://github.com/ocaml/ocaml/issues/14116))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 26, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-06-23 to 2025-06-29", "start_commit": "33ac3453e9ad82c6d00d13361449b4d47c7c6b75", "end_commit": "1f472554ef302780065885e0b7f221c867c8be11", "brief_summary": "Active week with OCaml 5.4 regression testing, CI infrastructure fixes, and type system improvements", "new_features_summary": "C99 integer modernization and memprof GC timing improvements merged this week", "new_features": "- **C99 stdint.h integration** modernizes OCaml's integer type definitions using standardized C99 fixed-width types and format macros, improving cross-platform compatibility ([#13656](https://github.com/ocaml/ocaml/issues/13656), [#14114](https://github.com/ocaml/ocaml/issues/14114))\n- **Memprof timing fix** corrects GC barrier sequencing to prevent premature memprof updates during minor GC cycles ([#14057](https://github.com/ocaml/ocaml/issues/14057))\n- **Channel flush race condition fix** resolves critical bug where closing an output channel during flush could hang or crash ([#14093](https://github.com/ocaml/ocaml/issues/14093))\n- **Pattern printer infinite loop fix** prevents Pprintast from hanging when printing constructor `(::)` in isolation, affecting tools like Merlin ([#14105](https://github.com/ocaml/ocaml/issues/14105))\n- **Type system error message improvements** added better explanations for quantifier mismatches and fixed typos in toplevel directive errors ([#14111](https://github.com/ocaml/ocaml/issues/14111), [#14108](https://github.com/ocaml/ocaml/issues/14108))", "activity_summary": "High activity week with 11 new PRs focusing on OCaml 5.4 regression fixes and infrastructure improvements", "activity": "- **Seven new PRs opened** this week including **effect handler extension** by [Michael Lee](https://github.com/michaelleejl) adding discontinue variant with effects ([#14107](https://github.com/ocaml/ocaml/issues/14107)), **recursive module type fix** by [Clément Blaudeau](https://github.com/clementblaudeau) ([#14100](https://github.com/ocaml/ocaml/issues/14100)), and **MSVC warning cleanup** by [David Allsopp](https://github.com/dra27) ([#14103](https://github.com/ocaml/ocaml/issues/14103))\n- **CI infrastructure modernization** by [David Allsopp](https://github.com/dra27) addressed GitHub Actions image updates with critical fixes for build system stability ([#14102](https://github.com/ocaml/ocaml/issues/14102), [#14109](https://github.com/ocaml/ocaml/issues/14109))\n- **Code quality improvements** merged including [Samuel Vivien](https://github.com/samsa1) removing redundant normalize_package_path function ([#14110](https://github.com/ocaml/ocaml/issues/14110)) and [Florian Angeletti](https://github.com/Octachron) fixing documentation formatting ([#14112](https://github.com/ocaml/ocaml/issues/14112))\n- **Cross-platform compatibility** enhanced with Windows i686 mingw-w64 time_t fixes and clang warning resolution for better multi-compiler support ([#14114](https://github.com/ocaml/ocaml/issues/14114), [#14109](https://github.com/ocaml/ocaml/issues/14109))", "discussions_summary": "String module enhancement proposal discussing addition of search functions for better string handling", "notable_discussions": "- **String module search functions** proposed by [Daniel Bünzli](https://github.com/dbuenzli) exploring addition of efficient search capabilities to the String module for improved string processing ([#14099](https://github.com/ocaml/ocaml/issues/14099))", "trends_summary": "OCaml 5.4 alpha testing reveals several regressions while infrastructure improvements strengthen CI reliability", "emerging_trends": "- **OCaml 5.4 regression testing** uncovered multiple compatibility issues affecting external tooling including perf/flamegraph broken by symbol mangling changes ([#14104](https://github.com/ocaml/ocaml/issues/14104)), C++ compilation failures ([#14101](https://github.com/ocaml/ocaml/issues/14101)), and Array module conflicts ([#14115](https://github.com/ocaml/ocaml/issues/14115))\n- **Infrastructure hardening** trend continues with focus on CI reliability, cross-platform warning elimination, and build system modernization across Windows, macOS, and Linux environments\n- **Developer experience improvements** through better error messages, type system enhancements, and tooling fixes demonstrating commitment to usability alongside performance", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Nine active contributors delivered infrastructure fixes, type system improvements, and OCaml 5.4 compatibility work", "contributors": "- [David Allsopp](https://github.com/dra27) led infrastructure improvements with critical CI fixes for GitHub Actions compatibility ([#14102](https://github.com/ocaml/ocaml/issues/14102)), clang warning resolution ([#14109](https://github.com/ocaml/ocaml/issues/14109)), and Windows mingw-w64 compilation fixes ([#14114](https://github.com/ocaml/ocaml/issues/14114))\n- [Florian Angeletti](https://github.com/Octachron) enhanced error messaging with quantifier mismatch explanations ([#14111](https://github.com/ocaml/ocaml/issues/14111)), fixed toplevel directive typos ([#14108](https://github.com/ocaml/ocaml/issues/14108)), and corrected documentation formatting ([#14112](https://github.com/ocaml/ocaml/issues/14112))\n- [Kate](https://github.com/kit-ty-kate) conducted thorough OCaml 5.4 alpha testing, identifying critical regressions affecting perf tooling ([#14104](https://github.com/ocaml/ocaml/issues/14104)), C++ compatibility ([#14101](https://github.com/ocaml/ocaml/issues/14101)), and Array module usage ([#14115](https://github.com/ocaml/ocaml/issues/14115))\n- [@clementblaudeau](https://github.com/clementblaudeau) fixed recursive module signature approximation issues ([#14100](https://github.com/ocaml/ocaml/issues/14100)) and contributed to module typechecking discussions ([#14106](https://github.com/ocaml/ocaml/issues/14106))\n- [@voodoos](https://github.com/voodoos) resolved Pprintast infinite loop affecting development tools like Merlin ([#14105](https://github.com/ocaml/ocaml/issues/14105))\n- [@michaelleejl](https://github.com/michaelleejl) proposed effect handler extensions with discontinue variants ([#14107](https://github.com/ocaml/ocaml/issues/14107)) advancing algebraic effects research\n- [@samsa1](https://github.com/samsa1) contributed code cleanup by removing redundant normalize_package_path function ([#14110](https://github.com/ocaml/ocaml/issues/14110))\n- [@ccasin](https://github.com/ccasin) reported module typechecking incompleteness with detailed analysis of shadowing behavior ([#14106](https://github.com/ocaml/ocaml/issues/14106))\n- [@dbuenzli](https://github.com/dbuenzli) initiated discussions about String module enhancements for improved string search capabilities ([#14099](https://github.com/ocaml/ocaml/issues/14099))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 25, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-06-16 to 2025-06-22", "start_commit": "89e4b157b3487085beaeca29aea78875b18c64fe", "end_commit": "aaf854dfff5e2e424aa0673ae6873faa64b664bb", "brief_summary": "Standard library enhancements with new Option and Dynarray functions, Domain API refinement, and substantial test infrastructure improvements", "new_features_summary": "New Option.for_all/exists functions, Dynarray.rev_iter/rev_iteri, Domain.count API, and enhanced test infrastructure with relocatable OCaml support", "new_features": "- **Option module enhancements** with new `for_all` and `exists` functions that behave like their List counterparts on zero or one element ([#13920](https://github.com/ocaml/ocaml/issues/13920))\n- **Dynarray reverse iteration** support with `rev_iter` and `rev_iteri` functions for stack-like workflows, iterating from highest to lowest index ([#12877](https://github.com/ocaml/ocaml/issues/12877))\n- **Domain API refinement** by renaming `Domain.running_domain_count` to `Domain.count` for cleaner interface ([#14096](https://github.com/ocaml/ocaml/issues/14096))\n- **Improved Unix/Sys symmetry** with shared implementations between `Sys` and `Unix` modules for portability functions like rename, close, chdir, and system commands ([#13447](https://github.com/ocaml/ocaml/issues/13447))\n- **Enhanced test harness infrastructure** for relocatable OCaml with comprehensive testing tools for bytecode binaries, dynlink, link modes, relocation, and toplevel functionality ([#14014](https://github.com/ocaml/ocaml/issues/14014))\n- **TSan test reliability improvements** through better synchronization and de-instrumentation of string/bytes initializing writes ([#14059](https://github.com/ocaml/ocaml/issues/14059))\n- **Sanitizer debug support** with proper debugger flags for native-debugger tests when running with sanitizers ([#14085](https://github.com/ocaml/ocaml/issues/14085))\n- **OCamldoc formatting fix** removing unwanted paragraph tags in module tables for cleaner documentation output ([#14098](https://github.com/ocaml/ocaml/issues/14098))\n- **Pattern matching determinism** fix addressing non-deterministic code generation in certain pattern matching scenarios ([#14091](https://github.com/ocaml/ocaml/issues/14091))", "activity_summary": "Multiple stdlib enhancements merged including Option predicates and Dynarray iteration, alongside test infrastructure improvements and platform compatibility work", "activity": "- **Standard library expansion** delivered through [Gabriel Scherer](https://github.com/gasche) adding `Option.for_all` and `exists` predicates ([#13920](https://github.com/ocaml/ocaml/issues/13920)) plus `Dynarray.rev_iter` and `rev_iteri` for reverse iteration ([#12877](https://github.com/ocaml/ocaml/issues/12877))\n- **Domain module API cleanup** by [Nicolás Ojeda Bär](https://github.com/nojb) renaming `running_domain_count` to the cleaner `Domain.count` function ([#14096](https://github.com/ocaml/ocaml/issues/14096), [#14086](https://github.com/ocaml/ocaml/issues/14086))\n- **Cross-platform compatibility improvements** through [Antonin Décimo](https://github.com/MisterDA) symmetrizing shared functions between `Sys` and `Unix` modules for better code maintainability ([#13447](https://github.com/ocaml/ocaml/issues/13447))\n- **Testing infrastructure overhaul** by [David Allsopp](https://github.com/dra27) implementing comprehensive test harness for relocatable OCaml with tools covering bytecode, dynlink, link modes, and relocation scenarios ([#14014](https://github.com/ocaml/ocaml/issues/14014))\n- **ThreadSanitizer reliability** enhanced by [Olivier Nicole](https://github.com/OlivierNicole) fixing flaky tests through better synchronization and de-instrumenting string/bytes writes ([#14059](https://github.com/ocaml/ocaml/issues/14059))\n- **Documentation and tooling refinements** including [Florian Angeletti](https://github.com/Octachron) fixing OCamldoc paragraph formatting ([#14098](https://github.com/ocaml/ocaml/issues/14098)), [Tim McGilchrist](https://github.com/tmcgilchrist) adding sanitizer debug flags ([#14085](https://github.com/ocaml/ocaml/issues/14085)), and [Gabriel Scherer](https://github.com/gasche) addressing pattern matching determinism ([#14091](https://github.com/ocaml/ocaml/issues/14091))", "discussions_summary": "ThreadSanitizer crash investigations, pattern matching non-determinism analysis, and scope error message improvements", "notable_discussions": "- **ThreadSanitizer crash investigation** with [Nathan Taylor](https://github.com/dijkstracula) reporting crashes in both Semgrep and dune builds under TSan, leading to [Olivier Nicole](https://github.com/OlivierNicole) identifying potential C stub compilation issues with Dune ([#14083](https://github.com/ocaml/ocaml/issues/14083))\n- **Pattern matching determinism** discussion where [Cristiano Calcagno](https://github.com/cristianoc) discovered non-deterministic code generation in pattern matching compilation, resolved through [Gabriel Scherer](https://github.com/gasche) implementing deterministic hash table iteration ([#14088](https://github.com/ocaml/ocaml/issues/14088))\n- **Type scope error messages** debate with [Jim Fehrle](https://github.com/jfehrle) requesting clearer explanations for \"type constructor would escape its scope\" errors, with [Florian Angeletti](https://github.com/Octachron) providing detailed scope visualization proposals ([#14095](https://github.com/ocaml/ocaml/issues/14095))\n- **Digest reproducibility concerns** raised by [Stéphane Glondu](https://github.com/glondu) about compression causing binary distribution issues when zstd versions change, affecting cmi/cmx digests ([#14089](https://github.com/ocaml/ocaml/issues/14089))", "trends_summary": "Focus on standard library ergonomics, test infrastructure robustness, and developer experience improvements through better error messages", "emerging_trends": "- **Standard library ergonomics** emphasis with consistent addition of missing predicates and iteration functions to match established patterns across modules\n- **Test infrastructure maturation** through comprehensive test harness development covering complex scenarios like relocatable installations and cross-platform compatibility\n- **ThreadSanitizer integration** becoming more robust with systematic fixes for flaky tests and proper toolchain integration\n- **Developer experience focus** evident in pattern matching determinism fixes, clearer error messages, and improved documentation formatting\n- **Platform consistency** efforts through code sharing between Unix and Sys modules, reducing maintenance burden and potential discrepancies", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Nine contributors delivered standard library enhancements, test infrastructure improvements, and platform compatibility fixes", "contributors": "- [Gabriel Scherer](https://github.com/gasche) implemented Option predicates ([#13920](https://github.com/ocaml/ocaml/issues/13920)) and Dynarray reverse iteration functions ([#12877](https://github.com/ocaml/ocaml/issues/12877)), fixed pattern matching determinism ([#14091](https://github.com/ocaml/ocaml/issues/14091)), and contributed to CI improvements ([#14097](https://github.com/ocaml/ocaml/issues/14097))\n- [Nicolás Ojeda Bär](https://github.com/nojb) refined the Domain module API by renaming `running_domain_count` to `count` ([#14096](https://github.com/ocaml/ocaml/issues/14096), [#14086](https://github.com/ocaml/ocaml/issues/14086)) and provided review support for multiple PRs\n- [@MisterDA](https://github.com/MisterDA) improved cross-platform compatibility by symmetrizing Sys and Unix module functions ([#13447](https://github.com/ocaml/ocaml/issues/13447)) and has ongoing work on C primitives hardening ([#13841](https://github.com/ocaml/ocaml/issues/13841))\n- [@dra27](https://github.com/dra27) delivered comprehensive test harness infrastructure for relocatable OCaml installations ([#14014](https://github.com/ocaml/ocaml/issues/14014)) with extensive testing tools and documentation\n- [@OlivierNicole](https://github.com/OlivierNicole) enhanced ThreadSanitizer reliability by fixing flaky tests and de-instrumenting problematic memory operations ([#14059](https://github.com/ocaml/ocaml/issues/14059)), also investigating TSan crash reports ([#14083](https://github.com/ocaml/ocaml/issues/14083))\n- [Florian Angeletti](https://github.com/Octachron) improved documentation quality by fixing OCamldoc paragraph formatting in module tables ([#14098](https://github.com/ocaml/ocaml/issues/14098)) and provided detailed explanations for type scope errors ([#14095](https://github.com/ocaml/ocaml/issues/14095))\n- [@tmcgilchrist](https://github.com/tmcgilchrist) enhanced sanitizer testing by adding proper debugger flags for native-debugger tests ([#14085](https://github.com/ocaml/ocaml/issues/14085))\n- [@cristianoc](https://github.com/cristianoc) identified and reported pattern matching non-determinism issues that led to important compiler fixes ([#14088](https://github.com/ocaml/ocaml/issues/14088))\n- [@stedolan](https://github.com/stedolan) fixed channel handling to avoid errors when flushing during close operations ([aaf854d](https://github.com/ocaml/ocaml/commit/aaf854dfff5e2e424aa0673ae6873faa64b664bb))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 24, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-06-09 to 2025-06-15", "start_commit": "342a6431356af904dff5d06b940249a9429fc081", "end_commit": "9585ef98182f0159a6ceb00e0824ff11cf3237c0", "brief_summary": "Performance improvements for Apple Silicon and ThreadSanitizer compatibility fixes delivered alongside comprehensive test infrastructure for relocatable OCaml", "new_features_summary": "Apple Silicon performance optimization, Domain.running_domain_count API, and new UTF-8 string utilities added", "new_features": "- **Apple Silicon performance** optimization by [KC Sivaramakrishnan](https://github.com/kayceesrk) replacing slow fenced stores with fast release stores, delivering **25x performance improvement** for certain workloads ([#14074](https://github.com/ocaml/ocaml/issues/14074))\n- **Domain management API** enhancement with new `Domain.running_domain_count` function by [Nicolás Ojeda Bär](https://github.com/nojb) for dynamic domain monitoring in long-running applications ([f1c31807fd9d56880bef5e64c8b2aec175dcbc10](https://github.com/ocaml/ocaml/commit/f1c31807fd9d56880bef5e64c8b2aec175dcbc10))\n- **UTF-8 string utilities** added to `Misc.Stdlib.String` module with `to_utf_8_seq` function for Unicode processing ([b48ba73a22dbf499133dcb1dbd8464be41f5e8a8](https://github.com/ocaml/ocaml/commit/b48ba73a22dbf499133dcb1dbd8464be41f5e8a8))\n- **DLL search path API** expanded with `Dll.search_path` function for accessing current dynamic library search paths ([79071c4ddd659a33b917101a6d451e888063e8ef](https://github.com/ocaml/ocaml/commit/79071c4ddd659a33b917101a6d451e888063e8ef))\n- **Test infrastructure** for relocatable OCaml with comprehensive harness tools enabling portable compiler installations ([9585ef98182f0159a6ceb00e0824ff11cf3237c0](https://github.com/ocaml/ocaml/commit/9585ef98182f0159a6ceb00e0824ff11cf3237c0))", "activity_summary": "ThreadSanitizer compatibility improvements, type system error message enhancements, and module alias validation refinements", "activity": "- **ThreadSanitizer compatibility** work by [Olivier Nicole](https://github.com/OlivierNicole) addressing runtime crashes with new draft PR for false alarm fixes ([#14075](https://github.com/ocaml/ocaml/issues/14075)) and investigation of multiple OCaml programs under TSAN crashes ([#14083](https://github.com/ocaml/ocaml/issues/14083))\n- **Type system improvements** delivered by [Florian Angeletti](https://github.com/Octachron) with better error messages for universal type variable mismatches ([#14076](https://github.com/ocaml/ocaml/issues/14076)) and module alias validation refinements by [Clément Blaudeau](https://github.com/clementblaudeau) ([#14066](https://github.com/ocaml/ocaml/issues/14066))\n- **Code generation enhancements** including package constraint display improvements by [Samuel Vivien](https://github.com/samsa1) ([#14067](https://github.com/ocaml/ocaml/issues/14067)) and GCC alignment warning fixes by [Antonin Décimo](https://github.com/MisterDA) ([#14035](https://github.com/ocaml/ocaml/issues/14035))\n- **CI and debugging infrastructure** improvements with [Tim McGilchrist](https://github.com/tmcgilchrist) adding debugger flags for sanitizer scripts ([#14085](https://github.com/ocaml/ocaml/issues/14085)) and [David Allsopp](https://github.com/dra27) switching back to ubuntu-latest in GitHub Actions ([#13680](https://github.com/ocaml/ocaml/issues/13680))\n- **Platform compatibility** discussions including Android/Termux build failures due to missing pthread_cancel functionality ([#14087](https://github.com/ocaml/ocaml/issues/14087)) and DWARF debugging issues on macOS ([#14062](https://github.com/ocaml/ocaml/issues/14062))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on multicore stability, platform compatibility, and performance optimization across different architectures", "emerging_trends": "- **Multicore runtime stability** becoming priority with multiple ThreadSanitizer improvements addressing production issues affecting tools like Semgrep and Dune\n- **Cross-platform performance** optimization efforts targeting Apple Silicon and ARM64 architectures with specific instruction-level improvements\n- **Relocatable compiler infrastructure** development enabling portable OCaml installations that work from any disk location\n- **Enhanced debugging and development tools** with better error messages, debugging infrastructure, and sanitizer compatibility improvements", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Eight core developers delivered performance fixes, API enhancements, and runtime stability improvements", "contributors": "- [KC Sivaramakrishnan](https://github.com/kayceesrk) implemented Apple Silicon performance optimization delivering 25x improvement for certain workloads and contributed to ARM64 code generation improvements\n- [Olivier Nicole](https://github.com/OlivierNicole) led ThreadSanitizer compatibility work investigating runtime crashes and developing fixes for false alarms in multicore applications\n- [Tim McGilchrist](https://github.com/tmcgilchrist) enhanced CI infrastructure with debugger flags for sanitizer scripts and participated in domain API discussions\n- [Nicolás Ojeda Bär](https://github.com/nojb) added Domain.running_domain_count API for dynamic domain management in long-running applications\n- [Florian Angeletti](https://github.com/Octachron) improved type system error messages for universal variable mismatches and enhanced debugging information\n- [David Allsopp](https://github.com/dra27) contributed CI improvements and extensive work on relocatable OCaml test infrastructure\n- [Samuel Vivien](https://github.com/samsa1) improved package constraint display in type printer as preparation for modular implicits work\n- [@clementblaudeau](https://github.com/clementblaudeau) refactored module alias validation to catch invalid aliases earlier with better error messages", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 23, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-06-02 to 2025-06-08", "start_commit": "8b1a07c0081cf02a53aa6ad17782761d9ed2f043", "end_commit": "5f2b948a56124aa0864e202e0270475fbf97e21c", "brief_summary": "Active week with Option.blend addition, Apple Silicon optimizations, GC fixes, and improved error messages across multiple merged PRs", "new_features_summary": "Option.blend function, Sixtyfour memory chunk for unaligned access, improved error messages for tuple labels, debugger loadpath fallback", "new_features": "- **Option.blend function** added to standard library by [Kate](https://github.com/kit-ty-kate) enabling flexible combination of optional values ([#13995](https://github.com/ocaml/ocaml/issues/13995))\n- **Sixtyfour memory chunk** introduced by [KC Sivaramakrishnan](https://github.com/kayceesrk) for handling unaligned 64-bit accesses without memory ordering requirements, optimizing Apple Silicon performance ([#14074](https://github.com/ocaml/ocaml/issues/14074))\n- **Enhanced error messages** for tuple label mismatches by [Florian Angeletti](https://github.com/Octachron) providing clearer feedback when labels don't match ([#14070](https://github.com/ocaml/ocaml/issues/14070))\n- **Debugger source file fallback** by [Pierre Boutillier](https://github.com/pirbo) enabling loadpath-based source file discovery for better dune project support ([#14063](https://github.com/ocaml/ocaml/issues/14063))", "activity_summary": "Six PRs merged including standard library additions, compiler optimizations, bug fixes, and improved developer experience", "activity": "- **Standard library enhancement** with Option.blend function by [Kate](https://github.com/kit-ty-kate) providing flexible optional value combination ([#13995](https://github.com/ocaml/ocaml/issues/13995))\n- **Apple Silicon performance optimization** by [KC Sivaramakrishnan](https://github.com/kayceesrk) introducing Sixtyfour memory chunk and `stlr` instruction usage for significant speedup ([#14074](https://github.com/ocaml/ocaml/issues/14074))\n- **Error message improvements** by [Florian Angeletti](https://github.com/Octachron) enhancing tuple label mismatch reporting and univar error pointing ([#14070](https://github.com/ocaml/ocaml/issues/14070))\n- **Documentation consistency** fixes by [Damien Doligez](https://github.com/damiendoligez) correcting fibonacci function definitions in manual ([#14072](https://github.com/ocaml/ocaml/issues/14072))\n- **Bug fixes** including unused warning issue by [Ulysse](https://github.com/voodoos) ([#13956](https://github.com/ocaml/ocaml/issues/13956)) and dynlink exception printer fix by [Etienne Millon](https://github.com/emillon) ([#14071](https://github.com/ocaml/ocaml/issues/14071))\n- **Developer tooling** improvements with debugger loadpath fallback by [Pierre Boutillier](https://github.com/pirbo) for better dune project debugging ([#14063](https://github.com/ocaml/ocaml/issues/14063))", "discussions_summary": "Critical GC bug discussion with quick resolution, feature requests for bigarray improvements, and alerts documentation analysis", "notable_discussions": "- **Critical GC crash** reported by [Benoît Vaugon](https://github.com/bvaugon) where garbage collection stops triggering after heap compactions, quickly resolved by [Damien Doligez](https://github.com/damiendoligez) with reference to existing fix ([#14073](https://github.com/ocaml/ocaml/issues/14073))\n- **Bigarray integer access** feature request by [Florian Angeletti](https://github.com/Octachron) to expose `{get,set}_int{16,32,64}_{le,be}` primitives, with support from [Anil Madhavapeddy](https://github.com/avsm) for mirage-cstruct use case ([#14069](https://github.com/ocaml/ocaml/issues/14069))\n- **Alerts documentation inconsistencies** detailed analysis by [Shon Feder](https://github.com/shonfeder) identifying confusing grammar and usage patterns in alert attributes ([#14078](https://github.com/ocaml/ocaml/issues/14078))", "trends_summary": "Focus on performance optimization, user experience improvements, and documentation quality with active multicore development", "emerging_trends": "- **Apple Silicon optimization** efforts showing measurable performance improvements through better instruction generation and memory access patterns\n- **Error message quality** initiatives with ongoing improvements to compiler feedback and user experience\n- **Multicore stability** focus with GC bug fixes and runtime system reliability improvements\n- **Standard library expansion** adding commonly requested utility functions like Option.blend\n- **Documentation accuracy** efforts identifying and fixing inconsistencies across language feature descriptions", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Eight core contributors delivered features, optimizations, and fixes with strong collaboration on technical reviews", "contributors": "- [Kate](https://github.com/kit-ty-kate) implemented the Option.blend function for the standard library ([#13995](https://github.com/ocaml/ocaml/issues/13995))\n- [KC Sivaramakrishnan](https://github.com/kayceesrk) delivered Apple Silicon performance optimization introducing Sixtyfour memory chunk and optimized instruction generation ([#14074](https://github.com/ocaml/ocaml/issues/14074))\n- [Florian Angeletti](https://github.com/Octachron) improved error messages for tuple label mismatches and univar handling, provided technical reviews on multiple PRs ([#14070](https://github.com/ocaml/ocaml/issues/14070))\n- [Damien Doligez](https://github.com/damiendoligez) fixed manual documentation and resolved critical GC bug discussion ([#14072](https://github.com/ocaml/ocaml/issues/14072), [#14073](https://github.com/ocaml/ocaml/issues/14073))\n- [@voodoos](https://github.com/voodoos) fixed unused warning bug and added test coverage ([#13956](https://github.com/ocaml/ocaml/issues/13956))\n- [@emillon](https://github.com/emillon) corrected dynlink exception printer name ([#14071](https://github.com/ocaml/ocaml/issues/14071))\n- [@pirbo](https://github.com/pirbo) enhanced debugger source file discovery with loadpath fallback ([#14063](https://github.com/ocaml/ocaml/issues/14063))\n- [@shonfeder](https://github.com/shonfeder) provided detailed analysis of alerts documentation inconsistencies ([#14078](https://github.com/ocaml/ocaml/issues/14078))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 22, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-05-26 to 2025-06-01", "start_commit": null, "end_commit": null, "brief_summary": "Eight PRs opened for language features, debugging tools, memory profiling, and standard library enhancements with three issues addressing runtime system concerns", "new_features_summary": null, "new_features": null, "activity_summary": "Eight new PRs opened covering transparent ascription, debugger improvements, memprof enhancements, and hashtable API additions", "activity": "- **Eight new PRs opened** this week including transparent ascription first step by [Clément Blaudeau](https://github.com/clementblaudeau) ([#14064](https://github.com/ocaml/ocaml/issues/14064)), debugger path resolution improvements by [Pierre Boutillier](https://github.com/pirbo) ([#14055](https://github.com/ocaml/ocaml/issues/14055), [#14063](https://github.com/ocaml/ocaml/issues/14063)), and hashtable API enhancements by [Sacha Ayoun](https://github.com/giltho) ([#14060](https://github.com/ocaml/ocaml/issues/14060))\n- **Memory profiling improvements** delivered through multicore memprof compositional changes by [Guillaume Munch-Maccagnoni](https://github.com/gadmm) ([#14053](https://github.com/ocaml/ocaml/issues/14053)) and minor GC timing fix by [Nick Barnes](https://github.com/NickBarnes) ([#14057](https://github.com/ocaml/ocaml/issues/14057))\n- **Runtime system testing** enhanced with ThreadSanitizer test reliability improvements by [Olivier Nicole](https://github.com/OlivierNicole) ([#14059](https://github.com/ocaml/ocaml/issues/14059)) and type alias deprecation framework by [@v-gb](https://github.com/v-gb) ([#14054](https://github.com/ocaml/ocaml/issues/14054))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Development focus on multicore runtime system reliability, debugging toolchain improvements, and type system evolution", "emerging_trends": "- **Multicore runtime stability** receiving continued attention with multiple PRs addressing memory profiling coordination, garbage collection timing, and ThreadSanitizer test reliability ([#14053](https://github.com/ocaml/ocaml/issues/14053), [#14057](https://github.com/ocaml/ocaml/issues/14057), [#14059](https://github.com/ocaml/ocaml/issues/14059), [#14061](https://github.com/ocaml/ocaml/issues/14061))\n- **Developer tooling enhancements** with debugger path resolution fixes for modern build systems and improved source file discovery mechanisms ([#14055](https://github.com/ocaml/ocaml/issues/14055), [#14063](https://github.com/ocaml/ocaml/issues/14063))\n- **Type system evolution** progressing with transparent ascription implementation and deprecation mechanisms for smooth API transitions ([#14064](https://github.com/ocaml/ocaml/issues/14064), [#14054](https://github.com/ocaml/ocaml/issues/14054))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Eight contributors opened PRs addressing language features, runtime systems, and developer tooling with additional issue reporting and discussion participation", "contributors": "- [Clément Blaudeau](https://github.com/clementblaudeau) implemented transparent ascription feature split as the first step toward the transparent ascription RFC ([#14064](https://github.com/ocaml/ocaml/issues/14064))\n- [Pierre Boutillier](https://github.com/pirbo) improved debugger functionality with BUILD_PATH_PREFIX_MAP handling ([#14055](https://github.com/ocaml/ocaml/issues/14055)) and module source file discovery ([#14063](https://github.com/ocaml/ocaml/issues/14063))\n- [Guillaume Munch-Maccagnoni](https://github.com/gadmm) enhanced multicore memory profiling with compositional interface changes ([#14053](https://github.com/ocaml/ocaml/issues/14053))\n- [Sacha Ayoun](https://github.com/giltho) added remove_mem and replace_mem functions to Hashtbl module for more efficient operations ([#14060](https://github.com/ocaml/ocaml/issues/14060))\n- [Nick Barnes](https://github.com/NickBarnes) fixed memory profiling timing issues in minor garbage collection ([#14057](https://github.com/ocaml/ocaml/issues/14057))\n- [Olivier Nicole](https://github.com/OlivierNicole) improved ThreadSanitizer test reliability ([#14059](https://github.com/ocaml/ocaml/issues/14059)) and reported runtime system data race issues ([#14061](https://github.com/ocaml/ocaml/issues/14061), [#14058](https://github.com/ocaml/ocaml/issues/14058))\n- [@v-gb](https://github.com/v-gb) proposed type alias deprecation mechanisms for smoother API evolution ([#14054](https://github.com/ocaml/ocaml/issues/14054))\n- [@kit-ty-kate](https://github.com/kit-ty-kate) suggested runtime compilation standard improvements to prevent future GCC-related issues ([#14056](https://github.com/ocaml/ocaml/issues/14056))\n- [Gabriel Scherer](https://github.com/gasche) and [@kayceesrk](https://github.com/kayceesrk) provided technical analysis and commentary on multicore runtime performance issues ([#14047](https://github.com/ocaml/ocaml/issues/14047))\n- [@ngorogiannis](https://github.com/ngorogiannis) reported detailed multicore performance analysis with comprehensive profiling data from Infer static analyzer workloads ([#14047](https://github.com/ocaml/ocaml/issues/14047))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 21, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-05-19 to 2025-05-25", "start_commit": "e1f84de6f3ae864936ef207126e0e19cecdd5d38", "end_commit": "64ef2d0ce1eb7d5f09ac6cde1a78f74b62804cc6", "brief_summary": "Cross-compilation support for freestanding targets merged, multicore GC race condition fixed, Windows process handling improved", "new_features_summary": "Cross-compilation to freestanding targets, improved Windows process termination, multicore GC stability fixes", "new_features": "- **Cross-compilation support** for freestanding targets (MirageOS unikernels) enabling embedded development ([#13810](https://github.com/ocaml/ocaml/issues/13810))\n- **Windows process termination** behavior improved in `Unix.kill` to return proper exit code ERROR_PROCESS_ABORTED (1067) instead of 0 ([#14046](https://github.com/ocaml/ocaml/issues/14046))\n- **Multicore GC stability** fix for race condition in shared heap handling during domain termination ([#14025](https://github.com/ocaml/ocaml/issues/14025))\n- **Special constructor** for `%sys_argv` primitive fixing bug where direct calls incorrectly included extra arguments ([#10570](https://github.com/ocaml/ocaml/issues/10570))\n- **Build reproducibility** improvements using BUILD_PATH_PREFIX_MAP for debug event path sanitization ([#14045](https://github.com/ocaml/ocaml/issues/14045))\n- **Type system scope** handling improvements for GADT type checking in principal mode ([#13781](https://github.com/ocaml/ocaml/issues/13781))", "activity_summary": "Seven new PRs opened including modular explicits documentation, four major multicore and platform fixes merged", "activity": "- **Seven new PRs opened** this week including [Gabriel Scherer](https://github.com/gasche) documenting modular explicits ([#14048](https://github.com/ocaml/ocaml/issues/14048)), [Gabriel Scherer](https://github.com/gasche) proposing AI contribution guidelines ([#14052](https://github.com/ocaml/ocaml/issues/14052)), and [Malek Ben Romdhane](https://github.com/malekbr) implementing field getter syntax ([#14042](https://github.com/ocaml/ocaml/issues/14042))\n- **Multicore runtime improvements** with [Gabriel Scherer](https://github.com/gasche) fixing critical shared heap race condition ([#14025](https://github.com/ocaml/ocaml/issues/14025)) and ongoing performance investigation by [Nikos Gorogiannis](https://github.com/ngorogiannis) for Facebook's Infer analyzer ([#14047](https://github.com/ocaml/ocaml/issues/14047))\n- **Platform compatibility enhancements** through [Nicolás Ojeda Bär](https://github.com/nojb) improving Windows process handling ([#14046](https://github.com/ocaml/ocaml/issues/14046)) and [@shym](https://github.com/shym) enabling freestanding target compilation ([#13810](https://github.com/ocaml/ocaml/issues/13810))\n- **Developer tooling fixes** including [Brandon Stride](https://github.com/brandonzstride) addressing infinite loop with `-short-paths` flag ([#14037](https://github.com/ocaml/ocaml/issues/14037)) and [Keryan Didier](https://github.com/Keryan-dev) fixing `caml_sys_argv` external function ([#13714](https://github.com/ocaml/ocaml/issues/13714))", "discussions_summary": "Domain count optimization discussion and multicore performance analysis in production environments", "notable_discussions": "- **Domain count optimization** debate initiated by [@zapashcanon](https://github.com/zapashcanon) questioning whether `Domain.recommended_domain_count` should return physical cores instead of logical cores for better cache performance ([#14044](https://github.com/ocaml/ocaml/issues/14044))\n- **Real-world multicore performance** investigation by [Nikos Gorogiannis](https://github.com/ngorogiannis) documenting 30% performance penalty when Facebook's Infer analyzer uses multicore versus multiprocessing, with detailed profiling data showing runtime lock contention ([#14047](https://github.com/ocaml/ocaml/issues/14047))\n- **AI-assisted development** guidelines discussion started by [Gabriel Scherer](https://github.com/gasche) addressing modern contribution workflows ([#14052](https://github.com/ocaml/ocaml/issues/14052))", "trends_summary": "Focus on multicore optimization, cross-platform support, and preparation for major language features", "emerging_trends": "- **Multicore runtime maturation** with increased focus on production performance optimization and race condition fixes reflecting real-world deployment needs\n- **Cross-platform development** emphasis through improved Windows compatibility and embedded/unikernel compilation support\n- **Language evolution preparation** with documentation and groundwork for upcoming modular explicits feature and potential field getter syntax\n- **Modern development practices** integration including AI-assisted contribution guidelines and improved build reproducibility", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Eight contributors active with core team members leading multicore improvements and platform enhancements", "contributors": "- [Gabriel Scherer](https://github.com/gasche) implemented multicore GC race condition fix ([#14025](https://github.com/ocaml/ocaml/issues/14025)), authored modular explicits documentation ([#14048](https://github.com/ocaml/ocaml/issues/14048)), and proposed AI contribution guidelines ([#14052](https://github.com/ocaml/ocaml/issues/14052))\n- [Nikos Gorogiannis](https://github.com/ngorogiannis) reported detailed multicore performance analysis with production Infer data ([#14047](https://github.com/ocaml/ocaml/issues/14047))\n- [@nojb](https://github.com/nojb) improved Windows process termination behavior ([#14046](https://github.com/ocaml/ocaml/issues/14046)) and provided guidance on `-nopervasives` usage ([#14049](https://github.com/ocaml/ocaml/issues/14049))\n- [@shym](https://github.com/shym) enabled cross-compilation support for freestanding targets ([#13810](https://github.com/ocaml/ocaml/issues/13810))\n- [@pirbo](https://github.com/pirbo) contributed build reproducibility improvements ([#14045](https://github.com/ocaml/ocaml/issues/14045)) and debugger printer refactoring ([#13969](https://github.com/ocaml/ocaml/issues/13969))\n- [@garrigue](https://github.com/garrigue) fixed type system scope handling for GADTs ([#13781](https://github.com/ocaml/ocaml/issues/13781))\n- [@Keryan-dev](https://github.com/Keryan-dev) fixed `caml_sys_argv` external function bug ([#13714](https://github.com/ocaml/ocaml/issues/13714))\n- [@malekbr](https://github.com/malekbr) implemented field getter syntax proposal ([#14042](https://github.com/ocaml/ocaml/issues/14042)) and [@brandonzstride](https://github.com/brandonzstride) addressed compiler tooling issues ([#14037](https://github.com/ocaml/ocaml/issues/14037))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 20, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-05-12 to 2025-05-18", "start_commit": "6c2e7cf22f25b4ec9685b28b5b991346ae842591", "end_commit": "090b954abc29fa77dcfd1e39ee3fe2ae7e01540f", "brief_summary": "Generational stack scanning merged for ARM64/POWER/RISC-V, new Sys.runtime_executable API, and toplevel printer system improvements merged.", "new_features_summary": "New Sys.runtime_executable API, generational stack scanning for multiple architectures, and improved toplevel/debugger printer machinery.", "new_features": "- **Generational stack scanning** implemented for ARM64, POWER, and RISC-V architectures reduces minor GC work with deep call stacks [#13594](https://github.com/ocaml/ocaml/issues/13594) by [Xavier Leroy](https://github.com/xavierleroy)\n- **New Sys.runtime_executable API** added to get the full path to the currently executing runtime, useful for distinguishing between ocamlrun and native executables [#13728](https://github.com/ocaml/ocaml/issues/13728) by [David Allsopp](https://github.com/dra27)\n- **Improved toplevel printer machinery** now unified between toplevel and debugger with generalized polymorphic #install_printer support [#13969](https://github.com/ocaml/ocaml/issues/13969)\n- **Manual organization** enhanced with TeX headers moved to extension-specific .etex files for better maintainability [#14041](https://github.com/ocaml/ocaml/issues/14041)\n- **Unix.map_file memory tracking** in Gc.Memprof ensures all Bigarray memory managed by GC is properly tracked [#13675](https://github.com/ocaml/ocaml/issues/13675) by [Stephen Dolan](https://github.com/stedolan)\n- **Better recursive module error messages** provide clearer diagnostics for invalid recursive module definitions [#13608](https://github.com/ocaml/ocaml/issues/13608)\n- **Format module line breaking** fixes premature line breaks when break hints appear at line end [#13853](https://github.com/ocaml/ocaml/issues/13853) by [Florian Angeletti](https://github.com/Octachron)\n- **TSan false positive fix** removes spurious data race reports between major GC and mutator [#13987](https://github.com/ocaml/ocaml/issues/13987) by [Olivier Nicole](https://github.com/OlivierNicole)\n- **Ocamltest improvements** with better variable handling and environment variable fix [#13961](https://github.com/ocaml/ocaml/issues/13961)", "activity_summary": "Three new PRs opened including relocatable OCaml implementation and FlexDLL build improvements, with multiple runtime and compiler infrastructure merges.", "activity": "- **Three new PRs opened** this week: relocatable OCaml implementation by [David Allsopp](https://github.com/dra27) ([#14244](https://github.com/ocaml/ocaml/issues/14244)), FlexDLL build tools selection improvements by [Antonin Décimo](https://github.com/MisterDA) ([#14034](https://github.com/ocaml/ocaml/issues/14034)), and short-paths infinite loop fix for recursive modules by [Brandon Stride](https://github.com/brandonzstride) ([#14036](https://github.com/ocaml/ocaml/issues/14036))\n- **Generational stack scanning milestone** achieved with [Xavier Leroy](https://github.com/xavierleroy)'s implementation merged for ARM64, POWER, and RISC-V after extensive review by [@miod-vallat](https://github.com/miod-vallat), [Gabriel Scherer](https://github.com/gasche), and [Olivier Nicole](https://github.com/OlivierNicole) ([#13594](https://github.com/ocaml/ocaml/issues/13594))\n- **Printer system unification** completed with [Pierre Boutillier](https://github.com/pirbo) and [Gabriel Scherer](https://github.com/gasche) merging generalized polymorphic #install_printer support for both toplevel and debugger ([#13969](https://github.com/ocaml/ocaml/issues/13969))\n- **Multiple infrastructure improvements** delivered including memprof bigarray tracking by [Stephen Dolan](https://github.com/stedolan) ([#13675](https://github.com/ocaml/ocaml/issues/13675)), ocamltest refactors by [Antonin Décimo](https://github.com/MisterDA) ([#13962](https://github.com/ocaml/ocaml/issues/13962)), and native debugger test sanitization ([#14033](https://github.com/ocaml/ocaml/issues/14033))\n- **FlexDLL submodule updated** to version 0.44 with lib-dynlink-domains test re-enabled on Windows ([#14032](https://github.com/ocaml/ocaml/issues/14032))\n- **Parser and AST improvements** with extension point/attribute handling for local structure items by [Nicolás Ojeda Bär](https://github.com/nojb) ([#14009](https://github.com/ocaml/ocaml/issues/14009)) and structure/signature parsing uniformization ([#14039](https://github.com/ocaml/ocaml/issues/14039))\n- **Error message enhancements** for recursive modules by [shivam](https://github.com/shivam-909) ([#13608](https://github.com/ocaml/ocaml/issues/13608)) and format breaking improvements by [Florian Angeletti](https://github.com/Octachron) ([#13853](https://github.com/ocaml/ocaml/issues/13853))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on runtime infrastructure improvements, developer tooling enhancements, and cross-platform compatibility work across ARM64, Windows, and Unix systems.", "emerging_trends": "- **Runtime optimization focus** with generational stack scanning implementation and memprof tracking improvements addressing performance in multicore environments\n- **Cross-platform development** emphasis shown in FlexDLL improvements, Windows-specific fixes, and ARM64 architecture support enhancements\n- **Developer experience improvements** through better error messages, unified printer systems, and enhanced debugging capabilities\n- **Infrastructure modernization** with relocatable OCaml support and build system improvements for better distribution and deployment", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active development with 17+ contributors including major work by Xavier Leroy on stack scanning, David Allsopp on runtime features, and extensive review activity.", "contributors": "- [Xavier Leroy](https://github.com/xavierleroy) implemented generational stack scanning for ARM64, POWER, and RISC-V architectures, a major runtime optimization ([#13594](https://github.com/ocaml/ocaml/issues/13594))\n- [David Allsopp](https://github.com/dra27) added the new Sys.runtime_executable API ([#13728](https://github.com/ocaml/ocaml/issues/13728)) and opened the comprehensive relocatable OCaml PR ([#14244](https://github.com/ocaml/ocaml/issues/14244))\n- [Nicolás Ojeda Bär](https://github.com/nojb) improved parser handling of extension points and attributes in local structure items ([#14009](https://github.com/ocaml/ocaml/issues/14009)) and uniformized parsing rules ([#14039](https://github.com/ocaml/ocaml/issues/14039))\n- [Antonin Décimo](https://github.com/MisterDA) opened FlexDLL build improvements PR ([#14034](https://github.com/ocaml/ocaml/issues/14034)), contributed ocamltest refactoring ([#13962](https://github.com/ocaml/ocaml/issues/13962)), and worked on native debugger test improvements ([#14033](https://github.com/ocaml/ocaml/issues/14033))\n- [@Octachron](https://github.com/Octachron) fixed Format module line breaking issues with break hints ([#13853](https://github.com/ocaml/ocaml/issues/13853))\n- [@stedolan](https://github.com/stedolan) improved memprof tracking for Unix.map_file and Bigarray memory ([#13675](https://github.com/ocaml/ocaml/issues/13675))\n- [@OlivierNicole](https://github.com/OlivierNicole) fixed TSan false positive reports in GC interactions ([#13987](https://github.com/ocaml/ocaml/issues/13987)) and reported ocamltest variable handling bug ([#13941](https://github.com/ocaml/ocaml/issues/13941))\n- [@gasche](https://github.com/gasche) provided extensive review feedback across multiple PRs and co-authored printer system improvements ([#13969](https://github.com/ocaml/ocaml/issues/13969))\n- [@shivam-909](https://github.com/shivam-909) enhanced error messages for recursive module definitions ([#13608](https://github.com/ocaml/ocaml/issues/13608))\n- [@toastal](https://github.com/toastal) improved manual CSS for better font fallback behavior ([#14038](https://github.com/ocaml/ocaml/issues/14038))\n- [@brandonzstride](https://github.com/brandonzstride) opened fix for short-paths infinite loop in recursive modules ([#14036](https://github.com/ocaml/ocaml/issues/14036))\n- [@goldfirere](https://github.com/goldfirere) documented row_more function invariants ([#14023](https://github.com/ocaml/ocaml/issues/14023))\n- [@damiendoligez](https://github.com/damiendoligez) fixed ocamltest environment variable handling ([#13961](https://github.com/ocaml/ocaml/issues/13961))\n- [Pierre Boutillier](https://github.com/pirbo) co-authored toplevel and debugger printer machinery improvements ([#13969](https://github.com/ocaml/ocaml/issues/13969))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 19, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-05-05 to 2025-05-11", "start_commit": "e291d788b8db28f0b336e8eeaa94a42ae7da42e2", "end_commit": "f252da5314f3eda4967da5caf6eafedcdcabef2c", "brief_summary": "Major atomic record fields feature merged alongside standard library enhancements and runtime fixes", "new_features_summary": "Atomic record fields, Unix.unsetenv, Option.product/Syntax, Dynarray.unsafe_to_iarray, and memory corruption fixes", "new_features": "- **Atomic record fields** with `[@atomic]` attribute and `Atomic.Loc` module for atomic operations on record fields ([#13404](https://github.com/ocaml/ocaml/issues/13404))\n- **Unix.unsetenv** function to remove environment variables from process environment ([#14020](https://github.com/ocaml/ocaml/issues/14020))\n- **Option.product** function and **Option.Syntax** module with binding operators for applicative-style programming ([#13916](https://github.com/ocaml/ocaml/issues/13916))\n- **Dynarray.unsafe_to_iarray** for zero-copy conversion to immutable arrays when capacity equals length ([#13909](https://github.com/ocaml/ocaml/issues/13909))\n- **Memory corruption fix** during demarshaling when exceptions are raised, preventing segfaults during GC ([#14015](https://github.com/ocaml/ocaml/issues/14015))\n- **Domain lock release** fix preventing deadlocks when domain creation fails ([#13953](https://github.com/ocaml/ocaml/issues/13953))\n- **Runtime events dispatch** fix ensuring correct event message types are sent ([#13970](https://github.com/ocaml/ocaml/issues/13970))\n- **Unterminated string initialization** warning fix for clang 21 compatibility ([#14024](https://github.com/ocaml/ocaml/issues/14024))", "activity_summary": "Repository infrastructure improvements including CI matrix expansion and stale bot configuration changes", "activity": "- **Atomic record fields implementation** completed by [@clef-men](https://github.com/clef-men) with comprehensive **manual documentation** by [Gabriel Scherer](https://github.com/gasche), enabling thread-safe field access with `%atomic.loc` extension ([#13404](https://github.com/ocaml/ocaml/issues/13404), [#13991](https://github.com/ocaml/ocaml/issues/13991))\n- **Standard library enhancements** delivered by [Nicolás Ojeda Bär](https://github.com/nojb) adding **Unix.unsetenv** for environment variable management and **Option utilities** with applicative-style binding operators ([#14020](https://github.com/ocaml/ocaml/issues/14020), [#13916](https://github.com/ocaml/ocaml/issues/13916))\n- **Runtime stability fixes** by [Benoît Vaugon](https://github.com/bvaugon) resolving **memory corruption during demarshaling** and by [Gabriel Scherer](https://github.com/gasche) fixing **domain lock release** on spawn failures ([#14015](https://github.com/ocaml/ocaml/issues/14015), [#13953](https://github.com/ocaml/ocaml/issues/13953))\n- **Development infrastructure improvements** including CI matrix expansion with optional Cygwin/static builds by [David Allsopp](https://github.com/dra27) and **stale bot reconfiguration** by [Florian Angeletti](https://github.com/Octachron) to only mark issues stale without auto-closing ([#14013](https://github.com/ocaml/ocaml/issues/14013), [#14004](https://github.com/ocaml/ocaml/issues/14004))\n- **Signature constraint refactoring** by [Clément Blaudeau](https://github.com/clementblaudeau) improving merge logic maintainability and compiler warning fixes by [Antonin Décimo](https://github.com/MisterDA) ([#13911](https://github.com/ocaml/ocaml/issues/13911), [#14024](https://github.com/ocaml/ocaml/issues/14024), [#13970](https://github.com/ocaml/ocaml/issues/13970))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on concurrency features, runtime stability, and platform compatibility improvements", "emerging_trends": "- **Concurrency ecosystem expansion** with atomic record fields representing a new approach to thread-safe data structure design, complementing existing domain-level parallelism features\n- **Standard library modernization** through addition of applicative-style binding operators in Option.Syntax, following functional programming patterns and improving ergonomics\n- **Cross-platform reliability** emphasis with Windows-specific marshal closure issues being reported and Unix environment management being standardized across platforms\n- **Runtime robustness improvements** addressing edge cases in garbage collection, domain management, and demarshaling that could cause segfaults under concurrent workloads", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Nine contributors delivered features, fixes, and infrastructure improvements with focus on atomic operations and runtime stability", "contributors": "- [Gabriel Scherer](https://github.com/gasche) merged **atomic record fields documentation**, fixed **domain lock release** issues, and improved **sizeclasses formatting** ([#13991](https://github.com/ocaml/ocaml/issues/13991), [#13953](https://github.com/ocaml/ocaml/issues/13953), [#13923](https://github.com/ocaml/ocaml/issues/13923))\n- [Nicolás Ojeda Bär](https://github.com/nojb) implemented **Unix.unsetenv** and **Option.product/Syntax** modules with comprehensive API additions ([#14020](https://github.com/ocaml/ocaml/issues/14020), [#13916](https://github.com/ocaml/ocaml/issues/13916))\n- [@clef-men](https://github.com/clef-men) delivered the **atomic record fields** feature with extensive compiler and runtime changes spanning type system, code generation, and documentation ([#13404](https://github.com/ocaml/ocaml/issues/13404))\n- [Antonin Décimo](https://github.com/MisterDA) fixed **compiler warnings** for clang 21 compatibility and MSVC runtime events issues ([#14024](https://github.com/ocaml/ocaml/issues/14024), [#13970](https://github.com/ocaml/ocaml/issues/13970))\n- [Benoît Vaugon](https://github.com/bvaugon) resolved **memory corruption** bug during demarshaling and reported Windows marshal closure compatibility issues ([#14015](https://github.com/ocaml/ocaml/issues/14015), [#14017](https://github.com/ocaml/ocaml/issues/14017))\n- [Florian Angeletti](https://github.com/Octachron) reconfigured **stale bot** behavior and contributed to backport coordination ([#14004](https://github.com/ocaml/ocaml/issues/14004), [#14021](https://github.com/ocaml/ocaml/issues/14021))\n- [Clément Blaudeau](https://github.com/clementblaudeau) refactored **signature merge** constraints improving code maintainability ([#13911](https://github.com/ocaml/ocaml/issues/13911))\n- [@OlivierNicole](https://github.com/OlivierNicole) added **Dynarray.unsafe_to_iarray** for efficient array conversion ([#13909](https://github.com/ocaml/ocaml/issues/13909))\n- [@dra27](https://github.com/dra27) expanded **CI test matrix** with optional build configurations and Windows compatibility improvements ([#14013](https://github.com/ocaml/ocaml/issues/14013))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 18, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-04-28 to 2025-05-04", "start_commit": "60494e239ab043d72c1b1869ca790f7320f849fa", "end_commit": "f172209bfe8b4f1419013809f2d0b37c96272fd8", "brief_summary": "Version bump to 5.5.0, parser refactoring for local constructs, documentation improvements, and important bug fixes", "new_features_summary": "Version bump to 5.5.0, enhanced debugger printing, improved AST handling for local constructs, and documentation anchors", "new_features": "- **Version bump to 5.5.0** with magic numbers updated for the upcoming release ([60494e2](https://github.com/ocaml/ocaml/commit/60494e239ab043d72c1b1869ca790f7320f849fa))\n- **Enhanced debugger printing** support with generalized polymorphic `#install_printer` functionality ([#13966](https://github.com/ocaml/ocaml/issues/13966))\n- **Improved AST handling** for `let open`, `let module` and `let exception` constructs unified through single implementation ([#13839](https://github.com/ocaml/ocaml/issues/13839))\n- **Web manual anchors** added to API documentation headings and items for easier linking ([#14002](https://github.com/ocaml/ocaml/issues/14002))\n- **Enhanced In_Channel and Out_Channel documentation** with clearer usage examples ([#13982](https://github.com/ocaml/ocaml/issues/13982))\n- **Build system improvements** with `[@remove_aliases]` attribute now properly documented ([#13975](https://github.com/ocaml/ocaml/issues/13975))\n- **Parser bug fix** for `Pexp_struct_item` parentheses handling in sequences ([#14008](https://github.com/ocaml/ocaml/issues/14008))", "activity_summary": "Eleven PRs merged including parser refactoring, CI improvements, bug fixes, and documentation updates", "activity": "- **Parser and AST improvements** delivered through multiple merged PRs including unified local construct handling by [Nicolás Ojeda Bär](https://github.com/nojb) ([#13839](https://github.com/ocaml/ocaml/issues/13839), [#14008](https://github.com/ocaml/ocaml/issues/14008), [#14009](https://github.com/ocaml/ocaml/issues/14009)) and environment refactoring by [Clément Blaudeau](https://github.com/clementblaudeau) ([#14000](https://github.com/ocaml/ocaml/issues/14000))\n- **CI infrastructure enhancements** with optional test matrix expansion by [David Allsopp](https://github.com/dra27) adding Cygwin, static, and minimal build testing ([#14013](https://github.com/ocaml/ocaml/issues/14013)) plus relocatable OCaml test harness ([#14014](https://github.com/ocaml/ocaml/issues/14014))\n- **Bug fixes and maintenance** including opam version fix by [Jan Midtgaard](https://github.com/jmid) ([#14011](https://github.com/ocaml/ocaml/issues/14011)), precondition comment updates ([#14012](https://github.com/ocaml/ocaml/issues/14012)), and stale bot configuration update by [Florian Angeletti](https://github.com/Octachron) ([#14004](https://github.com/ocaml/ocaml/issues/14004))\n- **Documentation improvements** including API anchors ([#14002](https://github.com/ocaml/ocaml/issues/14002)) and channel documentation refinements ([#13982](https://github.com/ocaml/ocaml/issues/13982))\n- **Open PRs addressing compilation issues** including string operation fixes by [Mark Shinwell](https://github.com/mshinwell) for ARM64 crashes ([#14010](https://github.com/ocaml/ocaml/issues/14010)) and Windows API primitives work by [Antonin Décimo](https://github.com/MisterDA) ([#13416](https://github.com/ocaml/ocaml/issues/13416))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on parser unification, CI robustness, and preparation for OCaml 5.5.0 release", "emerging_trends": "- **Release preparation** for OCaml 5.5.0 with version bumps and infrastructure improvements\n- **Parser modernization** through unification of local and global construct handling, making codebase more maintainable\n- **CI robustness improvements** with expanded test matrices and better platform coverage including Cygwin support\n- **Documentation quality focus** with enhanced API linking and clearer usage examples\n- **Low-level bug fixing** particularly targeting platform-specific issues and memory safety concerns", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Eight contributors active with parser work, CI improvements, bug fixes, and documentation updates", "contributors": "- [Nicolás Ojeda Bär](https://github.com/nojb) led parser modernization work implementing unified AST handling for local constructs ([#13839](https://github.com/ocaml/ocaml/issues/13839), [#14008](https://github.com/ocaml/ocaml/issues/14008), [#14009](https://github.com/ocaml/ocaml/issues/14009)) and added web manual anchors ([#14002](https://github.com/ocaml/ocaml/issues/14002))\n- [David Allsopp](https://github.com/dra27) enhanced CI infrastructure with optional test matrices ([#14013](https://github.com/ocaml/ocaml/issues/14013)) and comprehensive relocatable OCaml test harness ([#14014](https://github.com/ocaml/ocaml/issues/14014))\n- [Jan Midtgaard](https://github.com/jmid) contributed maintenance fixes including opam version correction ([#14011](https://github.com/ocaml/ocaml/issues/14011)) and code comment updates ([#14012](https://github.com/ocaml/ocaml/issues/14012))\n- [Clément Blaudeau](https://github.com/clementblaudeau) refactored environment handling for non-aliasable modules ([#14000](https://github.com/ocaml/ocaml/issues/14000)) and documented the `[@remove_aliases]` attribute ([#13975](https://github.com/ocaml/ocaml/issues/13975))\n- [Florian Angeletti](https://github.com/Octachron) updated stale bot configuration to only mark issues without auto-closing ([#14004](https://github.com/ocaml/ocaml/issues/14004))\n- [Mark Shinwell](https://github.com/mshinwell) opened important fix for string operation miscompilation affecting ARM64 platforms ([#14010](https://github.com/ocaml/ocaml/issues/14010))\n- [Gabriel Scherer](https://github.com/gasche) provided extensive reviews and feedback across multiple PRs and contributed to debugger improvements ([#13966](https://github.com/ocaml/ocaml/issues/13966))\n- [@MisterDA](https://github.com/MisterDA) continued work on Windows API primitives ([#13416](https://github.com/ocaml/ocaml/issues/13416)) and contributed CI improvements", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 17, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-04-21 to 2025-04-27", "start_commit": "abac665c8549bad37c10d33ffdf3c98e5d400c8b", "end_commit": "c681cd75440c3403ef442c6f9cf0c4c52d85af8a", "brief_summary": "Development branching week with internal refactoring, typing improvements, and recursive module bug fixes", "new_features_summary": "Improved type approximation for better error locations and recursive module typing fixes", "new_features": "- **Type approximation refactoring** improves error message locations and fixes recursive function typing with first-class modules by [Samuel Vivien](https://github.com/samsa1) ([c681cd7](https://github.com/ocaml/ocaml/commit/c681cd75440c3403ef442c6f9cf0c4c52d85af8a))\n- **Internal flag renaming** from `transparent_modules` to `no_alias_deps` for clarity by [Clément Blaudeau](https://github.com/clementblaudeau) in preparation for transparent ascription ([abac665](https://github.com/ocaml/ocaml/commit/abac665c8549bad37c10d33ffdf3c98e5d400c8b))\n- **Version bump** to 5.4.0+dev1 after development branch creation ([23852cc](https://github.com/ocaml/ocaml/commit/23852ccb806fbe72d8fe847ddff7a8c2add4421d))", "activity_summary": "Active week with new PRs for external types documentation, recursive function fixes, and executable header unification", "activity": "- **New PRs opened** include external types manual documentation by [Gabriel Scherer](https://github.com/gasche) ([#13994](https://github.com/ocaml/ocaml/issues/13994)), recursive function typing fixes by [Samuel Vivien](https://github.com/samsa1) ([#13984](https://github.com/ocaml/ocaml/issues/13984)), and executable header unification by [David Allsopp](https://github.com/dra27) ([#13988](https://github.com/ocaml/ocaml/issues/13988))\n- **Internal flag refactoring** completed with [Clément Blaudeau](https://github.com/clementblaudeau) merging the `no_alias_deps` rename ([#13972](https://github.com/ocaml/ocaml/issues/13972)) and [Kate](https://github.com/kit-ty-kate) adding `Option.blend` function ([#13995](https://github.com/ocaml/ocaml/issues/13995))\n- **Development milestone** reached with 5.4 branch creation, version updates, and README badge updates to reflect new development cycle", "discussions_summary": "Module system discussions on recursive modules, functor parameters, and signature validation", "notable_discussions": "- **Module system refinements** discussed in [#13985](https://github.com/ocaml/ocaml/issues/13985) where [Clément Blaudeau](https://github.com/clementblaudeau) identified recursive modules incorrectly stored as functor parameters in typing environment, with [Jacques Garrigue](https://github.com/garrigue) noting only error message needs fixing\n- **Manual improvements** proposed by [Nicholas Yang](https://github.com/NicholasLYang) in [#13992](https://github.com/ocaml/ocaml/issues/13992) to create dedicated warnings section, with [Gabriel Scherer](https://github.com/gasche) suggesting broader manual reorganization\n- **Build system issues** investigated by [Gabriel Scherer](https://github.com/gasche) in [#13993](https://github.com/ocaml/ocaml/issues/13993) revealing incremental rebuild failures after stdlib changes, with @lthls explaining dependency cycle challenges", "trends_summary": "Focus on type system improvements, module system refinements, and build infrastructure modernization", "emerging_trends": "- **Type system enhancements** continue with recursive function typing improvements and better error location reporting\n- **Module system evolution** progressing through transparent ascription preparation and functor parameter handling refinements\n- **Developer experience improvements** through better documentation organization, build system reliability, and clearer internal naming conventions\n- **Release cycle management** demonstrated with organized 5.4 branch creation and version management", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Seven contributors active with typing improvements, module system work, documentation, and build system fixes", "contributors": "- [Gabriel Scherer](https://github.com/gasche) opened manual documentation for external types ([#13994](https://github.com/ocaml/ocaml/issues/13994)), investigated build system issues ([#13993](https://github.com/ocaml/ocaml/issues/13993)), and participated in ocamldoc attribute parsing discussions ([#13990](https://github.com/ocaml/ocaml/issues/13990))\n- [Samuel Vivien](https://github.com/samsa1) contributed recursive function typing fixes ([#13984](https://github.com/ocaml/ocaml/issues/13984)) and worked on type approximation improvements with better error locations\n- [Clément Blaudeau](https://github.com/clementblaudeau) completed internal flag renaming ([#13972](https://github.com/ocaml/ocaml/issues/13972)), identified recursive module storage issues ([#13985](https://github.com/ocaml/ocaml/issues/13985)), and reported `[@remove_aliases]` attribute problems ([#13979](https://github.com/ocaml/ocaml/issues/13979))\n- [David Allsopp](https://github.com/dra27) opened executable header unification PR ([#13988](https://github.com/ocaml/ocaml/issues/13988)) to merge Unix and Windows implementations\n- [Kate](https://github.com/kit-ty-kate) added `Option.blend` function ([#13995](https://github.com/ocaml/ocaml/issues/13995)) and provided maintenance comments on stale issues\n- [Nicholas Yang](https://github.com/NicholasLYang) proposed manual warning section improvements ([#13992](https://github.com/ocaml/ocaml/issues/13992)) for better discoverability\n- [@lthls](https://github.com/lthls) analyzed incremental build issues and explained dependency cycle challenges in compiler-stdlib relationships", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 16, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-04-14 to 2025-04-20", "start_commit": "8c52855f31804a86384ba1ea8981b14b7a5f1c02", "end_commit": "e74c6cac3e1191ce2f0394ed3f3ffcc099d77f4c", "brief_summary": "Major GC improvements with new ramp-up API, enhanced signal handling functions, and bug fixes", "new_features_summary": "New Gc.ramp_up API for memory allocation phases, signal conversion functions, effect attribute support", "new_features": "- **New GC ramp-up API** `Gc.ramp_up` to mark memory consumption phases and avoid GC overwork during allocation-heavy periods, addressing performance regressions in OCaml 5 relative to OCaml 4 ([#13300](https://github.com/ocaml/ocaml/issues/13300), [#13861](https://github.com/ocaml/ocaml/issues/13861))\n- **Enhanced signal handling** with new `signal` type alias, `signal_to_string` for converting OCaml signals to POSIX names, `signal_of_int`/`signal_to_int` for platform conversion, and new signal definitions `sigio` and `sigwinch` ([#13843](https://github.com/ocaml/ocaml/issues/13843))\n- **Effect attribute support** by allowing `effect` as a valid attribute identifier, fixing syntax error regression in OCaml 5.3 ([#13957](https://github.com/ocaml/ocaml/issues/13957))\n- **C compilation fix** passing `-fPIC` flag when compiling C files with `ocamlopt`, addressing regression in OCaml 5.3 ([e74c6cac3e1191ce2f0394ed3f3ffcc099d77f4c](https://github.com/ocaml/ocaml/commit/e74c6cac3e1191ce2f0394ed3f3ffcc099d77f4c))\n- **Parser improvements** with better `loc_ghost` handling for `keyword%extension` syntax and nested recursive value definition bug fixes ([#13854](https://github.com/ocaml/ocaml/issues/13854), [#13931](https://github.com/ocaml/ocaml/issues/13931))\n- **Profiling documentation** added comprehensive guide for using Linux perf with frame pointers ([#13751](https://github.com/ocaml/ocaml/issues/13751))", "activity_summary": "Active development in typing system, debugger support, and tooling improvements with multiple ongoing PRs", "activity": "- **Typing system enhancements** include polymorphic parameter work by [Ulysse](https://github.com/voodoos) ([#13971](https://github.com/ocaml/ocaml/issues/13971)), occurrence check improvements for recursive types by [Samuel Vivien](https://github.com/samsa1) ([#13866](https://github.com/ocaml/ocaml/issues/13866)), and principality warning fixes ([#13973](https://github.com/ocaml/ocaml/issues/13973))\n- **Native debugger support** significantly expanded with multiple merged PRs by [Tim McGilchrist](https://github.com/tmcgilchrist) and [Sébastien Hinderer](https://github.com/shindere) covering GDB and LLDB integration ([#13199](https://github.com/ocaml/ocaml/issues/13199), [#13485](https://github.com/ocaml/ocaml/issues/13485), [#13665](https://github.com/ocaml/ocaml/issues/13665), [#13762](https://github.com/ocaml/ocaml/issues/13762), [#13965](https://github.com/ocaml/ocaml/issues/13965))\n- **Testing infrastructure** improvements with `ocamltest` color support by [Antonin Décimo](https://github.com/MisterDA) ([#13964](https://github.com/ocaml/ocaml/issues/13964)) and multicore test workflow fixes by [Jan Midtgaard](https://github.com/jmid) ([#13958](https://github.com/ocaml/ocaml/issues/13958))\n- **Module system work** ongoing with transparent modules flag renamed to `no_alias_deps` and module presence flag printing added to typedtree ([#13963](https://github.com/ocaml/ocaml/issues/13963))\n- **Build system** updates including GitHub Actions upgrades to macOS 15/Xcode 16.3 and configure hygiene check fixes ([#13935](https://github.com/ocaml/ocaml/issues/13935))", "discussions_summary": "Discussion about managing CR comments in codebase with tool for code review comment tracking", "notable_discussions": "- **Code review comment management** discussion by [Mathieu Barbin](https://github.com/mbarbin) about `crs` tool for managing embedded CR comments, revealing 10 outstanding CRs and 157 total review comments across the codebase ([#13960](https://github.com/ocaml/ocaml/discussions/13960))", "trends_summary": "Focus on performance optimization, developer tooling enhancement, and typing system robustness", "emerging_trends": "- **Performance-focused development** with GC improvements targeting OCaml 5 performance parity with OCaml 4, particularly for allocation-heavy workloads like Coq/Rocq\n- **Enhanced developer experience** through expanded debugger support, better testing infrastructure, and improved error reporting\n- **Typing system maturation** with ongoing work on polymorphic parameters, module transparency, and recursive type handling improvements\n- **Documentation and tooling** emphasis on better profiling guides, testing summaries, and code review workflow improvements", "issues_summary": "Two good first issues available: documentation improvement and domain backtrace inheritance behavior", "good_first_issues": "- **Documentation enhancement** for recommending `ocamlc` as C source compiler driver in \"Interfacing C with OCaml\" manual section, including proper switches and library usage ([#5733](https://github.com/ocaml/ocaml/issues/5733))\n- **Domain backtrace behavior** investigation for whether `Printexc.record_backtrace true` should be inherited by new domains, requiring documentation and implementation clarity ([#12363](https://github.com/ocaml/ocaml/issues/12363))", "contributors_summary": "Active contributions from core team and community across GC, signals, typing, and tooling improvements", "contributors": "- [Gabriel Scherer](https://github.com/gasche) implemented GC ramp-up functionality ([#13300](https://github.com/ocaml/ocaml/issues/13300), [#13861](https://github.com/ocaml/ocaml/issues/13861)), fixed nested recursive value definition bugs ([#13931](https://github.com/ocaml/ocaml/issues/13931)), and reviewed multiple PRs\n- [Tim McGilchrist](https://github.com/tmcgilchrist) contributed signal handling enhancements ([#13843](https://github.com/ocaml/ocaml/issues/13843)), profiling documentation ([#13751](https://github.com/ocaml/ocaml/issues/13751)), and extensive native debugger support work\n- [@314eter](https://github.com/314eter) fixed `effect` attribute support ([#13957](https://github.com/ocaml/ocaml/issues/13957)) addressing OCaml 5.3 syntax regression\n- [Jan Midtgaard](https://github.com/jmid) resolved multicore test workflow issues ([#13958](https://github.com/ocaml/ocaml/issues/13958)) and updated testing dependencies\n- [@voodoos](https://github.com/voodoos) worked on polymorphic parameter improvements ([#13971](https://github.com/ocaml/ocaml/issues/13971)) and typing system enhancements\n- [@samsa1](https://github.com/samsa1) improved occurrence checking for recursive types ([#13866](https://github.com/ocaml/ocaml/issues/13866)) and opened new typing system work\n- [@MisterDA](https://github.com/MisterDA) added color support to `ocamltest` ([#13964](https://github.com/ocaml/ocaml/issues/13964)) and contributed debugger improvements\n- [@v-gb](https://github.com/v-gb) enhanced parser `loc_ghost` handling ([#13854](https://github.com/ocaml/ocaml/issues/13854)) for better location tracking\n- [@clementblaudeau](https://github.com/clementblaudeau) reported module type subtyping crash ([#13976](https://github.com/ocaml/ocaml/issues/13976)) for transparent signature work\n- [@shindere](https://github.com/shindere) maintained ongoing test summary improvements ([#13557](https://github.com/ocaml/ocaml/pull/13557)) for better test diagnostics", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 15, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-04-07 to 2025-04-13", "start_commit": "fb3bac9f88a4eb7a48f347ca25005cc4e51828ea", "end_commit": "c7ad501d707aa2eeb4984fc165cb1eb3dba26eb4", "brief_summary": "Standard library improvements and runtime bug fixes including List.sort_uniq behavior change and lazy value compilation fixes", "new_features_summary": "List.sort_uniq now keeps first occurrences of duplicates, plus fixes for lazy values and unboxed types", "new_features": "- **List.sort_uniq behavior change** to keep first occurrences of duplicates instead of arbitrary ones, improving consistency with expectations ([b444a23](https://github.com/ocaml/ocaml/commit/b444a23ffd64f3ebab9f83d66d1252ca2184f143))\n- **Lazy value compilation fixes** for recursive values involving already-evaluated lazy values, preventing concurrency issues ([06e29c0](https://github.com/ocaml/ocaml/commit/06e29c039dceb172249e773534ed3123bfc53cca), [f3ead54](https://github.com/ocaml/ocaml/commit/f3ead54439c8043a95248ff1d09ff0c0cef6d648))\n- **Typeopt improvements** for handling deeply nested unboxed types that previously caused issues ([3717bf5](https://github.com/ocaml/ocaml/commit/3717bf5ff373fef98902c447808f586503a00a14))\n- **Runtime domain management** enhancements with better documentation and correctness checks for `caml_domain_alone()` ([44bd8e0](https://github.com/ocaml/ocaml/commit/44bd8e000f18ec0ddf8543c64c62ed3f61dc16c1))\n- **Debugger printer sharing** with toplevel through refactored Topprinters module ([985d3e5](https://github.com/ocaml/ocaml/commit/985d3e5ac08cefa8e9089d26dfa582f8da1a9b2d))", "activity_summary": "Two new issues opened covering spurious warnings and ocamltest environment handling plus ongoing work on major language features", "activity": "- **Spurious unused warnings** in OCaml 5.3 reported by [Ulysse](https://github.com/voodoos) affecting functor arguments in signatures ([#13955](https://github.com/ocaml/ocaml/issues/13955))\n- **OCamltest environment variable handling** issues reported by [Olivier Nicole](https://github.com/OlivierNicole) with complex behavior around variable scoping ([#13941](https://github.com/ocaml/ocaml/issues/13941))\n- **Modular explicits** implementation by [Samuel Vivien](https://github.com/samsa1) continues development with new syntax for module-dependent functions ([#13275](https://github.com/ocaml/ocaml/pull/13275))\n- **Type_external kind** feature by [Takafumi Saikawa](https://github.com/t6s) adds abstract types with names for FFI purposes (merged [#13712](https://github.com/ocaml/ocaml/pull/13712))\n- **Polymorphic parameters** extension by [Ulysse](https://github.com/voodoos) enabling function parameters with polymorphic types (merged [#13806](https://github.com/ocaml/ocaml/pull/13806))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on type system enhancements and module system improvements with better tooling integration", "emerging_trends": "- **Advanced type system features** gaining momentum with polymorphic parameters and modular explicits showing active development ([#13275](https://github.com/ocaml/ocaml/pull/13275), [#13806](https://github.com/ocaml/ocaml/pull/13806))\n- **Runtime correctness improvements** with increased attention to domain management and lazy value compilation edge cases ([#13952](https://github.com/ocaml/ocaml/issues/13952))\n- **Tool integration enhancements** through shared components between debugger and toplevel systems ([c7ad501](https://github.com/ocaml/ocaml/commit/c7ad501d707aa2eeb4984fc165cb1eb3dba26eb4))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Multiple core developers active with Gabriel Scherer leading runtime fixes and Olivier Nicole handling test infrastructure", "contributors": "- [Ulysse](https://github.com/voodoos) opened issue about spurious warnings in OCaml 5.3 ([#13955](https://github.com/ocaml/ocaml/issues/13955)) and continues work on polymorphic parameters feature ([#13806](https://github.com/ocaml/ocaml/pull/13806))\n- [Olivier Nicole](https://github.com/OlivierNicole) reported OCamltest environment variable issues ([#13941](https://github.com/ocaml/ocaml/issues/13941)) and fixed assertion on empty array case ([e9cf619](https://github.com/ocaml/ocaml/commit/e9cf6195015e6de0fcf18cb86e32f4b7e37f0f34))\n- [Samuel Vivien](https://github.com/samsa1) continues development on modular explicits implementation with reviewer feedback incorporation ([#13275](https://github.com/ocaml/ocaml/pull/13275))\n- [Takafumi Saikawa](https://github.com/t6s) contributed Type_external kind feature that was merged during this timeframe ([#13712](https://github.com/ocaml/ocaml/pull/13712))\n- Gabriel Scherer led multiple runtime improvements including lazy value fixes, domain management documentation, and Lambda refactoring ([06e29c0](https://github.com/ocaml/ocaml/commit/06e29c039dceb172249e773534ed3123bfc53cca))\n- Vincent Laviron contributed typeopt improvements for nested unboxed types and lazy value compilation fixes ([3717bf5](https://github.com/ocaml/ocaml/commit/3717bf5ff373fef98902c447808f586503a00a14))\n- Benoît Jubin implemented List.sort_uniq behavior change to keep first occurrences of duplicates ([b444a23](https://github.com/ocaml/ocaml/commit/b444a23ffd64f3ebab9f83d66d1252ca2184f143))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 14, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-03-31 to 2025-04-06", "start_commit": "60b30b936de1ce47ace2f3d50e91ca680a14dc58", "end_commit": "e0bd2767f9c52c93777b8084761cc675c6e40e9b", "brief_summary": "Major standard library enhancements with new Result and List/Seq functions, comprehensive Fun module documentation, and runtime improvements.", "new_features_summary": "Added Result.{get_ok',error_to_failure,product,Syntax}, List.singleton, Seq.singleton, comprehensive Fun module examples, floatarray performance improvements.", "new_features": "- **Result module enhancements** with new convenience functions `get_ok'` and `error_to_failure` for error handling, plus `Result.product` for combining results and `Result.Syntax` module with binding operators ([#13720](https://github.com/ocaml/ocaml/issues/13720), [#13696](https://github.com/ocaml/ocaml/issues/13696))\n- **List and Seq singleton functions** `List.singleton` and `Seq.singleton` for creating single-element collections ([#13932](https://github.com/ocaml/ocaml/issues/13932))\n- **Performance improvement** for `Floatarray.concat` with native C implementation `caml_floatarray_concat` matching Array.concat behavior ([#13362](https://github.com/ocaml/ocaml/issues/13362))\n- **Minor GC optimization** allowing values reachable from ephemeron keys to be collected by minor garbage collector ([#13643](https://github.com/ocaml/ocaml/issues/13643))\n- **Comprehensive Fun module documentation** with practical examples for all combinators including id, const, flip, negate, and compose functions ([#12452](https://github.com/ocaml/ocaml/issues/12452))\n- **Alert documentation improvements** in manual explaining how to apply alerts to structure/signature items including deprecated bindings ([#13924](https://github.com/ocaml/ocaml/issues/13924))\n- **Domain and Effect module headers** fixed @since 5.0 annotations that were lost due to alert/header ordering ([#13934](https://github.com/ocaml/ocaml/issues/13934))", "activity_summary": "Active PRs for flambda2 register allocation workaround and type unification improvements, plus ongoing discussions on Result API design and standard library evolution.", "activity": "- **New PRs opened** including flambda2 register allocation workaround by [Vincent Laviron](https://github.com/lthls) ([#13931](https://github.com/ocaml/ocaml/issues/13931)), `ccomptype` to `ccomp_type` rename by [Gabriel Scherer](https://github.com/gasche) ([#13927](https://github.com/ocaml/ocaml/issues/13927)), and build system improvements for Windows testing ([#13932](https://github.com/ocaml/ocaml/issues/13932))\n- **Standard library evolution** with [Daniel Bünzli](https://github.com/dbuenzli) contributing Result module enhancements ([#13720](https://github.com/ocaml/ocaml/issues/13720), [#13696](https://github.com/ocaml/ocaml/issues/13696)) and [David Allsopp](https://github.com/dra27) adding singleton functions ([#13932](https://github.com/ocaml/ocaml/issues/13932))\n- **Documentation improvements** with [Haz](https://github.com/hyphenrf) providing comprehensive Fun module examples ([#12452](https://github.com/ocaml/ocaml/issues/12452)) and [@v-gb](https://github.com/v-gb) enhancing alert documentation ([#13924](https://github.com/ocaml/ocaml/issues/13924))\n- **Runtime optimizations** including [Stephen Dolan](https://github.com/stedolan)'s ephemeron minor GC improvements ([#13643](https://github.com/ocaml/ocaml/issues/13643)) and [Gabriel Scherer](https://github.com/gasche)'s floatarray concatenation rewrite ([#13362](https://github.com/ocaml/ocaml/issues/13362))\n- **Build system maintenance** with [David Allsopp](https://github.com/dra27) resolving Windows test issues and typo checking improvements ([#13815](https://github.com/ocaml/ocaml/issues/13815))", "discussions_summary": "Constructive discussions on API design consistency, Result module functionality expansion, and build system reliability improvements.", "notable_discussions": "- **Result API design** discussions around the naming and functionality of new convenience functions like `get_ok'` vs alternatives, with community feedback on ergonomics and consistency ([#13720](https://github.com/ocaml/ocaml/issues/13720))\n- **Standard library consistency** conversations about singleton function additions and their placement in List vs Seq modules, ensuring coherent API design ([#13932](https://github.com/ocaml/ocaml/issues/13932))\n- **Documentation quality** feedback on Fun module examples with suggestions for more practical real-world usage patterns and clarity improvements ([#12452](https://github.com/ocaml/ocaml/issues/12452))\n- **Performance optimization** discussions on floatarray implementation details and the benefits of C-level concatenation vs OCaml implementations ([#13362](https://github.com/ocaml/ocaml/issues/13362))", "trends_summary": "Focus on standard library usability improvements, comprehensive documentation, runtime performance, and consistent API design patterns.", "emerging_trends": "- **Standard library ergonomics** emphasis with multiple contributors adding convenience functions and improving API consistency across modules like Result, List, and Seq\n- **Documentation-first approach** with comprehensive example additions to Fun module showing real-world usage patterns rather than just API descriptions\n- **Runtime performance focus** including garbage collection optimizations and native C implementations for performance-critical operations\n- **Windows platform support** improvements with build system enhancements and test hardening for cross-platform compatibility\n- **API design discussions** showing community engagement in thoughtful design decisions around naming conventions and functionality placement", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Gabriel Scherer, Daniel Bünzli, David Allsopp, Stephen Dolan, and Haz led major contributions across standard library, runtime, and documentation improvements.", "contributors": "- [Gabriel Scherer](https://github.com/gasche) implemented floatarray performance improvements ([#13362](https://github.com/ocaml/ocaml/issues/13362)), worked on build system fixes ([#13815](https://github.com/ocaml/ocaml/issues/13815)), and contributed to multiple code reviews across runtime and standard library changes\n- [Daniel Bünzli](https://github.com/dbuenzli) authored Result module enhancements adding `get_ok'`, `error_to_failure` ([#13720](https://github.com/ocaml/ocaml/issues/13720)), `product` function and Syntax module ([#13696](https://github.com/ocaml/ocaml/issues/13696)) with extensive API design discussions\n- [David Allsopp](https://github.com/dra27) added List and Seq singleton functions ([#13932](https://github.com/ocaml/ocaml/issues/13932)), provided Windows build system improvements, and contributed reviews on cross-platform compatibility\n- [Stephen Dolan](https://github.com/stedolan) implemented minor GC optimizations for ephemeron key collection ([#13643](https://github.com/ocaml/ocaml/issues/13643)) improving runtime performance\n- [Haz](https://github.com/hyphenrf) authored comprehensive Fun module documentation with practical examples ([#12452](https://github.com/ocaml/ocaml/issues/12452)) covering all combinator functions with real-world usage patterns\n- [@v-gb](https://github.com/v-gb) enhanced manual documentation for alerts explaining how to apply deprecated annotations to various language constructs ([#13924](https://github.com/ocaml/ocaml/issues/13924))\n- [@lthls](https://github.com/lthls) opened PR for flambda2 register allocation workaround addressing compiler optimization issues ([#13931](https://github.com/ocaml/ocaml/issues/13931))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 13, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-03-24 to 2025-03-30", "start_commit": "f26e623319eb1548d7e62003a5af71c2fcd668cf", "end_commit": "2d3138a5d04affc175a8a0a8ac0cbd1502a5e32c", "brief_summary": "New PR opened for signature constraint refactoring while several PRs merged covering array documentation and build system improvements", "new_features_summary": "Array.compare documentation clarified to specify shortlex ordering behavior, Fibonacci examples corrected in manual", "new_features": "- **Array comparison documentation** clarified to specify shortlex ordering behavior in `Array.compare`, `ArrayLabels.compare`, `Dynarray.compare`, and `Float.Array.compare` functions ([#13908](https://github.com/ocaml/ocaml/issues/13908))\n- **Manual improvements** with corrected Fibonacci number definition in parallelism tutorial examples ([#13912](https://github.com/ocaml/ocaml/issues/13912))\n- **Build reproducibility** enhancement with `BUILD_PATH_PREFIX_MAP` applied to `Sys.argv.(0)` in cmt files ([#13828](https://github.com/ocaml/ocaml/issues/13828))\n- **C++ compatibility** improvements in runtime headers by fixing `_Atomic` incompatibility issues ([#13895](https://github.com/ocaml/ocaml/issues/13895))\n- **Test infrastructure** improvements with proper multicore requirement marking for parallel tests ([#13906](https://github.com/ocaml/ocaml/issues/13906))\n- **Closure compiler** enhancements enforcing evaluation order for generic applications ([#13882](https://github.com/ocaml/ocaml/issues/13882))\n- **Shape indexing** improvements for modules in constructor paths with corrected approximation ([#13884](https://github.com/ocaml/ocaml/issues/13884))\n- **Type checker** regression fix for unused-type-declaration warning ([#13904](https://github.com/ocaml/ocaml/issues/13904))\n- **Manual formatting** correction removing quotes around `\\var{...}` in interface documentation ([#13910](https://github.com/ocaml/ocaml/issues/13910))\n- **GitHub Actions** improvements for Cygwin builds with proper configuration handling ([#13857](https://github.com/ocaml/ocaml/issues/13857))", "activity_summary": "One new PR opened for signature constraint refactoring while several established PRs continue development on type system improvements", "activity": "- **New PR opened** this week for signature constraint refactoring by [Clément Blaudeau](https://github.com/clementblaudeau) ([#13911](https://github.com/ocaml/ocaml/issues/13911)), which proposes refactoring the merge_constraint function handling module type constraints with better organization and documentation\n- **Ongoing major development** continues on keep expansion improvements by [Jacques Garrigue](https://github.com/garrigue) ([#11648](https://github.com/ocaml/ocaml/issues/11648)), addressing long-standing typechecker issues including non-termination and principality tracking problems\n- **Runtime system improvements** being developed by [Gabriel Scherer](https://github.com/gasche) for distinguishing blocking and non-blocking mutexes to prevent deadlock situations ([#13716](https://github.com/ocaml/ocaml/issues/13716))\n- **Polymorphic parameters feature** by [Ulysse](https://github.com/voodoos) allowing function parameters with polymorphic types has been successfully merged ([#13806](https://github.com/ocaml/ocaml/issues/13806))", "discussions_summary": "Newcomers seeking contribution guidance and discussions about improving OCaml syntax error messages", "notable_discussions": "- **Newcomer contribution guidance** discussion by [@gperdutoutmoncodetipe](https://github.com/gperdutoutmoncodetipe) seeking approachable issues for open source beginners ([#13901](https://github.com/ocaml/ocaml/discussions/13901))\n- **Syntax error improvements** discussion by [Demi Marie Obenour](https://github.com/DemiMarie) proposing adding a `.messages` file for Menhir to provide better syntax error messages ([#11957](https://github.com/ocaml/ocaml/discussions/11957))", "trends_summary": "Focus on documentation accuracy, build system robustness, and infrastructure improvements for multicore OCaml", "emerging_trends": "- **Documentation accuracy** emphasis with multiple improvements to manual examples and API documentation clarity\n- **Build system robustness** enhancements targeting cross-platform compatibility and reproducible builds\n- **Test infrastructure** modernization with proper multicore test categorization and CI improvements\n- **Runtime system refinement** addressing subtle concurrency issues and mutex handling for multicore stability", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Week featured contributions from established OCaml developers focusing on documentation, build systems, and type system improvements", "contributors": "- [John Whitington](https://github.com/johnwhitington) reported OCamldoc rendering regression in OCaml 5 compared to OCaml 4 with detailed examples and investigation ([#13896](https://github.com/ocaml/ocaml/issues/13896))\n- [Xavier Leroy](https://github.com/xavierleroy) initiated discussion about improving PDF manual typography with font samples and gathering community feedback ([#13871](https://github.com/ocaml/ocaml/issues/13871))\n- [Jan Midtgaard](https://github.com/jmid) provided updates on parallel Dynlink usage safety issues under Cygwin+MinGW platforms ([#13046](https://github.com/ocaml/ocaml/issues/13046))\n- [Clément Blaudeau](https://github.com/clementblaudeau) opened new PR for refactoring signature constraint handling with comprehensive documentation ([#13911](https://github.com/ocaml/ocaml/issues/13911))\n- [Jacques Garrigue](https://github.com/garrigue) continues extensive work on type expansion improvements addressing fundamental typechecker issues ([#11648](https://github.com/ocaml/ocaml/issues/11648))\n- [Gabriel Scherer](https://github.com/gasche) develops runtime mutex system improvements for preventing deadlock situations in multicore environments ([#13716](https://github.com/ocaml/ocaml/issues/13716))\n- [Ulysse](https://github.com/voodoos) successfully completed polymorphic parameters feature implementation enabling function parameters with polymorphic types ([#13806](https://github.com/ocaml/ocaml/issues/13806))\n- [@gperdutoutmoncodetipe](https://github.com/gperdutoutmoncodetipe) participated in newcomer discussion seeking guidance for open source contributions ([#13901](https://github.com/ocaml/ocaml/discussions/13901))\n- [Demi Marie Obenour](https://github.com/DemiMarie) continued advocating for improved syntax error messages through Menhir integration ([#11957](https://github.com/ocaml/ocaml/discussions/11957))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 12, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-03-17 to 2025-03-23", "start_commit": "8800b88aeba35775f0dda6e4a2e9336710e534db", "end_commit": "97b72fbc9846e6e27f89aa1bef5a871b413932b6", "brief_summary": "Standard library additions, lazy block optimizations, code generation improvements, and documentation updates merged", "new_features_summary": "New Dynarray functions, dedicated lazy primitives, OCamldoc underscore escaping option, and CMM mutable variable tracking", "new_features": "- New **Dynarray.exists2** and **Dynarray.for_all2** functions for two-argument predicates by [@hirrolot](https://github.com/hirrolot) ([#13885](https://github.com/ocaml/ocaml/issues/13885))\n- Dedicated **primitive for Lazy blocks** improving runtime performance by using specialized Lazy_tag and Forward_tag ([#13867](https://github.com/ocaml/ocaml/issues/13867))\n- **OCamldoc LaTeX underscore escaping option** `-latex-escape-underscore` for better reference formatting ([5a4813dcaab1e8ab97dc50dbc426cecf5c664236](https://github.com/ocaml/ocaml/commit/5a4813dcaab1e8ab97dc50dbc426cecf5c664236))\n- **CMM mutable variable tracking** with new Cvar_mut construct for improved code generation by [Vincent Laviron](https://github.com/lthls) ([#13878](https://github.com/ocaml/ocaml/issues/13878))\n- **Object stat counters made atomic** for better thread safety ([#13880](https://github.com/ocaml/ocaml/issues/13880))\n- **Error message improvements** with specialized messages for non-functors ([#13865](https://github.com/ocaml/ocaml/issues/13865))\n- **Float.Array.fill optimization** for better performance by [Gabriel Scherer](https://github.com/gasche) ([#13864](https://github.com/ocaml/ocaml/issues/13864))", "activity_summary": "Package type refactoring merged after extensive development by Samuel Vivien, relocatable OCaml PRs opened by David Allsopp", "activity": "- **Package type refactoring** completed by [Samuel Vivien](https://github.com/samsa1) with comprehensive changes storing Tpackage content in records for better type system consistency ([#13856](https://github.com/ocaml/ocaml/issues/13856))\n- **Major relocatable OCaml implementation** opened by [David Allsopp](https://github.com/dra27) with `--with-relative-libdir` configuration option enabling portable compiler installations ([#14244](https://github.com/ocaml/ocaml/issues/14244), [#14247](https://github.com/ocaml/ocaml/issues/14247))\n- **Error message system improvements** merged converting hints to submessages for better user experience ([#13838](https://github.com/ocaml/ocaml/issues/13838))\n- **Unix testing infrastructure** enhanced with new Windows ocamltest actions and cloexec test fixes by [David Allsopp](https://github.com/dra27) ([#13879](https://github.com/ocaml/ocaml/issues/13879))\n- **Type variance printing** improvements merged for better compiler output ([#13820](https://github.com/ocaml/ocaml/issues/13820))\n- **Shape printer refactoring** completed reducing whitespace and improving formatting ([#13863](https://github.com/ocaml/ocaml/issues/13863))\n- **Documentation updates** for integer operations and stdlib module checking ([#13852](https://github.com/ocaml/ocaml/issues/13852), [#13877](https://github.com/ocaml/ocaml/issues/13877))", "discussions_summary": "GC behavior discussion on OCaml 5 performance and PDF manual typography considerations", "notable_discussions": "- **OCaml 5 GC performance** report by [Nat Mote](https://github.com/nmote) documenting tuning requirements for Semgrep achieving parity with OCaml 4, requiring space_overhead=40 setting ([#13868](https://github.com/ocaml/ocaml/issues/13868))\n- **PDF manual typography** improvements proposed by [Xavier Leroy](https://github.com/xavierleroy) with sample fonts including Palladio, Schoolbook, and Utopia for better document appearance ([#13871](https://github.com/ocaml/ocaml/issues/13871))", "trends_summary": "Focus on runtime performance optimizations, type system consistency improvements, and developer experience enhancements", "emerging_trends": "- **Runtime performance focus** with lazy block optimizations, atomic object counters, and Float.Array.fill improvements targeting execution efficiency\n- **Type system modernization** through package type refactoring and improved error messages with specialized non-functor handling\n- **Developer tooling enhancements** including OCamldoc LaTeX options, shape printer improvements, and comprehensive testing infrastructure updates\n- **Compiler portability** advancement with relocatable OCaml implementation enabling distribution-independent compiler installations", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active contributions from core team members including package system work, lazy optimization, and relocatable compiler development", "contributors": "- [Samuel Vivien](https://github.com/samsa1) completed **package type refactoring** with extensive changes to Types.package representation and related type system components ([#13856](https://github.com/ocaml/ocaml/issues/13856))\n- [@hirrolot](https://github.com/hirrolot) implemented **Dynarray.exists2 and for_all2** functions and fixed author name attribution ([#13885](https://github.com/ocaml/ocaml/issues/13885), [#13887](https://github.com/ocaml/ocaml/issues/13887))\n- [David Allsopp](https://github.com/dra27) opened **relocatable OCaml** implementation with comprehensive changes to compiler installation and runtime behavior ([#14244](https://github.com/ocaml/ocaml/issues/14244), [#14247](https://github.com/ocaml/ocaml/issues/14247)) and enhanced **Unix testing** infrastructure ([#13879](https://github.com/ocaml/ocaml/issues/13879))\n- [Vincent Laviron](https://github.com/lthls) implemented **CMM mutable variable tracking** improving code generation reliability ([#13878](https://github.com/ocaml/ocaml/issues/13878))\n- [Gabriel Scherer](https://github.com/gasche) optimized **Float.Array.fill** performance ([#13864](https://github.com/ocaml/ocaml/issues/13864))\n- [Xavier Leroy](https://github.com/xavierleroy) initiated **PDF manual typography** discussion with font samples ([#13871](https://github.com/ocaml/ocaml/issues/13871))\n- [@nmote](https://github.com/nmote) reported detailed **OCaml 5 GC performance** analysis with Semgrep benchmarks ([#13868](https://github.com/ocaml/ocaml/issues/13868))\n- Multiple contributors merged **error message improvements**, **documentation updates**, and **type system enhancements** across various PRs", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 11, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-03-10 to 2025-03-16", "start_commit": "657a50ff726f8958ccda79a4ef2ed6a476228f97", "end_commit": "314018bba1c34688c650d26f5778a445ea04cdd8", "brief_summary": "New variance debugging features merged alongside performance regression reports for OCaml 5", "new_features_summary": "New `-i-variance` command-line flag and bivariance syntax support for type variance debugging", "new_features": "- New **`-i-variance` command-line flag** allows developers to print inferred variances for all types in their programs, useful for debugging and learning about type variance ([#13820](https://github.com/ocaml/ocaml/issues/13820))\n- **Bivariance syntax support** with new `+-` notation for bivariant type parameters (e.g., `type +-'a t = A`), including parser and pretty-printer updates ([#13820](https://github.com/ocaml/ocaml/issues/13820))\n- **Enhanced shape indexing** for all path components improving editor support and IDE integration ([#13848](https://github.com/ocaml/ocaml/issues/13848))\n- **Float.Array performance optimizations** with `@@noalloc` and `@inline` attributes added to `Float.Array.fill` for better unboxing opportunities ([657a50f](https://github.com/ocaml/ocaml/commit/657a50ff726f8958ccda79a4ef2ed6a476228f97), [b5f2f49](https://github.com/ocaml/ocaml/commit/b5f2f49b6437b663e28c3a36303cd9b7b0a1b3b5))", "activity_summary": "Performance regression discussions dominated activity with detailed reports from Semgrep and EasyCrypt teams", "activity": "- **GC performance investigations** initiated by [Nat Mote](https://github.com/nmote) from Semgrep reporting poor garbage collection behavior on OCaml 5, requiring `space_overhead` tuning to achieve OCaml 4 parity ([#13868](https://github.com/ocaml/ocaml/issues/13868))\n- **EasyCrypt performance regression** reported by [Pierre-Yves Strub](https://github.com/strub) showing extreme slowdowns from OCaml 4 to OCaml 5, with compilation times increasing from minutes to hours ([#13849](https://github.com/ocaml/ocaml/issues/13849))\n- **Variance feature development** completed by [Takafumi Saikawa](https://github.com/t6s) and [Jacques Garrigue](https://github.com/garrigue) with comprehensive variance debugging tools merged after extensive review process ([#13820](https://github.com/ocaml/ocaml/issues/13820))\n- **Standard library enhancements** delivered including new `Repr` module and `Float.Array.{equal,compare}` functions expanding the stdlib API ([#13755](https://github.com/ocaml/ocaml/issues/13755), [#13836](https://github.com/ocaml/ocaml/issues/13836))", "discussions_summary": "PDF manual typography improvements discussed with font comparison samples", "notable_discussions": "- **PDF manual typography enhancement** discussion initiated by [Xavier Leroy](https://github.com/xavierleroy) presenting three font options (Palladio, Schoolbook, Utopia) for improving the manual's visual appeal, with [Kate](https://github.com/kit-ty-kate) providing readability feedback favoring Schoolbook ([#13871](https://github.com/ocaml/ocaml/issues/13871))", "trends_summary": "Performance regression reports highlight ongoing OCaml 5 runtime tuning challenges", "emerging_trends": "- **OCaml 5 performance tuning** emerging as a key concern with multiple real-world applications reporting significant regressions requiring manual GC configuration adjustments ([#13868](https://github.com/ocaml/ocaml/issues/13868), [#13849](https://github.com/ocaml/ocaml/issues/13849))\n- **Developer tooling improvements** focus on variance debugging and IDE support with new command-line options and enhanced shape indexing ([#13820](https://github.com/ocaml/ocaml/issues/13820), [#13848](https://github.com/ocaml/ocaml/issues/13848))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Multiple contributors advanced variance tooling and reported performance issues", "contributors": "- [Takafumi Saikawa](https://github.com/t6s) implemented the variance debugging feature with `-i-variance` flag and bivariance syntax support, collaborating with [Jacques Garrigue](https://github.com/garrigue) on the comprehensive type variance tooling ([#13820](https://github.com/ocaml/ocaml/issues/13820))\n- [Nat Mote](https://github.com/nmote) provided detailed performance analysis and reproduction steps for GC behavior issues affecting Semgrep's migration to OCaml 5 ([#13868](https://github.com/ocaml/ocaml/issues/13868))\n- [Pierre-Yves Strub](https://github.com/strub) reported performance regression affecting EasyCrypt compilation times with specific examples of degraded performance ([#13849](https://github.com/ocaml/ocaml/issues/13849))\n- [Xavier Leroy](https://github.com/xavierleroy) initiated PDF manual typography improvement discussions with font samples and design considerations ([#13871](https://github.com/ocaml/ocaml/issues/13871))\n- [Kate](https://github.com/kit-ty-kate) contributed readability feedback on PDF manual font options and participated in standard library enhancements ([#13871](https://github.com/ocaml/ocaml/issues/13871))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 10, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-03-03 to 2025-03-09", "start_commit": "40ae152f9a144711d439ac2d105d39a729a45e9f", "end_commit": "addec6564b1246b9d03ac33fd866aeacda5837d8", "brief_summary": "Runtime safety improvements and bug fixes with enhanced error reporting utilities", "new_features_summary": "Root safety in caml_register_named_value, improved error alignment utilities, and iarray dune support", "new_features": "- **Root safety** improvements in `caml_register_named_value` runtime function to prevent potential memory corruption issues ([addec6564b1246b9d03ac33fd866aeacda5837d8](https://github.com/ocaml/ocaml/commit/addec6564b1246b9d03ac33fd866aeacda5837d8))\n- Enhanced **error message alignment** utilities with improved documentation and examples for better compiler error formatting ([40ae152f9a144711d439ac2d105d39a729a45e9f](https://github.com/ocaml/ocaml/commit/40ae152f9a144711d439ac2d105d39a729a45e9f))\n- Fixed **untypeast/pprintast** bug for value bindings with polymorphic type annotations improving AST printing accuracy ([5a4e4bb99bf4622120be76b52acc56d19b542c85](https://github.com/ocaml/ocaml/commit/5a4e4bb99bf4622120be76b52acc56d19b542c85), [e4e6980a3edae9d6a7be5b8337f12266f04095dd](https://github.com/ocaml/ocaml/commit/e4e6980a3edae9d6a7be5b8337f12266f04095dd))\n- Added **dune support placeholder** for iarray type with new predef types file supporting future immutable array functionality ([41ace2f0cf3a0509a026db3ab79bf6b2da630837](https://github.com/ocaml/ocaml/commit/41ace2f0cf3a0509a026db3ab79bf6b2da630837))\n- **Location documentation** clarifications for ghost locations in the compiler's location tracking system ([22f4766026883b0f703c857b4dc89c6c81958591](https://github.com/ocaml/ocaml/commit/22f4766026883b0f703c857b4dc89c6c81958591))\n- Manual improvements including **C macro documentation** and integer handling clarifications ([b62ae360775e58128b785c729f2530822d733376](https://github.com/ocaml/ocaml/commit/b62ae360775e58128b785c729f2530822d733376), [7d897be326657de6a49bf5b5e37e956d5c1523dd](https://github.com/ocaml/ocaml/commit/7d897be326657de6a49bf5b5e37e956d5c1523dd))", "activity_summary": "Focused on runtime safety improvements and compiler tooling enhancements", "activity": "- **Runtime safety** work completed with root safety improvements in `caml_register_named_value` ensuring proper garbage collection behavior in C bindings ([#13855](https://github.com/ocaml/ocaml/issues/13855))\n- **Compiler tooling** enhancements including bug fixes for AST printing with polymorphic type annotations ([#13845](https://github.com/ocaml/ocaml/issues/13845)) and improved error message alignment utilities\n- **Build system** improvements with iarray dune support placeholder and enhanced CI workflows for better cross-platform testing\n- **Performance debugging** discussion around OCaml 5 performance regression in EasyCrypt project with detailed analysis of weak table behavior ([#13849](https://github.com/ocaml/ocaml/issues/13849))\n- **ThreadSanitizer** testing improvements addressing flaky test issues on different platforms ([#13831](https://github.com/ocaml/ocaml/issues/13831))", "discussions_summary": "Major performance regression analysis for OCaml 5 and ThreadSanitizer test reliability issues", "notable_discussions": "- **OCaml 5 performance regression** investigation in EasyCrypt project revealing hash collision issues in weak tables where unused weak values don't get cleaned properly, leading to linear complexity instead of constant time ([#13849](https://github.com/ocaml/ocaml/issues/13849)) with detailed benchmarking showing 8-minute vs exponential slowdown between OCaml 4.14 and 5.3.0\n- **ThreadSanitizer test reliability** discussion addressing non-deterministic error output ordering between OCaml stack traces and TSan race reports affecting test consistency across Linux and macOS platforms ([#13831](https://github.com/ocaml/ocaml/issues/13831))\n- **Signal support** feature request for missing signals like SIGWINCH in the standard library enum with reference to ongoing work ([#13825](https://github.com/ocaml/ocaml/issues/13825))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Runtime safety work by Nick Barnes, AST printing fixes by Chris Casinghino, and various maintainer contributions", "contributors": "- [Olivier Nicole](https://github.com/OlivierNicole) reported ThreadSanitizer test flakiness issues and provided detailed analysis of non-deterministic output ordering ([#13831](https://github.com/ocaml/ocaml/issues/13831))\n- [Pierre-Yves Strub](https://github.com/strub) reported and investigated OCaml 5 performance regression in EasyCrypt, providing comprehensive benchmarking data and testing multiple compiler versions ([#13849](https://github.com/ocaml/ocaml/issues/13849))\n- [Zachary Vance](https://github.com/za3k) requested missing signal support in the standard library ([#13825](https://github.com/ocaml/ocaml/issues/13825))\n- [Takafumi Saikawa](https://github.com/t6s) contributed the `-print-variance` feature with bivariant type parameter support that merged during this period ([#13820](https://github.com/ocaml/ocaml/issues/13820))\n- [@NickBarnes](https://github.com/NickBarnes) implemented root safety improvements in `caml_register_named_value` runtime function\n- [@ccasin](https://github.com/ccasin) fixed untypeast/pprintast bugs for value bindings with polymorphic type annotations\n- [@Octachron](https://github.com/Octachron) contributed error message alignment utilities and iarray dune support\n- [@gasche](https://github.com/gasche) provided documentation improvements for location ghost handling and participated in performance regression analysis", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 9, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-02-24 to 2025-03-02", "start_commit": "759582d7da9a99cea90b1f5b3bd711904d1361c5", "end_commit": "6d4a103acbdf466a7cdf180ec69fc013bb7bdb23", "brief_summary": "Runtime system improvements, error message enhancements, and compiler tooling additions with one new PR and discussions on signal handling", "new_features_summary": "Runtime events bug fix, thread warning improvements, GC optimization, type checking warnings, and aligned error formatting", "new_features": "- **Runtime events system** field initialization bug fixed preventing potential crashes ([759582d](https://github.com/ocaml/ocaml/commit/759582d7da9a99cea90b1f5b3bd711904d1361c5))\n- **Thread naming warnings** now printed when `set_current_thread_name` operation fails ([759582d](https://github.com/ocaml/ocaml/commit/759582d7da9a99cea90b1f5b3bd711904d1361c5))\n- **Ephemeron garbage collection** optimization avoids re-marking ephemerons with trivial data for improved performance ([d608d2b](https://github.com/ocaml/ocaml/commit/d608d2be2b9232bd4abbdd6c958189ac379f0eb1))\n- **Unused type declaration warning** added for `t as 'a` patterns with no other occurrences of the type variable ([f08e8a1](https://github.com/ocaml/ocaml/commit/f08e8a1ad48013dbdefc0e5415c2bf48a6881de8))\n- **Aligned spellchecking hints** in error messages improve readability by aligning hints with misspelled identifiers ([multiple commits](https://github.com/ocaml/ocaml/commit/fc7322768ac84f69dd08453c19c11444d4b26479))\n- **Format documentation API** additions include `align_prefix` and `align_prefix2` functions for text alignment ([f47a358](https://github.com/ocaml/ocaml/commit/f47a3584909081e5ed0b6166fb75cf0fdb68ef8d))", "activity_summary": "One new draft PR on C primitive hardening opened, plus one variance printing PR merged from earlier work", "activity": "- **C primitive type hardening** draft PR opened by [Antonin Décimo](https://github.com/MisterDA) to silence `-Wcast-function-type` warnings in GCC and clang ([#13841](https://github.com/ocaml/ocaml/issues/13841))\n- **Variance printing support** merged with new `-print-variance` command-line option and `Asttypes.Bivariant` by [Takafumi Saikawa](https://github.com/t6s) ([#13820](https://github.com/ocaml/ocaml/issues/13820))\n- **Native debugger testing** improvements skip tests when ThreadSanitizer is enabled to avoid conflicts ([bf28aea](https://github.com/ocaml/ocaml/commit/bf28aea732543de4534b81c75a16ddc9b91ae5a6))", "discussions_summary": "ThreadSanitizer test flakiness and comprehensive signal handling improvements discussed", "notable_discussions": "- **ThreadSanitizer test reliability** discussed by [Olivier Nicole](https://github.com/OlivierNicole) regarding non-deterministic error output order between OCaml stack traces and TSan reports ([#13831](https://github.com/ocaml/ocaml/issues/13831))\n- **Signal handling enhancements** extensively discussed by [Zachary Vance](https://github.com/za3k) and [Tim McGilchrist](https://github.com/tmcgilchrist) covering missing POSIX signals like `SIGWINCH`, platform compatibility, and potential API improvements ([#13825](https://github.com/ocaml/ocaml/issues/13825))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Multiple contributors delivered runtime system improvements, compiler enhancements, and participated in design discussions", "contributors": "- [Antonin Décimo](https://github.com/MisterDA) opened draft PR for C primitive type hardening to address compiler warnings ([#13841](https://github.com/ocaml/ocaml/issues/13841))\n- [Takafumi Saikawa](https://github.com/t6s) delivered variance printing functionality with command-line option support ([#13820](https://github.com/ocaml/ocaml/issues/13820))\n- [Olivier Nicole](https://github.com/OlivierNicole) reported and analyzed ThreadSanitizer test flakiness issues ([#13831](https://github.com/ocaml/ocaml/issues/13831))\n- [Zachary Vance](https://github.com/za3k) initiated comprehensive discussion on missing signal support in stdlib ([#13825](https://github.com/ocaml/ocaml/issues/13825))\n- [Tim McGilchrist](https://github.com/tmcgilchrist) provided detailed analysis of POSIX signal compatibility and implementation suggestions ([#13825](https://github.com/ocaml/ocaml/issues/13825))\n- [Gabriel Scherer](https://github.com/gasche) contributed to error message formatting improvements and reviewed variance printing work ([multiple commits](https://github.com/ocaml/ocaml/commit/fc7322768ac84f69dd08453c19c11444d4b26479))\n- [Jan Midtgaard](https://github.com/jmid) previously reported parallel GC issues with compaction that were referenced this week ([#13739](https://github.com/ocaml/ocaml/issues/13739))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 8, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-02-17 to 2025-02-23", "start_commit": "ab9762256a8ffac7b93d83af7c2a6227b5653bc8", "end_commit": "3ca06d6e669aed7ca457d20f10fca133a38dc381", "brief_summary": "Active week with new stdlib features, ARM64 improvements, and ongoing language feature development", "new_features_summary": "Format.format_text function, Runtime_events timestamp access, ARM64 unaligned memory access, Windows CSPRNG seeding", "new_features": "- **Format.format_text function** added to stdlib for text formatting with automatic break hints [3ca06d6e](https://github.com/ocaml/ocaml/commit/3ca06d6e669aed7ca457d20f10fca133a38dc381)\n- **Runtime_events.Timestamp.get_current** function for accessing current timestamps [41d0c600](https://github.com/ocaml/ocaml/commit/41d0c6009b27935109345f4491aae514f624bb3f)\n- **ARM64 unaligned memory access** support enabled by setting allow_unaligned_access to true [7ed394b8](https://github.com/ocaml/ocaml/commit/7ed394b8dc3f1befdc4883f88e2ae311567409ae)\n- **Windows CSPRNG random seeding** using OS cryptographically secure random number generator [3ca06d6e](https://github.com/ocaml/ocaml/commit/3ca06d6e669aed7ca457d20f10fca133a38dc381)\n- **Enhanced spellchecker hints** that preserve module context (\"Fun.protact\" suggests \"Fun.protect\" instead of just \"protect\") [22ab57de](https://github.com/ocaml/ocaml/commit/22ab57de9c1ce8e4e313fa26b46bf90d2f549167)\n- **Improved module type constraints** with distinction between `(module M : S)` and `(module M) : (module S)` syntax [c8f31846](https://github.com/ocaml/ocaml/commit/c8f318463f7127f1463fe446916a4b89e99267ab)\n- **Build system improvements** including cross-compiler simplification and autotools updates [dd47dcfa](https://github.com/ocaml/ocaml/commit/dd47dcfa112ad3feec66c0cc4287f141df379555)", "activity_summary": "Two new PRs opened this week alongside merged PRs for type system enhancements and continued work on modular explicits", "activity": "- **Two new PRs opened** this week: [Polymorphic Parameters](https://github.com/ocaml/ocaml/pull/13806) by [Ulysse](https://github.com/voodoos) adding function parameters with polymorphic types, and [add -print-variance and Asttypes.Bivariant](https://github.com/ocaml/ocaml/pull/13820) by [Takafumi Saikawa](https://github.com/t6s) for variance debugging support\n- **Type system enhancements merged** including [Add a new type kind `Type_external`](https://github.com/ocaml/ocaml/pull/13712) by [Takafumi Saikawa](https://github.com/t6s) and the variance printing functionality ([#13820](https://github.com/ocaml/ocaml/issues/13820))\n- **Ongoing major language features** continue development with [Modular explicits](https://github.com/ocaml/ocaml/pull/13275) by [Samuel Vivien](https://github.com/samsa1) receiving updates, and [Structured diagnostics for the compiler](https://github.com/ocaml/ocaml/pull/13766) by [Florian Angeletti](https://github.com/Octachron) progressing\n- **Standard library enhancements** delivered through Format module improvements and runtime events extensions by multiple contributors\n- **Platform support improvements** with ARM64 optimizations and Windows-specific enhancements for better cross-platform compatibility", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on type system enhancements, platform optimization, and tooling improvements for developer experience", "emerging_trends": "- **Type system sophistication** with polymorphic parameters, external type kinds, and variance annotations improving OCaml's expressiveness for advanced programming patterns\n- **Platform optimization focus** including ARM64 performance improvements and Windows-specific enhancements for better cross-platform development\n- **Developer tooling enhancements** through structured diagnostics, improved error messages, and spellchecker improvements for better development experience\n- **Standard library expansion** with Format module enhancements and runtime events capabilities supporting modern development needs", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active contributions from compiler team members focusing on language features, stdlib improvements, and platform support", "contributors": "- [Zachary Vance](https://github.com/za3k) opened feature request for missing signals in stdlib ([#13825](https://github.com/ocaml/ocaml/issues/13825))\n- [Samuel Vivien](https://github.com/samsa1) continued work on modular explicits ([#13275](https://github.com/ocaml/ocaml/pull/13275)) and contributed module type constraint improvements and type variable validation fixes\n- [Takafumi Saikawa](https://github.com/t6s) opened new PR for variance printing support ([#13820](https://github.com/ocaml/ocaml/pull/13820)) and had Type_external feature merged ([#13712](https://github.com/ocaml/ocaml/pull/13712))\n- [Ulysse](https://github.com/voodoos) opened major polymorphic parameters PR ([#13806](https://github.com/ocaml/ocaml/pull/13806)) bringing function parameters with polymorphic types to the language\n- [Florian Angeletti](https://github.com/Octachron) continued structured diagnostics work ([#13766](https://github.com/ocaml/ocaml/pull/13766)) and contributed spellchecker and module constraint fixes\n- [Antonin Décimo](https://github.com/MisterDA) worked on C++ API compatibility ([#13777](https://github.com/ocaml/ocaml/pull/13777)) and contributed Windows CSPRNG seeding and build system improvements", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 7, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-02-10 to 2025-02-16", "start_commit": "1ef454907b19fba693a182296594d5b8024fa6f4", "end_commit": "80f0a255c2f7f3faccdbb2f3d763e79392a7d065", "brief_summary": "Active week with labeled tuples feature, new stdlib modules Pqueue and String spellchecking, Unicode improvements, and ARM64 GC optimizations", "new_features_summary": "Labeled tuples syntax, Pqueue priority queue module, String edit distance and spellcheck functions, UTF-8 width support in Format, Either module extensions", "new_features": "- **Labeled tuples** syntax implementation providing optional field labels for tuple types and patterns like `(x: int, y: int)` for enhanced code readability and safety ([1ef454907b](https://github.com/ocaml/ocaml/commit/1ef454907b19fba693a182296594d5b8024fa6f4), [9e37dd4cee](https://github.com/ocaml/ocaml/commit/9e37dd4cee751c31dcd370af3b08f06636dafbb6))\n- **Pqueue module** added to stdlib implementing efficient heap-based priority queues with both min and max variants, polymorphic support, and linear-time construction from arrays ([7962a31ec8](https://github.com/ocaml/ocaml/commit/7962a31ec8472888db0218f0f1bb53cb70e23e2b))\n- **String spellchecking** functions including `edit_distance` with optional limit parameter and `spellcheck` for finding closest dictionary matches using UTF-8 aware edit distance algorithms ([ca8eacba34](https://github.com/ocaml/ocaml/commit/ca8eacba349d25267527493efb6c599d3deccad5))\n- **Either module** extensions with `get_left` and `get_right` functions for direct value extraction with error handling ([5301a4c11a](https://github.com/ocaml/ocaml/commit/5301a4c11a1ecba25e6f38c6a3ccb8fc263b417a))\n- **Unicode width support** in Format module with new `out_width` function and `utf_8_scalar_width` for proper Unicode text rendering ([1ef454907b](https://github.com/ocaml/ocaml/commit/1ef454907b19fba693a182296594d5b8024fa6f4))\n- **Uchar module** UTF-8 decoding tools with `utf_8_decode_length_of_byte` and `max_utf_8_decode_length` for efficient UTF-8 processing ([9593e5a32b](https://github.com/ocaml/ocaml/commit/9593e5a32b10af2f8b2c6e1d9c355d738d9d35ea))\n- **ARM64 prefetching** support enabled for ARM64, s390x, PPC64 and RiscV architectures to accelerate GC marking and sweeping operations ([1c073d55eb](https://github.com/ocaml/ocaml/commit/1c073d55ebca6b6f0e0cd57d0e5a5cee13bd9473))\n- **Sys.getenv_opt** optimization to preserve backtraces when returning None by avoiding internal exception usage ([852d1e0bcd](https://github.com/ocaml/ocaml/commit/852d1e0bcd1d404de0d8f873ceb792fc148c80dd))", "activity_summary": "Two major relocatable OCaml PRs opened covering portable compiler configuration with relative library paths and comprehensive bytecode runtime enhancements", "activity": "- **Relocatable OCaml** comprehensive implementation opened by [David Allsopp](https://github.com/dra27) with two major PRs introducing `--with-relative-libdir` configuration option ([#14244](https://github.com/ocaml/ocaml/issues/14244)) and massive collection of bytecode launcher enhancements, Windows path handling improvements, and build system refinements ([#14247](https://github.com/ocaml/ocaml/issues/14247))\n- **Language evolution** with labeled tuples feature merged after extensive development providing optional field labels for tuples to improve code clarity and type safety\n- **Standard library** expansion with priority queue implementation and string processing utilities including edit distance algorithms for spellchecking applications\n- **Unicode improvements** across multiple modules including Format device width calculation and Uchar UTF-8 decoding utilities for better international text support\n- **Performance optimizations** through ARM64 prefetching support and GC improvements, plus type system enhancements for better code generation\n- **Build system** improvements including cross-compiler configuration simplification and Windows triplet validation for more robust builds", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on compiler portability, Unicode text processing improvements, and standard library modernization with efficient data structures", "emerging_trends": "- **Relocatable compiler** development representing substantial effort toward portable OCaml installations that can be moved between directories without reconfiguration\n- **Unicode-first** approach in new string processing functions and format utilities reflecting modern internationalization requirements\n- **Performance-oriented** standard library additions with efficient algorithms and data structures like heap-based priority queues\n- **Cross-platform** improvements with ARM64 optimizations and Windows-specific enhancements for broader architecture support", "issues_summary": null, "good_first_issues": null, "contributors_summary": "[David Allsopp](https://github.com/dra27) led relocatable OCaml development while multiple contributors enhanced stdlib with priority queues, spellchecking, and Unicode support", "contributors": "- [David Allsopp](https://github.com/dra27) opened two comprehensive PRs for relocatable OCaml implementation covering compiler portability, bytecode runtime enhancements, and Windows build improvements ([#14244](https://github.com/ocaml/ocaml/issues/14244), [#14247](https://github.com/ocaml/ocaml/issues/14247))\n- Multiple contributors delivered stdlib enhancements including Jean-Christophe Filliâtre's priority queue implementation, Daniel Bünzli's string spellchecking utilities and Unicode improvements, and T. Kinsart's Either module extensions\n- Compiler team members merged labeled tuples feature from Ryan Tjoa and Chris Casinghino, performance improvements from Tim McGilchrist and Pierre Chambart, and various type system enhancements\n- Gabriel Scherer, Florian Angeletti, and Leo White provided extensive code reviews and facilitated merging of multiple feature branches during this active development week", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 6, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-02-03 to 2025-02-09", "start_commit": "37948e2e562ef0e11fb8940dc546c96a3c73506c", "end_commit": "941181162eb4332b46297f38fcecd58fca66b214", "brief_summary": "Major week with immutable arrays implementation, new stdlib functions, garbage collection fixes, and extensive relocatable OCaml proposals", "new_features_summary": "Immutable arrays added to stdlib, new phys_equal and io_buffer_size functions, Unicode notation improvements, and GC fixes", "new_features": "- **Immutable arrays module** added to standard library with comprehensive API mirroring Array but for immutable data structures ([af3d64d](https://github.com/ocaml/ocaml/commit/af3d64dddb6aabf91a99306c2f58ae5e6ab8cb42), [6d24809](https://github.com/ocaml/ocaml/commit/6d248096fb1aa00bec606a615e95b4408dcea12e))\n- **New `Stdlib.phys_equal` function** providing explicit physical equality testing to replace reliance on `==` operator ([857b341](https://github.com/ocaml/ocaml/commit/857b341b2a5fcadac14217ae694cd574637e6e94))\n- **`Sys.io_buffer_size` constant** exposing the C buffer size used by runtime system and IO primitives ([d20a511](https://github.com/ocaml/ocaml/commit/d20a51163ea2caac5d24d96e23f1de7856bf5f95))\n- **Unicode notation improvements** in error messages respecting Unicode standard for character representation ([7eefe8d](https://github.com/ocaml/ocaml/commit/7eefe8d1812d8805ce690c3094b7abbc9d7d6649))\n- **Enhanced `ocamldep` tool** with new `-keywords` flag mirroring behavior of ocamlc/ocamlopt for consistent keyword handling ([6469d43](https://github.com/ocaml/ocaml/commit/6469d438ea989956704a692406ed9dd0b88a4768))\n- **Improved nanosleep usage** in systhreads tick thread when available for better timing precision ([fd3307b](https://github.com/ocaml/ocaml/commit/fd3307b3a069037e3f748bc3d0e41f521b99b40c))\n- **Fixed ocamltest line numbers** after multiline comments and strings for better test reporting ([5ed57a9](https://github.com/ocaml/ocaml/commit/5ed57a94f9bfa412e36e71ca7d20154b78cff00f))\n- **Assembler directive improvements** with automatic detection of `.size`, `.type` directives and GNU stack notes based on compiler behavior ([473020a](https://github.com/ocaml/ocaml/commit/473020a816f65f63dc2258cf8273fe2497c0278b))", "activity_summary": "Three major PRs opened for relocatable OCaml implementation plus important garbage collection and runtime system bug fixes merged", "activity": "- **Three major relocatable OCaml PRs opened** by [David Allsopp](https://github.com/dra27) representing comprehensive redesign of OCaml's installation and runtime system ([#14244](https://github.com/ocaml/ocaml/issues/14244), [#14247](https://github.com/ocaml/ocaml/issues/14247))\n- **Major garbage collection fixes** merged including accurate live blocks/words stats in compaction ([37948e2](https://github.com/ocaml/ocaml/commit/37948e2e562ef0e11fb8940dc546c96a3c73506c)), shared pool owner correction on adoption ([3597232](https://github.com/ocaml/ocaml/commit/3597232dd532c77a3856ef92db79184f237ad413)), and major GC pacing bug fix for synchronous collections ([21759223](https://github.com/ocaml/ocaml/commit/21759223fabd6a1fa1f72cf208f6a7d99d53fd1a))\n- **Runtime and tooling improvements** including Type.Id extension constructor usage ([66cae63](https://github.com/ocaml/ocaml/commit/66cae6325c93341ec77539d8b1ca9fce04319e2b)), dynlink error string escaping ([7283c51](https://github.com/ocaml/ocaml/commit/7283c513acd1eacec0fadbe403cc6846ee3a72ff)), and AppVeyor build configuration enhancements ([941181162](https://github.com/ocaml/ocaml/commit/941181162eb4332b46297f38fcecd58fca66b214))\n- **C++ API compatibility work** by [Antonin Décimo](https://github.com/MisterDA) addressing compilation issues with C++ and improving header compatibility ([#13777](https://github.com/ocaml/ocaml/issues/13777))", "discussions_summary": "WSL compilation discussion covering Windows Subsystem for Linux build challenges and MSVC/mingw-w64 configuration", "notable_discussions": "- **Windows Subsystem for Linux compilation** discussion by [Antonin Décimo](https://github.com/MisterDA) exploring OCaml build challenges under WSL using MSVC64 and mingw-w64, highlighting differences from Cygwin and path resolution issues ([#11953](https://github.com/ocaml/ocaml/discussions/11953))", "trends_summary": "Strong focus on relocatable OCaml implementation and garbage collection stability improvements across multiple contributors", "emerging_trends": "- **Relocatable OCaml implementation** emerging as major initiative with extensive proposals for runtime system redesign to support installation-independent binaries and improved reproducibility\n- **Garbage collection robustness** receiving significant attention with multiple fixes for compaction statistics, pool management, and pacing algorithms\n- **Cross-platform compatibility** emphasis with C++ API fixes, WSL build exploration, and assembler directive portability improvements\n- **Standard library expansion** continuing with immutable data structures and explicit API functions for better code clarity", "issues_summary": null, "good_first_issues": null, "contributors_summary": "David Allsopp led relocatable OCaml work, Antonin Décimo worked on C++ compatibility, with multiple contributors fixing GC and runtime issues", "contributors": "- [David Allsopp](https://github.com/dra27) authored comprehensive relocatable OCaml proposals with detailed technical design for installation-independent binaries ([#14244](https://github.com/ocaml/ocaml/issues/14244), [#14247](https://github.com/ocaml/ocaml/issues/14247)) and contributed AppVeyor CI improvements\n- [Antonin Décimo](https://github.com/MisterDA) developed C++ API compatibility fixes addressing compilation issues and header improvements ([#13777](https://github.com/ocaml/ocaml/issues/13777)) and initiated WSL compilation discussion ([#11953](https://github.com/ocaml/ocaml/discussions/11953))\n- Multiple contributors delivered critical garbage collection fixes including Sadiq Jaffer (compaction stats), Stephen Dolan (pool adoption), and Nick Barnes (GC pacing)\n- Various contributors added new standard library features including Thomas Blanc and Léo Andrès (phys_equal), Antal Spector-Zabusky and Olivier Nicole (immutable arrays), and Daniel Bünzli (Unicode notation)\n- Luke Maurer fixed ocamltest line number reporting, Samuel Hym improved assembler directive detection, and numerous other contributors provided runtime system and tooling enhancements", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 5, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-01-27 to 2025-02-02", "start_commit": "8646dcee9944531fbd7db8cc29970558f3a9b8fa", "end_commit": "a8e304a475f88d70a6930ab43ac2ef4d263e1a8d", "brief_summary": "Documentation improvements for Seq module termination behavior, Flambda unboxing enhancements, and typecore refactoring", "new_features_summary": "Improved Seq module documentation clarity on infinite sequence handling and Flambda unboxing for static catch parameters", "new_features": "- **Seq module documentation** improved with clearer termination behavior descriptions for functions like `length`, `for_all`, `exists`, `find`, and comparison functions when handling infinite sequences ([#13767](https://github.com/ocaml/ocaml/issues/13767))\n- **Flambda static catch unboxing** enhancement allows unboxing of static catch parameters, improving performance for functional code patterns ([#13758](https://github.com/ocaml/ocaml/issues/13758))\n- **Native debugger test improvements** with better output sanitization and blank line handling for more reliable debugging workflows ([#13762](https://github.com/ocaml/ocaml/issues/13762))", "activity_summary": "Three PRs opened this week including major relocatable OCaml proposals and structured diagnostics, plus merged improvements to Seq docs and compiler optimizations", "activity": "- **Three new PRs opened** this week including comprehensive relocatable OCaml implementation by [David Allsopp](https://github.com/dra27) ([#14243](https://github.com/ocaml/ocaml/issues/14243), [#14247](https://github.com/ocaml/ocaml/issues/14247)) and structured compiler diagnostics by [Florian Angeletti](https://github.com/Octachron) ([#13766](https://github.com/ocaml/ocaml/issues/13766))\n- **Documentation improvements merged** with [@hirrolot](https://github.com/hirrolot) improving Seq module documentation to clarify termination behavior for infinite sequences ([#13767](https://github.com/ocaml/ocaml/issues/13767))\n- **Compiler optimization** delivered through Flambda static catch parameter unboxing by Vincent Laviron, enabling better performance for functional code patterns ([#13758](https://github.com/ocaml/ocaml/issues/13758))\n- **Typecore refactoring** completed by Samuel Vivien refactoring `collect_apply_args` function to prepare for new function kinds ([#13744](https://github.com/ocaml/ocaml/issues/13744))\n- **Native debugger improvements** by [David Allsopp](https://github.com/dra27) fixing test output handling and blank line emission issues ([#13762](https://github.com/ocaml/ocaml/issues/13762))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on relocatable OCaml implementation, structured compiler diagnostics, and performance optimizations through better unboxing", "emerging_trends": "- **Relocatable OCaml initiative** gaining momentum with [David Allsopp](https://github.com/dra27) opening comprehensive PRs addressing `ld.conf` handling, environment variable processing, and bytecode launcher enhancements ([#14243](https://github.com/ocaml/ocaml/issues/14243), [#14247](https://github.com/ocaml/ocaml/issues/14247))\n- **Structured compiler diagnostics** development by [Florian Angeletti](https://github.com/Octachron) introducing machinery for parseable error messages and debugging output ([#13766](https://github.com/ocaml/ocaml/issues/13766))\n- **Performance optimization focus** through Flambda improvements enabling better unboxing of static catch parameters and enhanced value kind propagation", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active contributions from core developers including David Allsopp on relocatable OCaml, Florian Angeletti on diagnostics, and community improvements", "contributors": "- [David Allsopp](https://github.com/dra27) opened major relocatable OCaml implementation PRs covering `ld.conf` handling, bytecode launchers, and environment variable processing ([#14243](https://github.com/ocaml/ocaml/issues/14243), [#14247](https://github.com/ocaml/ocaml/issues/14247)) and fixed native debugger test issues ([#13762](https://github.com/ocaml/ocaml/issues/13762))\n- [Florian Angeletti](https://github.com/Octachron) developed structured diagnostics machinery for parseable compiler output and error messages ([#13766](https://github.com/ocaml/ocaml/issues/13766))\n- [@hirrolot](https://github.com/hirrolot) improved Seq module documentation clarity by updating termination behavior descriptions for infinite sequences ([#13767](https://github.com/ocaml/ocaml/issues/13767))\n- Vincent Laviron implemented Flambda static catch parameter unboxing optimization reviewed by Pierre Chambart ([#13758](https://github.com/ocaml/ocaml/issues/13758))\n- Samuel Vivien completed typecore refactoring in `collect_apply_args` function reviewed by [Florian Angeletti](https://github.com/Octachron) and Gabriel Scherer ([#13744](https://github.com/ocaml/ocaml/issues/13744))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 4, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-01-20 to 2025-01-26", "start_commit": "657d79eb2d4d6c3502cf49067d24980c25d2b442", "end_commit": "c82ce40504f0875969bf86b22e4d6ec7e26b3153", "brief_summary": "Standard library API enhancements and manual improvements with one new PR opened for relocatable OCaml feature", "new_features_summary": "New API functions and documentation updates including Result.retract, Either.retract, and Seq.filteri functions", "new_features": "- **Standard library API additions**: Added `Result.retract` function for extracting values from same-type results ([657d79eb](https://github.com/ocaml/ocaml/commit/657d79eb2d4d6c3502cf49067d24980c25d2b442))\n- **Either module enhancement**: Added `Either.retract` function for extracting values from same-type either values ([657d79eb](https://github.com/ocaml/ocaml/commit/657d79eb2d4d6c3502cf49067d24980c25d2b442))\n- **Sequence filtering**: Added `Seq.filteri` function providing indexed filtering for sequences ([657d79eb](https://github.com/ocaml/ocaml/commit/657d79eb2d4d6c3502cf49067d24980c25d2b442))\n- **Runtime system improvements**: Added `caml_stat_char_array_{to,of}_os` functions for string conversion with NUL character handling ([6612bfeb](https://github.com/ocaml/ocaml/commit/6612bfeb129a6576475d66a7cd9a35942126d9b7))\n- **Custom finalizer documentation**: Enhanced C interface manual with detailed safety guidelines for custom block finalizers ([7a01877e](https://github.com/ocaml/ocaml/commit/7a01877e2265697da0dec8dbfe80fea0d09749a0))\n- **Development tooling**: Added `.editorconfig` file for consistent editor configuration ([a31022b1](https://github.com/ocaml/ocaml/commit/a31022b1de9bd946901ec8b2b65d854e402ae951))\n- **Unix module time handling**: Improved time conversion functions and prevented unbounded wait in Unix.select on Windows ([de538165](https://github.com/ocaml/ocaml/commit/de538165495f0d06dfebf33be2d6dcfc047ef7a3))\n- **Garbage collector fixes**: Made four GC control globals atomic to prevent C data races ([61104576](https://github.com/ocaml/ocaml/commit/61104576261fe2eae8a7a2543bceaf9fe8904b83))", "activity_summary": "One new PR opened for relocatable OCaml while existing PRs continue development on native debugging documentation and external types", "activity": "- **New relocatable OCaml PR opened**: [David Allsopp](https://github.com/dra27) opened comprehensive PR for explicit-relative paths in `ld.conf` as first step toward relocatable OCaml implementation ([#14243](https://github.com/ocaml/ocaml/issues/14243))\n- **Native debugging documentation**: [Tim McGilchrist](https://github.com/tmcgilchrist) continues work on native debugger manual chapter with review feedback from [Daniel Bünzli](https://github.com/dbuenzli) regarding source path handling and BUILD_PATH_PREFIX_MAP interactions ([#13747](https://github.com/ocaml/ocaml/issues/13747))\n- **Type system enhancements**: [Takafumi Saikawa](https://github.com/t6s) progressing external type kind implementation coauthored with Jacques Garrigue, enabling provable type equality and distinguishing external types ([#13712](https://github.com/ocaml/ocaml/issues/13712))\n- **Comprehensive development**: Repository maintained active development with merged bug fixes, documentation updates, and performance improvements across runtime system and standard library components", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on relocatable OCaml infrastructure, enhanced developer tooling, and comprehensive documentation improvements", "emerging_trends": "- **Relocatable OCaml initiative**: Major infrastructure work beginning with [David Allsopp](https://github.com/dra27)'s first PR addressing `ld.conf` handling as foundation for future relocatable compiler installations ([#14243](https://github.com/ocaml/ocaml/issues/14243))\n- **Documentation completeness drive**: Continued emphasis on filling documentation gaps, particularly for advanced features like native debugging and C interface safety guidelines\n- **Developer experience improvements**: Addition of `.editorconfig` and enhanced tooling reflects ongoing commitment to improving contributor experience and code consistency\n- **Safety-focused API design**: New API additions like `retract` functions demonstrate focus on ergonomic yet safe interfaces for common programming patterns", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Four main contributors active with API development, documentation, and infrastructure work by David Allsopp, Tim McGilchrist, Jan Midtgaard, and Takafumi Saikawa", "contributors": "- [David Allsopp](https://github.com/dra27) opened major relocatable OCaml PR implementing explicit-relative paths in `ld.conf` configuration ([#14243](https://github.com/ocaml/ocaml/issues/14243)), merged runtime system improvements for string conversion functions, and contributed Linux ARM64 build support\n- [Tim McGilchrist](https://github.com/tmcgilchrist) authored native debugger manual chapter addressing documentation gaps for debugging OCaml programs ([#13747](https://github.com/ocaml/ocaml/issues/13747)), responding to detailed review feedback about source path handling and debugger configuration\n- [Jan Midtgaard](https://github.com/jmid) reported parallel GC testing issue with segfaults and deadlocks when using `Gc.compact` in multicore environments ([#13739](https://github.com/ocaml/ocaml/issues/13739)), providing detailed reproduction steps and stack traces\n- [Takafumi Saikawa](https://github.com/t6s) continued development on external type kind implementation coauthored with Jacques Garrigue, adding `Type_external` for abstract types with names ([#13712](https://github.com/ocaml/ocaml/issues/13712))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 3, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-01-13 to 2025-01-19", "start_commit": "8273fc78f3ee26eb30f60103751e5835c00ce5c6", "end_commit": "137dd26adc3345547b6eef6da744ac0d66fbc209", "brief_summary": "Standard library enhancements and runtime improvements delivered with three new functions and performance optimizations", "new_features_summary": "New Standard library functions: Result.retract, Either.retract, Seq.filteri, plus ARM64 compiler fixes and Weak module performance improvements", "new_features": "- **Standard library additions**: Three new functions added for improved type ergonomics - [Result.retract](https://github.com/ocaml/ocaml/commit/8273fc78f3ee26eb30f60103751e5835c00ce5c6) extracts values from homogeneous Result types, [Either.retract](https://github.com/ocaml/ocaml/commit/49baed77c5e7f1f83f39220d5a0c2bc89ffc446f) does the same for Either types, and [Seq.filteri](https://github.com/ocaml/ocaml/commit/b2ee286390a47c5ec6f98d7c6add57fb21f7f947) provides indexed filtering for sequences\n- **Performance improvements**: Weak module optimizations including [closure allocation reduction in Weak.add](https://github.com/ocaml/ocaml/commit/2da20f7641342c880289c850e83d4f2f58ba23c8) during table resizing and [improved Weak.find_aux performance](https://github.com/ocaml/ocaml/commit/8f2daefea61762313728a38e415c00b6cad903ca)\n- **ARM64 compiler fixes**: Fixed [instruction size computation on ARM64](https://github.com/ocaml/ocaml/commit/930d7e24241f9b48aa5e6f410a325ec1cd685a48) addressing long-standing code generation issues and added `enable-codegen-invariants` flag for debugging\n- **Test infrastructure**: String starts_with/ends_with tests [now run unconditionally](https://github.com/ocaml/ocaml/commit/137dd26adc3345547b6eef6da744ac0d66fbc209) improving test coverage, and fixed [Coccinelle test naming and Cygwin compatibility](https://github.com/ocaml/ocaml/commit/21a98e6a3f87bc26209465bffc58034a7fe3df92)", "activity_summary": "Notable repository activity includes a new GC safety issue report and ongoing Relocatable OCaml development with large-scale PRs", "activity": "- **New issues**: [Jan Midtgaard](https://github.com/jmid) reported parallel GC test segfaults and deadlocks with `Gc.compact` on macOS ARM64 affecting multiple OCaml versions ([#13739](https://github.com/ocaml/ocaml/issues/13739))\n- **Relocatable OCaml development**: [David Allsopp](https://github.com/dra27) opened comprehensive PRs for relocatable OCaml implementation including explicit-relative paths in ld.conf ([#14243](https://github.com/ocaml/ocaml/pull/14243)) and a massive overview PR combining all relocatable changes ([#14247](https://github.com/ocaml/ocaml/pull/14247)) with 6787 additions across 161 files\n- **Runtime system work**: [Gabriel Scherer](https://github.com/gasche) continued development on distinguishing runtime and mutator mutex types ([#13716](https://github.com/ocaml/ocaml/pull/13716)) with discussion from maintainers about proper usage patterns and potential deadlock prevention", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on runtime safety, performance optimization, and large-scale architectural improvements for OCaml deployment", "emerging_trends": "- **Runtime safety emphasis**: Growing attention to parallel execution safety with detailed bug reports on GC behavior and mutex usage patterns in multi-domain contexts\n- **Performance-focused standard library improvements**: Multiple optimizations targeting closure allocation reduction and algorithm efficiency in core modules like Weak\n- **Deployment and portability improvements**: Significant investment in relocatable OCaml infrastructure suggesting focus on easier distribution and packaging\n- **Enhanced ergonomics**: New utility functions like `retract` and `filteri` show continued commitment to improving developer experience with more expressive APIs", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active contributions from standard library maintainers, runtime system experts, and platform specialists", "contributors": "- [Jan Midtgaard](https://github.com/jmid) provided detailed bug report with crash analysis and reproduction steps for parallel GC issues ([#13739](https://github.com/ocaml/ocaml/issues/13739))\n- [David Allsopp](https://github.com/dra27) led major relocatable OCaml implementation with multiple comprehensive PRs ([#14243](https://github.com/ocaml/ocaml/pull/14243), [#14247](https://github.com/ocaml/ocaml/pull/14247)) and contributed test infrastructure fixes\n- [Gabriel Scherer](https://github.com/gasche) advanced runtime system mutex architecture work ([#13716](https://github.com/ocaml/ocaml/pull/13716)) and provided code reviews\n- Multiple contributors delivered merged improvements including Daniel Bünzli (Result.retract, Either.retract), Tima Kinsart (Seq.filteri), Vincent Laviron (Weak.add optimization), Josh Berdine (Weak.find_aux performance), and Tim McGilchrist (ARM64 fixes)", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 2, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2025-01-06 to 2025-01-12", "start_commit": "4c9f1d9b134ea662cde3f9e52b526da69bd2a654", "end_commit": "bb73dc75315dd620652b0d37e887248e3735fc7e", "brief_summary": "OCaml 5.3.0 released with new Char.Ascii module and runtime fixes for multicore locking", "new_features_summary": "New Char.Ascii module with comprehensive character classification and Unicode support", "new_features": "- **New `Char.Ascii` module** added with comprehensive character classification functions including `is_valid`, `is_upper`, `is_lower`, `is_letter`, `is_alphanum`, `is_white`, `is_blank`, `is_graphic`, `is_print`, `is_control`, `is_digit`, `hex_digit_to_int`, and casing transforms ([4d2298df37987fe5bb099bc0943a304024b524c9](https://github.com/ocaml/ocaml/commit/4d2298df37987fe5bb099bc0943a304024b524c9))\n- **Runtime events deadlock fixes** to prevent STW polls while holding user_events_lock, with pre-allocation to avoid allocation during critical sections ([ada90eb6d3b8f3b3669af726b95ae970780e1830](https://github.com/ocaml/ocaml/commit/ada90eb6d3b8f3b3669af726b95ae970780e1830))\n- **Windows symlink support** when available on the system, improving cross-platform compatibility ([b082fd17f080c7fb7e13f2bbb57edb06cd1e81c8](https://github.com/ocaml/ocaml/commit/b082fd17f080c7fb7e13f2bbb57edb06cd1e81c8))\n- **Polymorphic variant error message improvements** for better subtyping diagnostics ([71783097893344035c6840ff7b49434e78396e94](https://github.com/ocaml/ocaml/commit/71783097893344035c6840ff7b49434e78396e94))\n- **Documentation improvements** including fixed `Dynarray.for_all` docstring example ([dd76656cdcf5d78f0c41c3a117397d1209f6c2c1](https://github.com/ocaml/ocaml/commit/dd76656cdcf5d78f0c41c3a117397d1209f6c2c1)) and corrected Ephemeron documentation ([bb73dc75315dd620652b0d37e887248e3735fc7e](https://github.com/ocaml/ocaml/commit/bb73dc75315dd620652b0d37e887248e3735fc7e))\n- **Build system enhancements** for non-socket builds and Cygwin compatibility pinning ([681f10ef93b33ab5b17a1fea2160f8b4b97f55ef](https://github.com/ocaml/ocaml/commit/681f10ef93b33ab5b17a1fea2160f8b4b97f55ef))", "activity_summary": "Two new PRs opened for type system and runtime improvements alongside OCaml 5.3.0 release", "activity": "- **New PR opened** by [Takafumi Saikawa](https://github.com/t6s) for adding `Type_external` kind to enable abstract type distinction and equality proofs ([#13712](https://github.com/ocaml/ocaml/issues/13712))\n- **New PR opened** by [Gabriel Scherer](https://github.com/gasche) to distinguish runtime vs mutator mutexes for safer concurrent programming ([#13716](https://github.com/ocaml/ocaml/issues/13716))\n- **OCaml 5.3.0 released** by [Florian Angeletti](https://github.com/Octachron) featuring deep effect handlers syntax, restored MSVC port, re-introduced statistical memory profiling, and Unicode source file support\n- **Runtime system fixes** merged by [Guillaume Munch-Maccagnoni](https://github.com/gadmm) addressing multicore locking deadlocks and proper documentation of blocking vs non-blocking mutex usage ([#13227](https://github.com/ocaml/ocaml/issues/13227), [#13714](https://github.com/ocaml/ocaml/issues/13714))\n- **Testing infrastructure** updated by [Jan Midtgaard](https://github.com/jmid) bumping multicoretests to version 0.6 ([#13726](https://github.com/ocaml/ocaml/issues/13726))\n- **Documentation fixes** by [Duncan Holm](https://github.com/frou) for Dynarray ([#13722](https://github.com/ocaml/ocaml/issues/13722)) and community contributors for Ephemeron typos ([#13730](https://github.com/ocaml/ocaml/issues/13730))\n- **Windows and CI improvements** by [David Allsopp](https://github.com/dra27) including symlink creation support ([#13494](https://github.com/ocaml/ocaml/issues/13494)) and Cygwin version pinning ([#13718](https://github.com/ocaml/ocaml/issues/13718))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on runtime system stability and multicore correctness improvements", "emerging_trends": "- **Multicore runtime stabilization** with extensive work on proper locking patterns, deadlock prevention, and clear separation between blocking and non-blocking mutex usage across the runtime system\n- **Type system enhancements** progressing toward better abstract type handling and equality proofs through the new `Type_external` mechanism\n- **Documentation and testing quality** improvements with community contributions fixing docstring errors and bumping test framework versions", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Core team and community members collaborating on runtime fixes, new features, and quality improvements", "contributors": "- [Takafumi Saikawa](https://github.com/t6s) opened comprehensive PR introducing `Type_external` kind for abstract types with extensive discussion from [@garrigue](https://github.com/garrigue) and [@goldfirere](https://github.com/goldfirere) ([#13712](https://github.com/ocaml/ocaml/issues/13712))\n- [Gabriel Scherer](https://github.com/gasche) opened mutex refactoring PR to distinguish runtime vs mutator mutexes and provided detailed analysis of locking patterns ([#13716](https://github.com/ocaml/ocaml/issues/13716))\n- [Guillaume Munch-Maccagnoni](https://github.com/gadmm) implemented runtime events deadlock fixes and contributed to multicore locking discussions with technical expertise\n- [Florian Angeletti](https://github.com/Octachron) published OCaml 5.3.0 release with comprehensive feature summary and coordinated the release process\n- [Jan Midtgaard](https://github.com/jmid) maintained testing infrastructure by updating multicoretests framework and providing quality assurance feedback\n- [David Allsopp](https://github.com/dra27) improved Windows compatibility with symlink support and CI infrastructure fixes for Cygwin environments\n- [Duncan Holm](https://github.com/frou) and [@shym](https://github.com/shym) contributed documentation fixes and runtime compatibility improvements\n- [Ulysse](https://github.com/voodoos) improved code readability with better function naming in typecore module", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 1, "year": 2025, "repo": "ocaml/ocaml", "week_range": "2024-12-30 to 2025-01-05", "start_commit": "fbe9cedf020ceedbfc777977fe86346dcec289ff", "end_commit": "ccbd123a82e59c710f36097c37b269d4cbbf7c20", "brief_summary": "Major internal changes including new symbol mangling, unicode comment support, Bool module enhancements, and Windows build fixes", "new_features_summary": "New Bool logical functions, unicode identifier support in comments, and improved symbol name mangling consistency", "new_features": "- **Symbol mangling overhaul** changes module names from `camlModule.name_NNN` to `camlModule$name_NNN` with consistent platform encoding ([ccbd123a](https://github.com/ocaml/ocaml/commit/ccbd123a82e59c710f36097c37b269d4cbbf7c20))\n- **Unicode identifier support** in comments allows proper rendering of unicode characters in documentation and code comments ([385ab8f9](https://github.com/ocaml/ocaml/commit/385ab8f9b9ad8d8dc53a7d2777e35533fc6c93fa), [ccbd123a](https://github.com/ocaml/ocaml/commit/ccbd123a82e59c710f36097c37b269d4cbbf7c20))\n- **Bool module enhancements** with new logical functions `logand`, `logor`, and `logxor` providing explicit Boolean operations ([d23675111](https://github.com/ocaml/ocaml/commit/d23675111673018c5cf51ee07a51df181128df3d))\n- **OCaml frame pointer correctness** improvements when using C libraries that don't support frame pointers ([d23675111](https://github.com/ocaml/ocaml/commit/d23675111673018c5cf51ee07a51df181128df3d))\n- **Continuation optimization** with faster `caml_continuation_use_and_update_handler_noexc` implementation ([fbe9cedf](https://github.com/ocaml/ocaml/commit/fbe9cedf020ceedbfc777977fe86346dcec289ff))\n- **AMD64 register stall fix** avoiding conversion instruction stalls on amd64 architecture ([d23675111](https://github.com/ocaml/ocaml/commit/d23675111673018c5cf51ee07a51df181128df3d))\n- **Cross-compilation support** enhancements with new GitHub workflow for cross-platform builds ([d23675111](https://github.com/ocaml/ocaml/commit/d23675111673018c5cf51ee07a51df181128df3d))\n- **Manual improvements** including updated lexical conventions documentation with Unicode support details ([385ab8f9](https://github.com/ocaml/ocaml/commit/385ab8f9b9ad8d8dc53a7d2777e35533fc6c93fa))", "activity_summary": "Single Windows-specific issue opened regarding runtop-with-otherlibs functionality on mingw32 and MSVC targets", "activity": "- [Antonin Décimo](https://github.com/MisterDA) opened issue about **Windows runtop-with-otherlibs** failing to load otherlibs with Unix module giving \"dynamic loading not supported\" error ([#13704](https://github.com/ocaml/ocaml/issues/13704))\n- **Extensive typing system improvements** merged with labeled argument additions to typemod functions by multiple contributors ([d75d775e](https://github.com/ocaml/ocaml/commit/d75d775e0c15bddb2b42685c144abefeeb38012f), [85970ee1](https://github.com/ocaml/ocaml/commit/85970ee160c13baa89d904dabb00266eb08dc088))\n- **Build system modernization** with updated autotools configuration and improved cross-compilation support ([d23675111](https://github.com/ocaml/ocaml/commit/d23675111673018c5cf51ee07a51df181128df3d))\n- **Test suite expansion** including new frame pointer tests, Unicode comment tests, and debugger reference updates ([ccbd123a](https://github.com/ocaml/ocaml/commit/ccbd123a82e59c710f36097c37b269d4cbbf7c20), [385ab8f9](https://github.com/ocaml/ocaml/commit/385ab8f9b9ad8d8dc53a7d2777e35533fc6c93fa))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on platform consistency, Unicode modernization, and Windows compatibility improvements", "emerging_trends": "- **Platform standardization** with consistent symbol mangling across all platforms moving away from platform-specific naming schemes\n- **Unicode modernization** progressing with support for Unicode identifiers in comments and updated documentation\n- **Windows compatibility focus** addressing longstanding issues with dynamic loading and otherlibs functionality\n- **Performance optimization** continuing with targeted improvements in continuation handling and register allocation\n- **Type system refinements** with ongoing work on labeled arguments and internal typing infrastructure", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Multiple contributors including Antonin Décimo, Gabriel Scherer, Hugo Heuzard, and others working on diverse improvements", "contributors": "- [Antonin Décimo](https://github.com/MisterDA) identified and reported Windows runtop-with-otherlibs issue affecting mingw32 and MSVC targets ([#13704](https://github.com/ocaml/ocaml/issues/13704))\n- [Gabriel Scherer](https://github.com/gasche) contributed to switch optimization work and various typing system improvements ([85970ee1](https://github.com/ocaml/ocaml/commit/85970ee160c13baa89d904dabb00266eb08dc088))\n- [@hhugo](https://github.com/hhugo) implemented continuation optimization based on previous work ([48ecd94a](https://github.com/ocaml/ocaml/commit/48ecd94a91ca35cbbca2ff9212af0bd0bf580647))\n- Multiple contributors worked on the extensive symbol mangling changes, typing system labeled arguments, and Unicode comment support\n- Test suite maintainers updated numerous reference files across frame pointers, native debugger, and parsing tests", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 52, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-12-23 to 2024-12-29", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 51, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-12-16 to 2024-12-22", "start_commit": "849726f48d4ed1fcc0d96aa186ad43a38c745356", "end_commit": "fa8cd4d714e3106970bfa0148d9c4adf8e73e67f", "brief_summary": "New Bool module functions, manual improvements, runtime fixes, and major compiler refactoring merged", "new_features_summary": "Added eager Bool.logand, logor, logxor functions and fixed C interface manual documentation", "new_features": "- New **eager boolean functions** `Bool.logand`, `Bool.logor`, and `Bool.logxor` providing bitwise operations on booleans for performance-critical code ([c796b3b](https://github.com/ocaml/ocaml/commit/c796b3b05fa42df6d033d127d6be25ded7c74114))\n- Fixed **C interface manual** documentation correcting `hash_variant` to `caml_hash_variant` function name ([fa8cd4d](https://github.com/ocaml/ocaml/commit/fa8cd4d714e3106970bfa0148d9c4adf8e73e67f))\n- Enhanced **manual rendering** switching PDF generation from pdflatex to lualatex with improved Unicode support ([418f333](https://github.com/ocaml/ocaml/commit/418f3331942ae51608dbaea4a038f7587953d8f7))\n- Improved **toplevel constructor printing** using shorter paths for better readability ([bee36ba](https://github.com/ocaml/ocaml/commit/bee36baed2f71f4ac01eea5b343c01e71ead59ea))\n- Fixed **cross-compilation builds** resolving issues with static compiler builds ([f28bfbc](https://github.com/ocaml/ocaml/commit/f28bfbcb232b017460cb0ba7f9ec8cf1cf773811))", "activity_summary": "Extensive compiler refactoring by Samuel Vivien with typing system improvements and runtime optimizations", "activity": "- **Major typing system refactoring** by [Samuel Vivien](https://github.com/samsa1) across multiple modules including improvements to type application handling ([e74da11](https://github.com/ocaml/ocaml/commit/e74da11b0786329abd1ea0e9250af34a4356ef1b)), typemod reorganization ([6616961](https://github.com/ocaml/ocaml/commit/6616961116a50781a5e3ab665a26cd2c5239fbce)), pprintast refactoring ([3480dbd](https://github.com/ocaml/ocaml/commit/3480dbd1ffba5f38cac1190ca1d0bf1d8a5cefa3)), and typetexp improvements ([af96835](https://github.com/ocaml/ocaml/commit/af968358ffeee9eaae2389a090e7472a2a035e4a))\n- **Runtime domain system** improvements by [@COCTI](https://github.com/COCTI) fixing generalization issues ([2ca16da](https://github.com/ocaml/ocaml/commit/2ca16da04e1363acf7e5fe92053c5b2f0ed1bac2)) and simplifying multicore detection ([d89dd7b](https://github.com/ocaml/ocaml/commit/d89dd7bf3c59c89bd0d2f9173f0fbe5ca7483279))\n- **Build system enhancements** by [David Allsopp](https://github.com/dra27) addressing cross-compilation challenges and CI infrastructure updates ([f28bfbc](https://github.com/ocaml/ocaml/commit/f28bfbcb232b017460cb0ba7f9ec8cf1cf773811), [523e6a6](https://github.com/ocaml/ocaml/commit/523e6a6253b11d0d9d99682a8436fb1efb2cdedc))\n- **Documentation and manual improvements** by [Florian Angeletti](https://github.com/Octachron) expanding Unicode support and modernizing LaTeX rendering ([multiple commits](https://github.com/ocaml/ocaml/commit/418f3331942ae51608dbaea4a038f7587953d8f7))\n- **Debugging tools** enhancements by [Nick Barnes](https://github.com/NickBarnes) adding support for variable domain numbers in debugger scripts ([0de4054](https://github.com/ocaml/ocaml/commit/0de4054f265ab70d710d1a49138563cffe8ac152))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on internal compiler modernization with extensive typing system refactoring and tooling improvements", "emerging_trends": "- **Extensive internal refactoring** across the typing system indicating preparation for future language features like modular explicits ([#13275](https://github.com/ocaml/ocaml/issues/13275))\n- **Enhanced build system robustness** with improved cross-compilation support and CI infrastructure modernization reflecting focus on platform compatibility\n- **Documentation modernization** moving from legacy LaTeX to Unicode-capable tooling suggesting improved accessibility for international contributors\n- **Runtime system optimization** with atomic operations and domain handling improvements indicating ongoing multicore performance enhancements", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Samuel Vivien led major typing refactoring, with contributions from David Allsopp, Nick Barnes, Florian Angeletti, and others", "contributors": "- [Samuel Vivien](https://github.com/samsa1) implemented extensive **typing system refactoring** across multiple modules including typemod, pprintast, and typetexp improvements, demonstrating deep work on compiler internals in preparation for modular explicits\n- [David Allsopp](https://github.com/dra27) contributed **build system fixes** for cross-compilation issues and updated CI infrastructure from Ubuntu 22.04 to 24.04, ensuring platform compatibility\n- [Nick Barnes](https://github.com/NickBarnes) enhanced **debugging tools** by updating debugger scripts to handle variable numbers of domains, improving multicore debugging experience\n- [Florian Angeletti](https://github.com/Octachron) led **manual improvements** including Unicode support implementation and LaTeX rendering modernization, making documentation more accessible\n- [@COCTI](https://github.com/COCTI) fixed **runtime domain issues** addressing generalization problems and simplifying multicore detection logic\n- [Gabriel Scherer](https://github.com/gasche) contributed **toplevel printing improvements** implementing shorter path display for constructors and runtime thread management cleanup\n- [Ulysse](https://github.com/voodoos) worked on **type application refactoring** with improvements to typing infrastructure and code organization", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 50, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-12-09 to 2024-12-15", "start_commit": "63293581e124962d6f9e1d92b3ca7d79fc8957ed", "end_commit": "f7223581338fcd6a7e5bdf4b1c83a50781623c8d", "brief_summary": "Cross-compiler build system improvements, AMD64 performance optimization, and recursive module error message enhancements.", "new_features_summary": "Cross-compiler build configuration simplification, AMD64 register stall avoidance, and improved recursive module error reporting.", "new_features": "- **Cross-compiler build system** simplification by [@shym](https://github.com/shym) replacing `--with-target-bindir` configure option with equivalent `TARGET_BINDIR` variable, including new CI workflows and comprehensive documentation ([#13526](https://github.com/ocaml/ocaml/issues/13526))\n- **AMD64 performance optimization** by [Pierre Chambart](https://github.com/chambart) to avoid register stalls on conversion instructions ([#13672](https://github.com/ocaml/ocaml/issues/13672))\n- **Recursive module error messages** improvement by [@shym](https://github.com/shym) when a recursive module type references another recursive module type ([#13646](https://github.com/ocaml/ocaml/issues/13646))\n- **OCamlnat configuration fix** by [David Allsopp](https://github.com/dra27) to resolve configure.ac logic error affecting the native toplevel ([#13671](https://github.com/ocaml/ocaml/issues/13671))\n- **Documentation improvements** to polymorphism chapter by [@steffahn](https://github.com/steffahn) rewriting nested lists example with better `depth` function behavior and fixing typos ([#13666](https://github.com/ocaml/ocaml/issues/13666))", "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on cross-compilation infrastructure and build system improvements for better development workflow.", "emerging_trends": "- **Cross-compilation toolchain** enhancements with comprehensive support for target-specific configuration variables and CI testing workflows\n- **Performance optimizations** targeting specific processor architectures with register allocation improvements\n- **Developer experience** improvements through better error messages and build system simplification", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Multiple core contributors delivered cross-compilation, performance, and documentation improvements during the week.", "contributors": "- [Gabriel Scherer](https://github.com/gasche) participated in issue discussions and code reviews across multiple PRs including the recursive module improvements and AMD64 optimizations\n- [Pierre Chambart](https://github.com/chambart) implemented AMD64 register stall avoidance optimization affecting conversion instructions ([#13672](https://github.com/ocaml/ocaml/issues/13672))\n- [David Allsopp](https://github.com/dra27) fixed OCamlnat configure.ac logic error and contributed to cross-compilation infrastructure ([#13671](https://github.com/ocaml/ocaml/issues/13671))\n- [@shym](https://github.com/shym) delivered major cross-compiler build system improvements replacing configure options with variables and enhanced recursive module error messages ([#13526](https://github.com/ocaml/ocaml/issues/13526), [#13646](https://github.com/ocaml/ocaml/issues/13646))\n- [@steffahn](https://github.com/steffahn) improved documentation in the polymorphism tutorial with rewritten examples and formatting fixes ([#13666](https://github.com/ocaml/ocaml/issues/13666))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 49, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-12-02 to 2024-12-08", "start_commit": "1ad1804364250489ee2eff5f40ffbce5d23be98b", "end_commit": "fc334648cc7ba5c16bfaa3370fb28d69ba795890", "brief_summary": "Frame pointer maintenance improvements, build system updates, and documentation fixes merged across multiple PRs", "new_features_summary": "Frame pointer handling improvements for stack reallocation, Map documentation fix, and build system updates", "new_features": "- **Frame pointer handling** improvements to correctly maintain OCaml frame pointers during stack reallocation when using C libraries that don't support them ([#13635](https://github.com/ocaml/ocaml/issues/13635))\n- **Map.S.add_to_list documentation** fix correcting example from `[v]` to `[data]` in function description ([#13664](https://github.com/ocaml/ocaml/issues/13664))\n- **Build system updates** including Automake 1.17 and libtool 2.5.4 upgrades with updated GNU config files ([#13654](https://github.com/ocaml/ocaml/issues/13654))\n- **Runtime improvement** to help gcc static analyzer by widening a test condition in startup_byt.c ([#13661](https://github.com/ocaml/ocaml/issues/13661))\n- **RISC-V CFI annotations** fix for correct Canonical Frame Address register usage preventing truncated backtraces ([#13595](https://github.com/ocaml/ocaml/issues/13595))", "activity_summary": "Five PRs merged covering frame pointer fixes, documentation improvements, build system upgrades, and runtime enhancements", "activity": "- **Frame pointer maintenance** delivered through [Stephen Dolan](https://github.com/stedolan)'s comprehensive fix ensuring correct OCaml frame pointer handling during stack reallocation when C libraries lack frame pointer support ([#13635](https://github.com/ocaml/ocaml/issues/13635))\n- **Documentation correction** by [@olejodd10](https://github.com/olejodd10) fixing Map.S.add_to_list example documentation from `[v]` to `[data]` for clarity ([#13664](https://github.com/ocaml/ocaml/issues/13664))\n- **Build infrastructure modernization** by [Antonin Décimo](https://github.com/MisterDA) updating to Automake 1.17, libtool 2.5.4, and refreshed GNU config files while removing unneeded Automake files ([#13654](https://github.com/ocaml/ocaml/issues/13654))\n- **Runtime enhancement** by [Florian Angeletti](https://github.com/Octachron) helping gcc static analyzer by widening test condition from `len == -1` to `len < 0` in startup_byt.c ([#13661](https://github.com/ocaml/ocaml/issues/13661))\n- **RISC-V platform fix** by [@dustanddreams](https://github.com/dustanddreams) and [Nick Barnes](https://github.com/NickBarnes) correcting CFI annotations to use x19 as Canonical Frame Address register, preventing backtraces from being truncated when calling no-alloc C code ([#13595](https://github.com/ocaml/ocaml/issues/13595))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on runtime reliability and cross-platform compatibility with frame pointer and CFI annotation improvements", "emerging_trends": "- **Runtime stability emphasis** with multiple PRs addressing frame pointer handling and stack management across different architectures (AMD64, ARM64, RISC-V)\n- **Cross-platform compatibility** focus through CFI annotation fixes and build system modernization ensuring OCaml works correctly across diverse environments\n- **Development toolchain improvements** with static analyzer support and build system updates facilitating better development and debugging experience", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Six contributors delivered runtime improvements, documentation fixes, and build system updates across five merged PRs", "contributors": "- [Gabriel Scherer](https://github.com/gasche) opened issue about type-checker non-termination bug with `-rectypes` flag ([#13658](https://github.com/ocaml/ocaml/issues/13658))\n- [Stephen Dolan](https://github.com/stedolan) implemented frame pointer maintenance improvements ensuring correct handling during stack reallocation ([#13635](https://github.com/ocaml/ocaml/issues/13635))\n- [@olejodd10](https://github.com/olejodd10) corrected Map.S.add_to_list documentation example for better clarity ([#13664](https://github.com/ocaml/ocaml/issues/13664))\n- [Florian Angeletti](https://github.com/Octachron) enhanced runtime code to help gcc static analyzer with improved test condition ([#13661](https://github.com/ocaml/ocaml/issues/13661))\n- [Antonin Décimo](https://github.com/MisterDA) modernized build system with Automake 1.17 and libtool 2.5.4 updates ([#13654](https://github.com/ocaml/ocaml/issues/13654))\n- [Nick Barnes](https://github.com/NickBarnes) and [@dustanddreams](https://github.com/dustanddreams) fixed RISC-V CFI annotations for proper backtrace functionality ([#13595](https://github.com/ocaml/ocaml/issues/13595))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 48, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-11-25 to 2024-12-01", "start_commit": "7e8333238874e22706ed8d4ff0762cc535906c4b", "end_commit": "5a5eb481c7a9d0f039e3169aa8ed19c9b926e982", "brief_summary": "Major improvements to warning system UI, garbage collection performance, parser enhancements, and symbol name mangling updates merged this week", "new_features_summary": "Enhanced warning messages with composable formatting, improved string delimiter parsing, Format module concurrency safety, and symbol name mangling updates", "new_features": "- **Warning and alert message formatting** completely redesigned with composable formatting system, improved error presentation, and better styling for command-line output ([5a5eb48](https://github.com/ocaml/ocaml/commit/5a5eb481c7a9d0f039e3169aa8ed19c9b926e982))\n- **String delimiter parsing** enhanced to accept extended UTF-8 delimiter characters in quoted strings (`{delim||delim}`), improving Unicode support in string literals ([5a5eb48](https://github.com/ocaml/ocaml/commit/5a5eb481c7a9d0f039e3169aa8ed19c9b926e982))\n- **Format module safety** improved with `Queue.take_opt` to prevent exceptions during concurrent access, providing better error handling for multi-domain usage ([5a5eb48](https://github.com/ocaml/ocaml/commit/5a5eb481c7a9d0f039e3169aa8ed19c9b926e982))\n- **Symbol name mangling** updated to use `$` instead of `.` for module separation (`camlModule$name_NNN`) and `$$xx` encoding for special characters, providing consistent cross-platform identifier encoding ([703ba8e](https://github.com/ocaml/ocaml/commit/703ba8eac4da669f793d84452a6137f333254db2))\n- **Exception and type extension locations** now include location information in AST nodes for better error reporting and tooling support ([5a5eb48](https://github.com/ocaml/ocaml/commit/5a5eb481c7a9d0f039e3169aa8ed19c9b926e982))\n- **C++ API compatibility** improved with proper extern \"C\" guards in header files for better integration with C++ codebases ([b0b5f92](https://github.com/ocaml/ocaml/commit/b0b5f92896002239491308d3f1651d6e548c109f))", "activity_summary": "Extensive work on compiler internals including GADT type checking fixes, pattern matching improvements, and major garbage collection performance optimizations", "activity": "- **GADT type checking enhancements** merged with backtracking in `Ctype.unify_gadt` and optimized unification for better type inference by [Jacques Garrigue](https://github.com/COCTI) ([#13585](https://github.com/ocaml/ocaml/issues/13585))\n- **Documentation and syntax fixes** including typo corrections in `HACKING.adoc` and `configure` patterns by [@shym](https://github.com/shym) ([#13652](https://github.com/ocaml/ocaml/issues/13652))\n- **Frame pointer handling** fixes and amd64 assembly refactoring for better debugging support by [Tim McGilchrist](https://github.com/tmcgilchrist) ([#13639](https://github.com/ocaml/ocaml/issues/13639), [#13050](https://github.com/ocaml/ocaml/issues/13050))\n- **Runtime system improvements** including mangling fixes for `caml_system$frametable` and TSan oracle updates ([#13650](https://github.com/ocaml/ocaml/issues/13650), [#13642](https://github.com/ocaml/ocaml/issues/13642))\n- **Pattern matching compiler** fixes for GADT cases and protection of retyping functions to resolve warning 56 false positives ([#13600](https://github.com/ocaml/ocaml/issues/13600), [#13598](https://github.com/ocaml/ocaml/issues/13598))\n- **Parsing infrastructure** updates with location tracking improvements and source printing fixes for escaped identifiers ([#13603](https://github.com/ocaml/ocaml/issues/13603))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on runtime performance optimization, developer experience improvements, and robust type system enhancements", "emerging_trends": "- **Performance-focused development** with major garbage collection optimizations and runtime efficiency improvements taking priority\n- **Developer experience enhancement** through better error messages, improved debugging support, and more informative compiler output\n- **Robust type system evolution** with continued GADT improvements and pattern matching compiler enhancements\n- **Cross-platform consistency** efforts including symbol name mangling standardization and C++ compatibility improvements\n- **Code quality initiatives** with comprehensive test suite updates and TSan integration for memory safety validation", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active collaboration between OCaml core team members focusing on compiler internals, runtime optimization, and tooling improvements", "contributors": "- [Nick Barnes](https://github.com/NickBarnes) contributed major GC performance improvements with mark-delay optimization ([#13580](https://github.com/ocaml/ocaml/issues/13580))\n- [Sadiq Jaffer](https://github.com/sadiqj) implemented shared heap free list representation changes for better sweep performance ([#13616](https://github.com/ocaml/ocaml/issues/13616))\n- [Jacques Garrigue](https://github.com/COCTI) fixed GADT type checking issues and pattern matching false warnings ([#13585](https://github.com/ocaml/ocaml/issues/13585), [#13510](https://github.com/ocaml/ocaml/issues/13510), [#13600](https://github.com/ocaml/ocaml/issues/13600))\n- [Tim McGilchrist](https://github.com/tmcgilchrist) worked on frame pointer improvements and symbol name mangling updates ([#13639](https://github.com/ocaml/ocaml/issues/13639), [#13050](https://github.com/ocaml/ocaml/issues/13050))\n- [@shym](https://github.com/shym) provided documentation fixes and typo corrections ([#13652](https://github.com/ocaml/ocaml/issues/13652))\n- [Kate](https://github.com/kit-ty-kate) reported C++ compilation issues on Cygwin that led to header improvements ([#13541](https://github.com/ocaml/ocaml/issues/13541))\n- Multiple contributors worked on C++ API compatibility, warning system improvements, and parsing enhancements throughout the week", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 47, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-11-18 to 2024-11-24", "start_commit": "878e4c62aaba3f0a9aa0fdae1576b79cd0de3eef", "end_commit": "c484c6932fa2eae03ba0f5a7dbdb26e3eee65eb0", "brief_summary": "OCaml 5.2.1 release published with bug fixes, plus improvements to string operations and error message formatting", "new_features_summary": "String.concat optimization for single elements, String.sub optimization for full strings, and lexer improvements for quoted string delimiters", "new_features": "- **String performance optimizations** including fast path for `String.concat` with single-element lists and `String.sub` when extracting entire string ([487a5ae89df2ef7e8fb502cf1b08e71e487b97c9](https://github.com/ocaml/ocaml/commit/487a5ae89df2ef7e8fb502cf1b08e71e487b97c9))\n- **Lexer improvements** for quoted string delimiters now accept only lowercase letters instead of any identifier characters, improving consistency and error messages ([75a518d15522f0db6eaf3b0597710754e135d138](https://github.com/ocaml/ocaml/commit/75a518d15522f0db6eaf3b0597710754e135d138))\n- **Format module robustness** enhanced with safer queue operations using `Queue.take_opt` to prevent invalid access errors ([c839100f2dbe91b7f7182b638682d6d532bffbc5](https://github.com/ocaml/ocaml/commit/c839100f2dbe91b7f7182b638682d6d532bffbc5))\n- **Parser location tracking** improvements adding precise source locations for more syntax elements during parsing ([2270fbc50945dc779e13a6497e72ea407625b6ff](https://github.com/ocaml/ocaml/commit/2270fbc50945dc779e13a6497e72ea407625b6ff))\n- **Pretty printing enhancements** for type levels in gprinttyp module improving diagnostic output quality ([9ef1641bbcde616096e734dcae58a47480cf6ebf](https://github.com/ocaml/ocaml/commit/9ef1641bbcde616096e734dcae58a47480cf6ebf))", "activity_summary": "OCaml 5.2.1 release published alongside shared heap PR opened earlier, plus configure script and documentation improvements", "activity": "- **OCaml 5.2.1 release** published by [Florian Angeletti](https://github.com/Octachron) containing bug fixes with downloadable assets already showing 35,397 downloads\n- **Shared heap free list optimization** PR opened by [Sadiq Jaffer](https://github.com/sadiqj) implementing run-length encoding for better sweep performance in sparse heaps, showing 3.85x speedup in synthetic benchmarks ([#13616](https://github.com/ocaml/ocaml/issues/13616))\n- **Configure script maintenance** completed by [Antonin Décimo](https://github.com/MisterDA) with multiple commits cleaning up configure checks, removing obsolete math.h detection, and improving POSIX system assumptions ([69551c2982a4e0c5150ddaee5807773785bdd37d](https://github.com/ocaml/ocaml/commit/69551c2982a4e0c5150ddaee5807773785bdd37d), [#13556](https://github.com/ocaml/ocaml/issues/13556))\n- **Thread naming fixes** implemented by [Antonin Décimo](https://github.com/MisterDA) addressing various platform-specific issues with thread name setting functionality ([6c3dc598871ca0cb279cdb7ed9a047089326eca1](https://github.com/ocaml/ocaml/commit/6c3dc598871ca0cb279cdb7ed9a047089326eca1), [#13625](https://github.com/ocaml/ocaml/issues/13625))\n- **Warning message formatting** overhaul by [Florian Angeletti](https://github.com/Octachron) enabling better structured error and warning output with improved formatting ([75459af916ea82c7b8f1cf4dfc16272bf2130818](https://github.com/ocaml/ocaml/commit/75459af916ea82c7b8f1cf4dfc16272bf2130818), [#13568](https://github.com/ocaml/ocaml/issues/13568))\n- **Documentation improvements** including configure regeneration guidance and build process documentation updates by [Antonin Décimo](https://github.com/MisterDA) ([c484c6932fa2eae03ba0f5a7dbdb26e3eee65eb0](https://github.com/ocaml/ocaml/commit/c484c6932fa2eae03ba0f5a7dbdb26e3eee65eb0), [#13610](https://github.com/ocaml/ocaml/issues/13610))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on runtime performance optimizations and development tooling improvements", "emerging_trends": "- **Runtime performance focus** with multiple optimization efforts including string operations, shared heap management, and format module efficiency improvements\n- **Development tooling enhancement** through better configure script maintenance, improved error messages, and enhanced diagnostic output\n- **Code quality initiatives** including safer queue operations, better location tracking, and more robust platform-specific feature handling", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active contributions from core maintainers focusing on runtime optimizations, tooling, and release management", "contributors": "- [Sadiq Jaffer](https://github.com/sadiqj) authored shared heap optimization PR with comprehensive benchmarking showing performance improvements for sparse heap scenarios ([#13616](https://github.com/ocaml/ocaml/issues/13616))\n- [Florian Angeletti](https://github.com/Octachron) published OCaml 5.2.1 release, implemented warning message formatting improvements, and contributed to raw identifier printing fixes ([#13568](https://github.com/ocaml/ocaml/issues/13568), [#13604](https://github.com/ocaml/ocaml/issues/13604))\n- [Antonin Décimo](https://github.com/MisterDA) led configure script modernization efforts, fixed thread naming issues, and improved documentation for build processes ([#13556](https://github.com/ocaml/ocaml/issues/13556), [#13625](https://github.com/ocaml/ocaml/issues/13625), [#13610](https://github.com/ocaml/ocaml/issues/13610))\n- [Nick Barnes](https://github.com/NickBarnes) provided code review and technical feedback on shared heap implementation details and performance optimization approaches ([#13616](https://github.com/ocaml/ocaml/issues/13616))\n- [Gabriel Scherer](https://github.com/gasche) offered technical suggestions for prefetching improvements in the shared heap optimization work ([#13616](https://github.com/ocaml/ocaml/issues/13616))\n- [Jan Midtgaard](https://github.com/jmid) contributed to testing and validation of the shared heap changes ensuring test suite compatibility ([#13616](https://github.com/ocaml/ocaml/issues/13616))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 46, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-11-11 to 2024-11-17", "start_commit": "48226da4f5d2fec68d366c9d9cbf6fac11af116f", "end_commit": "60cee045dab2e2fcbc31cf864a8860b3fa3ea37a", "brief_summary": "GNU/Hurd native backend enablement, runtime bug fixes, and compiler numbers comparison fix", "new_features_summary": "Native backend support enabled for x86_64 GNU/Hurd with natdynlink capability and runtime debugging improvements", "new_features": "- **GNU/Hurd native backend** enabled for x86_64 architecture with full natdynlink support, expanding OCaml platform compatibility ([60cee04](https://github.com/ocaml/ocaml/commit/60cee045dab2e2fcbc31cf864a8860b3fa3ea37a), [961df28](https://github.com/ocaml/ocaml/commit/961df281641776ec8ba343006f971849a1501b91))\n- **CFI annotation fix** for noalloc C code invocation improving debugging capabilities ([31ac5a7](https://github.com/ocaml/ocaml/commit/31ac5a7d06deedeab917364578e0fa23962cd2c5))\n- **Runtime error handling** improvements with fatal errors for OOM conditions in skiplist operations ([7944ac5](https://github.com/ocaml/ocaml/commit/7944ac5b45f7b60fd81050be4dbe646c29718529), [64f9d9a](https://github.com/ocaml/ocaml/commit/64f9d9a916d12a9145dfb97f51766aa09fed87f3))\n- **Ephemeron debugging** thread safety fix with proper lock protection around verification code ([aff6e65](https://github.com/ocaml/ocaml/commit/aff6e65e706782b4529633a89ecc9d481b6353fe))\n- **Numbers.Int_base.compare** function corrected to use proper `Int.compare` instead of subtraction to avoid overflow issues ([542e34f](https://github.com/ocaml/ocaml/commit/542e34f873c227b6f5161eb37f1afe97b96bbb48))", "activity_summary": "One new PR opened for free list optimization while ongoing domain spawn error handling work continues", "activity": "- **New shared heap optimization** PR opened by [Sadiq Jaffer](https://github.com/sadiqj) implementing run-length encoding for free blocks to improve sweeping performance on sparse heaps ([#13616](https://github.com/ocaml/ocaml/issues/13616))\n- **Domain spawn error handling** work continues with [Guillaume Munch-Maccagnoni](https://github.com/gadmm) addressing cleanup during failures, though PR remains in development ([#12410](https://github.com/ocaml/ocaml/issues/12410))\n- **Issue closure** of recursive module error message improvement request by [Zach Baylin](https://github.com/zbaylin) after implementation via PR #13608 ([#12628](https://github.com/ocaml/ocaml/issues/12628))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on platform expansion, runtime reliability improvements, and garbage collection optimization", "emerging_trends": "- **Platform expansion** continues with GNU/Hurd native backend support joining the growing list of supported architectures\n- **Runtime reliability** improvements through better error handling in memory allocation and debugging infrastructure\n- **Garbage collection performance** optimization efforts targeting sparse heap scenarios with new free list representation approaches", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Multiple core contributors worked on platform support, runtime fixes, and performance optimizations", "contributors": "- [Sadiq Jaffer](https://github.com/sadiqj) opened a new PR for shared heap free list optimization targeting sparse heap performance improvements ([#13616](https://github.com/ocaml/ocaml/issues/13616))\n- [Guillaume Munch-Maccagnoni](https://github.com/gadmm) continued work on Domain.spawn error handling with discussion about timeline for completion ([#12410](https://github.com/ocaml/ocaml/issues/12410))\n- [Zach Baylin](https://github.com/zbaylin) saw their recursive module error message improvement request resolved and closed ([#12628](https://github.com/ocaml/ocaml/issues/12628))\n- [Nick Barnes](https://github.com/NickBarnes) contributed runtime debugging improvements including ephemeron lock protection and provided detailed GC performance analysis", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 45, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-11-04 to 2024-11-10", "start_commit": "b7bb8b4f89c4f76e613a65ad0e396216969da0ac", "end_commit": "494da6f26bdb26ed4ce8de57c88a3e58ac1e5410", "brief_summary": "New thread naming API, major GC improvements, linker warning fixes, and typechecker crash resolution merged this week.", "new_features_summary": "Thread.set_current_thread_name API, atomic counter refactoring, and inline code styling improvements for error messages.", "new_features": "- **Thread naming support** with new `Thread.set_current_thread_name` function allowing threads to set their own names ([#13504](https://github.com/ocaml/ocaml/issues/13504))\n- **Atomic counter functions** unified across the runtime with safer access patterns and consolidated implementation ([#13593](https://github.com/ocaml/ocaml/issues/13593))\n- **Linker warning fixes** for amd64 and power architectures by adding missing .type and .size directives to main frametable ([#13496](https://github.com/ocaml/ocaml/issues/13496))\n- **Error message styling** improved with lighter inline code formatting that avoids confusion with OCaml strings by removing bold `...` notation ([#13563](https://github.com/ocaml/ocaml/issues/13563))\n- **Build system improvements** including shallow clone support for git submodules and CFLAGS variable backward compatibility ([#13592](https://github.com/ocaml/ocaml/issues/13592), [#13519](https://github.com/ocaml/ocaml/issues/13519))", "activity_summary": "Major GC performance optimization PR merged with substantial runtime improvements, plus typechecker crash fixes for object typing.", "activity": "- **Major GC performance improvements** delivered through [Nick Barnes](https://github.com/NickBarnes)'s \"Mark-delay\" optimization that reduces latent garbage delay by approximately half a major GC cycle ([#13580](https://github.com/ocaml/ocaml/issues/13580))\n- **Typechecker crash resolution** for object typing scenarios fixed through generalization improvements in Typedecl.update_type ([#13495](https://github.com/ocaml/ocaml/issues/13495), [#13514](https://github.com/ocaml/ocaml/issues/13514))\n- **Runtime consolidation work** including atomic counter function unification and platform-specific assembly improvements across amd64, power, and s390x architectures\n- **Build system enhancements** merged for better developer experience with configure script updates and makefile variable restoration for compatibility", "discussions_summary": "Active discussion on avoiding quadratic stack-scanning behavior for very large stacks in the multicore runtime.", "notable_discussions": "- **Multicore runtime optimization** discussion by [Gabriel Scherer](https://github.com/gasche) exploring solutions for quadratic stack-scanning behavior on very large stacks, with detailed analysis of TMC (Tail Modulo Cons) optimization alternatives and potential strategies using linked stack lists ([#11923](https://github.com/ocaml/ocaml/discussions/11923))", "emerging_trends": null, "trends_summary": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active work by Nick Barnes on GC optimization, Gabriel Scherer on stack optimization discussions, plus multiple contributors on build system and typechecker fixes.", "contributors": "- [Nick Barnes](https://github.com/NickBarnes) implemented the mark-delay performance optimization for major GC, providing substantial improvements to garbage collection latency ([#13580](https://github.com/ocaml/ocaml/issues/13580)) and unified atomic counter functions across the runtime ([#13593](https://github.com/ocaml/ocaml/issues/13593))\n- [Gabriel Scherer](https://github.com/gasche) led detailed technical discussion on multicore runtime stack optimization strategies, analyzing quadratic stack-scanning behavior and potential solutions ([#11923](https://github.com/ocaml/ocaml/discussions/11923))\n- Jacques Garrigue fixed typechecker crashes in object typing scenarios through generalization improvements ([#13495](https://github.com/ocaml/ocaml/issues/13495), [#13514](https://github.com/ocaml/ocaml/issues/13514))\n- Romain Beauxis added thread naming functionality with comprehensive cross-platform support ([#13504](https://github.com/ocaml/ocaml/issues/13504))\n- David Allsopp contributed linker warning fixes for assembly directives on amd64 and power architectures ([#13496](https://github.com/ocaml/ocaml/issues/13496))\n- Florian Angeletti improved error message styling by refining inline code formatting to avoid confusion with string literals ([#13563](https://github.com/ocaml/ocaml/issues/13563))\n- Sébastien Hinderer restored CFLAGS variable backward compatibility in the build system ([#13519](https://github.com/ocaml/ocaml/issues/13519))\n- [@MisterDA](https://github.com/MisterDA) implemented shallow clone support for git submodules to improve repository setup ([#13592](https://github.com/ocaml/ocaml/issues/13592))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 44, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-10-28 to 2024-11-03", "start_commit": "d4caf8bd44b2c0d030aa45083f3bf2bb840027fc", "end_commit": "eb1c14620209b0684f45ccdbe4e2132207e2bae3", "brief_summary": "New `-keywords` flag introduced, major GC performance improvements merged, parallel flush bug reported", "new_features_summary": "New `-keywords` command-line flag, runtime fixes for root scanning and memory management, raw literal escape fixes", "new_features": "- New **`-keywords` command-line flag** allows specifying base keyword set by version and adding additional keywords via `+` separated list ([f5ff742240](https://github.com/ocaml/ocaml/commit/f5ff742240))\n- Fixed **root scanning bug** preventing deletion of roots during scanning to avoid crashes in parallel scenarios ([77f29baefc](https://github.com/ocaml/ocaml/commit/77f29baefc))\n- Fixed **raw literal escape** issue in `-dsource` output to properly handle escape sequences ([a86d5cc043](https://github.com/ocaml/ocaml/commit/a86d5cc043))\n- Fixed **memory allocation** bug in `caml_stat_wcsdup_noexc` to avoid exceptions during out-of-memory conditions ([9a63653166](https://github.com/ocaml/ocaml/commit/9a63653166))\n- Improved **RISC-V runtime** to honor `--disable-cfi` configuration option ([d4caf8bd44](https://github.com/ocaml/ocaml/commit/d4caf8bd44))\n- Fixed **integer comparison** in stdlib to use `<>` instead of `!=` for better practices ([a047d14654](https://github.com/ocaml/ocaml/commit/a047d14654))", "activity_summary": "One new PR opened for mark-delay GC performance improvement, existing Windows concurrency and type system PRs continue", "activity": "- **Mark-delay GC performance** improvement PR opened by [Nick Barnes](https://github.com/NickBarnes) introducing sweep-only phase to reduce latent garbage delay by approximately half a GC cycle ([#13580](https://github.com/ocaml/ocaml/issues/13580))\n- **Windows concurrency primitives** PR continues development by [Antonin Décimo](https://github.com/MisterDA) to remove winpthreads dependency and use modern Windows APIs for both MSVC and MinGW-w64 ports ([#13416](https://github.com/ocaml/ocaml/issues/13416))\n- **Type system fixes** for object inheritance and class constraints remain in progress by [Leo White](https://github.com/lpw25), addressing multiple related issues including self type escaping ([#12150](https://github.com/ocaml/ocaml/issues/12150))\n- **Type expansion handling** major overhaul by [Jacques Garrigue](https://github.com/garrigue) continues to address non-termination and principality tracking issues ([#11648](https://github.com/ocaml/ocaml/issues/11648))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on runtime stability, performance optimization, and parallel execution correctness", "emerging_trends": "- **Runtime robustness** improvements targeting parallel execution scenarios with fixes for root scanning races and memory management edge cases\n- **Performance optimization** work continuing from flambda-backend with mark-delay GC improvements to reduce garbage collection latency\n- **Platform modernization** efforts removing legacy dependencies like winpthreads in favor of native Windows APIs\n- **Developer experience** enhancements through new command-line options for keyword management and better error handling", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Multiple core developers active with runtime improvements, parallel execution fixes, and performance enhancements", "contributors": "- [Jan Midtgaard](https://github.com/jmid) reported **parallel flush bug** with detailed reproducer showing `Out_channel.flush` raising `Sys_error` when used concurrently with channel closure ([#13586](https://github.com/ocaml/ocaml/issues/13586))\n- [KC Sivaramakrishnan](https://github.com/kayceesrk) opened issue about **\"Already Scanned\" optimization** restoration from OCaml 4 to improve stack frame scanning performance in OCaml 5 ([#13574](https://github.com/ocaml/ocaml/issues/13574))\n- [Nick Barnes](https://github.com/NickBarnes) implemented and opened PR for **mark-delay GC performance** improvement, reducing latent garbage delay through new sweep-only phase at start of major GC cycles ([#13580](https://github.com/ocaml/ocaml/issues/13580))\n- [Antonin Décimo](https://github.com/MisterDA) continues work on **Windows concurrency primitives** modernization, replacing winpthreads with native Windows APIs ([#13416](https://github.com/ocaml/ocaml/issues/13416))\n- [Leo White](https://github.com/lpw25) maintains **type system object inheritance** fixes addressing multiple related issues with self types and class constraints ([#12150](https://github.com/ocaml/ocaml/issues/12150))\n- [Jacques Garrigue](https://github.com/garrigue) continues **type expansion handling** overhaul to solve long-standing typechecker problems with recursive types and principality tracking ([#11648](https://github.com/ocaml/ocaml/issues/11648))", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 43, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-10-21 to 2024-10-27", "start_commit": "19b116d2c65de80ee21bac5c68da31d21439f250", "end_commit": "a047d14654ffb4361a5b82a20b66f8e17b5d677f", "brief_summary": "Week focused on runtime improvements, bytecode callbacks optimization, and Windows concurrency API modernization", "new_features_summary": "Bytecode callbacks reimplementation, Dynlink private loading improvements, compiler optimization enhancements", "new_features": "- **Bytecode callbacks system** completely reimplemented by [Xavier Leroy](https://github.com/xavierleroy) to improve safety and stack space management ([c3092e7](https://github.com/ocaml/ocaml/commit/c3092e7ffe7b5016b7f443f83eb9923fa1839fb3))\n- **Dynlink.loadfile_private** enhanced to avoid hiding loaded units until all modules are successfully loaded, improving robustness ([#13376](https://github.com/ocaml/ocaml/issues/13376))\n- **CMM helper optimizations** for switch statements with less tagging overhead by [Gabriel Scherer](https://github.com/gasche) ([f27da79](https://github.com/ocaml/ocaml/commit/f27da793946370b6c7305d9ec4f1c13da91edad7))\n- **Documentation improvement** for `Sys.poll_actions` with proper `@since 5.3` annotation by [Kate](https://github.com/kit-ty-kate) ([bd8e6f5](https://github.com/ocaml/ocaml/commit/bd8e6f517828b552a299b22747bd482881707529))\n- **nanosleep replacement** for usleep when available on Unix platforms by [Antonin Décimo](https://github.com/MisterDA) ([7f5719c](https://github.com/ocaml/ocaml/commit/7f5719c2651292ccd20c6e2644d44cf6dd360105))", "activity_summary": "Major Windows API modernization PR continues development alongside runtime performance improvements", "activity": "- **Windows concurrency modernization** continues with [Antonin Décimo](https://github.com/MisterDA) developing comprehensive WinAPI replacement for winpthreads in ongoing [#13416](https://github.com/ocaml/ocaml/issues/13416)\n- **Runtime improvements** merged including bytecode callback system rewrite ([#13553](https://github.com/ocaml/ocaml/issues/13553)), native code systhreads compilation fixes ([#13520](https://github.com/ocaml/ocaml/issues/13520)), and Dynlink private loading enhancements ([#13376](https://github.com/ocaml/ocaml/issues/13376))\n- **Compiler optimization** work by [Gabriel Scherer](https://github.com/gasche) improving switch statement generation efficiency and build system cleanup ([#13571](https://github.com/ocaml/ocaml/issues/13571), [#13565](https://github.com/ocaml/ocaml/issues/13565))\n- **Platform compatibility** improvements with nanosleep usage ([#13539](https://github.com/ocaml/ocaml/issues/13539)) and GitHub Actions updates for better CI infrastructure", "discussions_summary": "Key issue reported on Cygwin C++ compilation affecting opam builds", "notable_discussions": "- **Cygwin C++ compilation regression** reported by [Kate](https://github.com/kit-ty-kate) in [#13541](https://github.com/ocaml/ocaml/issues/13541) affecting OCaml 5.2+ when building C++ code that uses the OCaml C API, with discussion identifying this as a 5.2 regression from name-mangled caml_state symbols", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active week with core team members focusing on runtime system improvements and Windows platform support", "contributors": "- [Xavier Leroy](https://github.com/xavierleroy) redesigned the bytecode callbacks system for improved safety and performance ([#13553](https://github.com/ocaml/ocaml/issues/13553))\n- [Gabriel Scherer](https://github.com/gasche) optimized compiler switch generation and build system maintenance ([#13571](https://github.com/ocaml/ocaml/issues/13571), [#13565](https://github.com/ocaml/ocaml/issues/13565))\n- [Antonin Décimo](https://github.com/MisterDA) continued Windows concurrency API modernization work and contributed Unix platform improvements ([#13416](https://github.com/ocaml/ocaml/issues/13416), [#13539](https://github.com/ocaml/ocaml/issues/13539))\n- [Kate](https://github.com/kit-ty-kate) reported Cygwin compilation issues and improved API documentation ([#13541](https://github.com/ocaml/ocaml/issues/13541), [#13566](https://github.com/ocaml/ocaml/issues/13566))\n- [David Allsopp](https://github.com/dra27) contributed build system and testing infrastructure improvements", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}, {"week": 42, "year": 2024, "repo": "ocaml/ocaml", "week_range": "2024-10-14 to 2024-10-20", "start_commit": "a07799fceac25e2b2b81f3d2bab64d87ad5cec8d", "end_commit": "1e5d73946f8f1074afeffbf155869ed9a0ff70ef", "brief_summary": "Five PRs merged including new Thread.set_current_thread_name API and compiler improvements", "new_features_summary": "New Thread.set_current_thread_name function for setting thread names on supported platforms", "new_features": "- New **Thread.set_current_thread_name** function allows setting thread names from within thread functions, available on most systems that support the functionality ([#13504](https://github.com/ocaml/ocaml/issues/13504))\n- **Documentation improvements** for `-safe-string` option clarification in Bytes module interface explaining immutability invariant protection ([1e5d73946f](https://github.com/ocaml/ocaml/commit/1e5d73946f8f1074afeffbf155869ed9a0ff70ef))\n- **GC verbose flag documentation** reformatted with cleaner hexadecimal notation (0x001 instead of 0x0001) in Gc.control interface ([1e5d73946f](https://github.com/ocaml/ocaml/commit/1e5d73946f8f1074afeffbf155869ed9a0ff70ef))\n- **String.to_seq documentation** enhanced to clarify behavior in \"unsafe-string\" mode where modifications during iteration are reflected in sequence ([1e5d73946f](https://github.com/ocaml/ocaml/commit/1e5d73946f8f1074afeffbf155869ed9a0ff70ef))", "activity_summary": "Core compiler maintenance with runtime events, typing improvements, and documentation updates", "activity": "- **Runtime events enhancement** by [Thomas Leonard](https://github.com/talex5) with addition of `Runtime_events.EV_EMPTY_MINOR` event for better garbage collection monitoring ([#13407](https://github.com/ocaml/ocaml/issues/13407))\n- **Memory documentation improvement** by [@andyhhp](https://github.com/andyhhp) adding discussion of `CAMLnoreturn` attribute usage in memory.h header ([#13561](https://github.com/ocaml/ocaml/issues/13561))\n- **Local module type substitution fix** by [Florian Angeletti](https://github.com/Octachron) addressing issue [#13388](https://github.com/ocaml/ocaml/issues/13388) where local substitution could fail ([#13540](https://github.com/ocaml/ocaml/issues/13540))\n- **Manual clarification** by [Olivier Nicole](https://github.com/OlivierNicole) disambiguating the `-with-runtime` option documentation ([#12912](https://github.com/ocaml/ocaml/issues/12912))\n- **Testsuite cleanup** by [@hhugo](https://github.com/hhugo) removing unnecessary string-bytes conversions for better js_of_ocaml compatibility ([#13550](https://github.com/ocaml/ocaml/issues/13550))\n- **Ongoing modular explicits development** with [Samuel Vivien](https://github.com/samsa1) continuing work on [#13275](https://github.com/ocaml/ocaml/issues/13275), a feature for module-parametrized functions enabling convenient abstraction over higher-kinded types", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Multiple contributors delivered threading, runtime, and documentation improvements", "contributors": "- [Thomas Leonard](https://github.com/talex5) implemented the `Runtime_events.EV_EMPTY_MINOR` event for improved garbage collection monitoring ([#13407](https://github.com/ocaml/ocaml/issues/13407))\n- [@andyhhp](https://github.com/andyhhp) enhanced runtime documentation by adding comprehensive discussion of the `CAMLnoreturn` attribute in memory.h ([#13561](https://github.com/ocaml/ocaml/issues/13561))\n- [@Octachron](https://github.com/Octachron) fixed a typing system issue where local module type substitution could fail in certain contexts ([#13540](https://github.com/ocaml/ocaml/issues/13540))\n- [@OlivierNicole](https://github.com/OlivierNicole) improved compiler documentation by disambiguating the manual description of the `-with-runtime` option ([#12912](https://github.com/ocaml/ocaml/issues/12912))\n- [@hhugo](https://github.com/hhugo) cleaned up testsuite code by removing unnecessary string-bytes conversions that interfered with js_of_ocaml compatibility ([#13550](https://github.com/ocaml/ocaml/issues/13550))\n- [Samuel Vivien](https://github.com/samsa1) continued development on modular explicits feature ([#13275](https://github.com/ocaml/ocaml/issues/13275)), receiving community feedback and working on implementation improvements", "org": "ocaml", "repo_name": "ocaml", "repo_full": "ocaml/ocaml"}]}