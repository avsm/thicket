{"repo_full": "ocaml/RFCs", "org": "ocaml", "repo_name": "RFCs", "total_weeks": 48, "summaries": [{"week": 37, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-09-08 to 2025-09-14", "start_commit": null, "end_commit": null, "brief_summary": "New `for...in` syntax RFC proposed and ongoing language committee governance discussions", "new_features_summary": null, "new_features": null, "activity_summary": "New `for...in` syntax RFC opened with community discussions on language design and governance policy updates", "activity": "- **New RFC opened** by [Sacha Ayoun](https://github.com/giltho) proposing `for...in` syntax to improve readability and make OCaml more approachable for newcomers ([#56](https://github.com/ocaml/RFCs/issues/56)), generating technical discussion with [Frédéric Loyer](https://github.com/F-Loyer), [Kate](https://github.com/kit-ty-kate), and [Gaëtan Gilbert](https://github.com/SkySkimmer) about existing iteration patterns and performance considerations\n- **Language committee governance** discussions continued on conflict of interest policy by [Florian Angeletti](https://github.com/Octachron) ([#55](https://github.com/ocaml/RFCs/issues/55)) with extensive feedback from [Gabriel Scherer](https://github.com/gasche), [Jeremy Yallop](https://github.com/yallop), and [Guillaume Munch-Maccagnoni](https://github.com/gadmm) addressing transparency, decision-making processes, and community involvement", "discussions_summary": "Technical debate on `for...in` syntax design and comprehensive governance policy discussions for the Language Committee", "notable_discussions": "- **Syntax design debate** around proposed `for...in` construct with community members discussing readability benefits versus existing functional patterns like `List.iter` and labeled functions, focusing on newcomer accessibility and performance implications ([#56](https://github.com/ocaml/RFCs/issues/56))\n- **Committee governance framework** receiving detailed analysis of conflict of interest policies, with discussions on transparency requirements, institutional affiliations, consensus-based decision making, and community growth strategies to reduce governance concentration ([#55](https://github.com/ocaml/RFCs/issues/55))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Eight community members actively participated in RFC discussions on language design and governance", "contributors": "- [Sacha Ayoun](https://github.com/giltho) authored new `for...in` syntax RFC and engaged in technical discussions about iterator performance and syntax benefits ([#56](https://github.com/ocaml/RFCs/issues/56))\n- [Florian Angeletti](https://github.com/Octachron) continued development of Language Committee conflict of interest policy addressing transparency and governance concerns ([#55](https://github.com/ocaml/RFCs/issues/55))\n- [Gabriel Scherer](https://github.com/gasche) provided detailed feedback on governance policy and supported moving forward with committee decision-making framework ([#55](https://github.com/ocaml/RFCs/issues/55))\n- [Jeremy Yallop](https://github.com/yallop) contributed analysis of conflict resolution approaches and defended polymorphic governance principles ([#55](https://github.com/ocaml/RFCs/issues/55))\n- [Guillaume Munch-Maccagnoni](https://github.com/gadmm) offered comprehensive critique of governance proposal covering stakeholder representation, consensus mechanisms, and community growth strategies ([#55](https://github.com/ocaml/RFCs/issues/55))\n- [Frédéric Loyer](https://github.com/F-Loyer), [Kate](https://github.com/kit-ty-kate), and [Gaëtan Gilbert](https://github.com/SkySkimmer) participated in technical discussions about iterator patterns and syntax alternatives ([#56](https://github.com/ocaml/RFCs/issues/56))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 36, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-09-01 to 2025-09-07", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 35, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-08-25 to 2025-08-31", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 34, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-08-18 to 2025-08-24", "start_commit": null, "end_commit": null, "brief_summary": "Discussion continued on OCaml Language Committee conflict of interest policy with multiple committee members providing feedback", "new_features_summary": null, "new_features": null, "activity_summary": "Ongoing discussion of governance policy changes for OCaml Language Committee conflict of interest handling", "activity": "- **OCaml Language Committee governance** discussion continued on conflict of interest policy with [Florian Angeletti](https://github.com/Octachron) planning to wait until September before finalizing the proposal ([#55](https://github.com/ocaml/RFCs/issues/55))", "discussions_summary": "Committee members provided detailed feedback on conflict of interest policy wording and transparency requirements", "notable_discussions": "- **Conflict of interest policy** refinement with [Jeremy Yallop](https://github.com/yallop) suggesting improvements to language clarity and committee structure documentation, [Gabriel Scherer](https://github.com/gasche) noting wording inconsistencies, and [Sébastien Hinderer](https://github.com/shindere) catching grammatical errors ([#55](https://github.com/ocaml/RFCs/issues/55))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Five OCaml Language Committee members participated in governance policy discussions", "contributors": "- [Florian Angeletti](https://github.com/Octachron) authored the conflict of interest policy proposal and planned to incorporate feedback after September ([#55](https://github.com/ocaml/RFCs/issues/55))\n- [Jeremy Yallop](https://github.com/yallop) provided detailed suggestions for improving the policy language and committee documentation structure ([#55](https://github.com/ocaml/RFCs/issues/55))\n- [Gabriel Scherer](https://github.com/gasche) identified wording inconsistencies between different sections of the proposal ([#55](https://github.com/ocaml/RFCs/issues/55))\n- [Sébastien Hinderer](https://github.com/shindere) contributed grammatical corrections to the proposal text ([#55](https://github.com/ocaml/RFCs/issues/55))\n- [Richard Eisenberg](https://github.com/goldfirere) expressed satisfaction with the current proposal text ([#55](https://github.com/ocaml/RFCs/issues/55))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 33, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-08-11 to 2025-08-17", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 32, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-08-04 to 2025-08-10", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 31, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-07-28 to 2025-08-03", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 30, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-07-21 to 2025-07-27", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 29, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-07-14 to 2025-07-20", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 28, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-07-07 to 2025-07-13", "start_commit": null, "end_commit": null, "brief_summary": "New PR opened proposing transparency-based policy for handling conflicts of interest in the OCaml Language Committee", "new_features_summary": null, "new_features": null, "activity_summary": "Single PR opened addressing OCaml Language Committee governance with transparency policy for conflicts of interest", "activity": "- **Committee governance** proposal by [Florian Angeletti](https://github.com/Octachron) to establish transparency-based policy for handling conflicts of interest within the OCaml Language Committee ([#55](https://github.com/ocaml/RFCs/issues/55))", "discussions_summary": "Technical comment about documentation formatting issue in Committee.md file", "notable_discussions": "- **Documentation formatting** issue noted by [shenleban tongying](https://github.com/shenlebantongying) regarding non-functional `size=80` parameter in Committee.md file ([#55](https://github.com/ocaml/RFCs/issues/55))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Florian Angeletti proposed committee governance changes while shenleban tongying provided documentation feedback", "contributors": "- [Florian Angeletti](https://github.com/Octachron) authored comprehensive proposal for transparency-based conflict of interest policy for the OCaml Language Committee, including affiliation requirements and delegation procedures ([#55](https://github.com/ocaml/RFCs/issues/55))\n- [shenleban tongying](https://github.com/shenlebantongying) provided technical feedback identifying documentation formatting issue with `size=80` parameter in Committee.md file ([#55](https://github.com/ocaml/RFCs/issues/55))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 27, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-06-30 to 2025-07-06", "start_commit": null, "end_commit": null, "brief_summary": "RFC discussions progressed on transparent ascription and primitive aliases", "new_features_summary": null, "new_features": null, "activity_summary": "Two ongoing RFC discussions received continued development input", "activity": "- **Transparent ascription RFC** discussion continued with [Clément Blaudeau](https://github.com/clementblaudeau) providing updates on aliasing restrictions for persistent modules only, referencing implementation work and bug reports ([#54](https://github.com/ocaml/RFCs/pull/54))\n- **Primitive aliases RFC** received feedback from [Clément Blaudeau](https://github.com/clementblaudeau) exploring potential extensions to signature constraint mechanisms for external primitives ([#44](https://github.com/ocaml/RFCs/pull/44))", "discussions_summary": "Technical discussions focused on module aliasing implementation details and external primitive syntax extensions", "notable_discussions": "- **Module aliasing scope restrictions** discussed by [Clément Blaudeau](https://github.com/clementblaudeau) with references to related OCaml implementation bugs ([ocaml/ocaml#13997](https://github.com/ocaml/ocaml/issues/13997), [ocaml/ocaml#13979](https://github.com/ocaml/ocaml/issues/13979), [ocaml/ocaml#13897](https://github.com/ocaml/ocaml/issues/13897)) in the transparent ascription RFC ([#54](https://github.com/ocaml/RFCs/pull/54))\n- **External primitive syntax extensions** explored with [Clément Blaudeau](https://github.com/clementblaudeau) suggesting signature constraint mechanism extensions for primitive aliases ([#44](https://github.com/ocaml/RFCs/pull/44))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two contributors provided technical input on language design RFCs", "contributors": "- [Clément Blaudeau](https://github.com/clementblaudeau) advanced the transparent ascription RFC with implementation updates, aliasing restriction proposals, and cross-referenced related compiler bugs ([#54](https://github.com/ocaml/RFCs/pull/54)), while also contributing design feedback on primitive aliases ([#44](https://github.com/ocaml/RFCs/pull/44))\n- [Nailen Matschke](https://github.com/nmatschke) continued maintaining the primitive aliases RFC under consideration ([#44](https://github.com/ocaml/RFCs/pull/44))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 26, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-06-23 to 2025-06-29", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 25, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-06-16 to 2025-06-22", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 24, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-06-09 to 2025-06-15", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 23, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-06-02 to 2025-06-08", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 22, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-05-26 to 2025-06-01", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 21, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-05-19 to 2025-05-25", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 20, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-05-12 to 2025-05-18", "start_commit": null, "end_commit": null, "brief_summary": "Ongoing discussion on transparent ascription RFC with modular implicits benefits highlighted", "new_features_summary": null, "new_features": null, "activity_summary": "Continued discussion on transparent ascription RFC with modular implicits integration benefits", "activity": "- **Transparent ascription RFC** discussion continued with [Samuel Vivien](https://github.com/samsa1) highlighting benefits for **modular implicits** and module signature simplification in [#54](https://github.com/ocaml/RFCs/issues/54)", "discussions_summary": "Discussion focused on modular implicits integration and syntax considerations for transparent ascription", "notable_discussions": "- **Modular implicits integration** discussed by [Samuel Vivien](https://github.com/samsa1) noting how transparent ascription would reduce false ambiguities and improve module syntax patterns in [#54](https://github.com/ocaml/RFCs/issues/54)", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Samuel Vivien provided technical feedback on transparent ascription benefits for modular implicits", "contributors": "- [Samuel Vivien](https://github.com/samsa1) contributed detailed technical feedback on transparent ascription RFC, explaining benefits for modular implicits and module signature patterns ([#54](https://github.com/ocaml/RFCs/issues/54))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 19, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-05-05 to 2025-05-11", "start_commit": null, "end_commit": null, "brief_summary": "Discussion on transparent ascription RFC with module system design questions and performance considerations", "new_features_summary": null, "new_features": null, "activity_summary": "Ongoing discussion on transparent ascription RFC addressing module system improvements and performance questions", "activity": "- **Transparent ascription RFC** continues development by [Clément Blaudeau](https://github.com/clementblaudeau) with module system redesign proposal ([#54](https://github.com/ocaml/RFCs/issues/54))", "discussions_summary": "Technical discussion on module system performance and lazy strengthening alternatives", "notable_discussions": "- [Olivier Nicole](https://github.com/OlivierNicole) raised questions about **performance implications** and relationship to lazy module strengthening used at Jane Street, discussing whether transparent ascription could achieve similar performance gains ([#54](https://github.com/ocaml/RFCs/issues/54))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Clément Blaudeau developing transparent ascription proposal with Olivier Nicole providing technical feedback", "contributors": "- [Clément Blaudeau](https://github.com/clementblaudeau) authored the transparent ascription RFC proposing signature language improvements and aliasing mechanism redesign ([#54](https://github.com/ocaml/RFCs/issues/54))\n- [Olivier Nicole](https://github.com/OlivierNicole) provided detailed technical feedback questioning performance implications and relationship to existing Jane Street lazy module strengthening approaches ([#54](https://github.com/ocaml/RFCs/issues/54))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 18, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-04-28 to 2025-05-04", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 17, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-04-21 to 2025-04-27", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 16, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-04-14 to 2025-04-20", "start_commit": null, "end_commit": null, "brief_summary": "Active RFC discussion on transparent ascription proposal with expert consensus to proceed to prototype implementation", "new_features_summary": null, "new_features": null, "activity_summary": "RFC #54 on transparent ascription gained expert approval for prototype implementation phase", "activity": "- **Transparent ascription RFC** by [Clément Blaudeau](https://github.com/clementblaudeau) received detailed feedback and approval to proceed to prototype implementation from [Gabriel Scherer](https://github.com/gasche), [Leo White](https://github.com/lpw25), and [Xavier Leroy](https://github.com/xavierleroy) ([#54](https://github.com/ocaml/RFCs/pull/54))\n- **RFC discussion** included technical clarifications on static vs dynamic aliases, syntax considerations with underscore notation, and coordination with potential implicit resolution features by [@samsam1](https://github.com/samsam1) ([#54](https://github.com/ocaml/RFCs/pull/54))\n- **Implementation approval** given by [Xavier Leroy](https://github.com/xavierleroy) after direct discussion with [Clément Blaudeau](https://github.com/clementblaudeau), describing the proposal as \"really well thought-out\" ([#54](https://github.com/ocaml/RFCs/pull/54))", "discussions_summary": "Expert feedback on transparent ascription RFC syntax and semantics reached implementation consensus", "notable_discussions": "- **Module system syntax debate** on transparent ascription notation with [Gabriel Scherer](https://github.com/gasche) suggesting syntax improvements and noting potential conflicts with implicit resolution features ([#54](https://github.com/ocaml/RFCs/pull/54))\n- **Static vs dynamic alias distinction** discussed by [Didier Remy](https://github.com/diremy) advocating for explicit user choice rather than implicit inference ([#54](https://github.com/ocaml/RFCs/pull/54))\n- **Implementation readiness assessment** with [Leo White](https://github.com/lpw25) confirming minor feedback can be addressed post-prototype and [Xavier Leroy](https://github.com/xavierleroy) providing final approval ([#54](https://github.com/ocaml/RFCs/pull/54))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Expert OCaml contributors collaborated on RFC review with implementation approval achieved", "contributors": "- [Clément Blaudeau](https://github.com/clementblaudeau) authored the transparent ascription RFC and responded to detailed feedback with clarifications and updates ([#54](https://github.com/ocaml/RFCs/pull/54))\n- [Gabriel Scherer](https://github.com/gasche) provided extensive technical review including syntax suggestions and coordination with OCaml Foundation funding for implementation ([#54](https://github.com/ocaml/RFCs/pull/54))\n- [Xavier Leroy](https://github.com/xavierleroy) conducted detailed technical discussion and provided final approval for prototype implementation ([#54](https://github.com/ocaml/RFCs/pull/54))\n- [Leo White](https://github.com/lpw25) reviewed the proposal and confirmed readiness for implementation phase ([#54](https://github.com/ocaml/RFCs/pull/54))\n- [Didier Remy](https://github.com/diremy) contributed technical feedback on the static vs dynamic alias distinction ([#54](https://github.com/ocaml/RFCs/pull/54))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 15, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-04-07 to 2025-04-13", "start_commit": null, "end_commit": null, "brief_summary": "New RFC for transparent ascription and module aliasing redesign opened with extensive expert review", "new_features_summary": null, "new_features": null, "activity_summary": "Major RFC proposal for transparent ascription and module aliasing redesign opened with detailed expert review", "activity": "- **New RFC proposal** for transparent ascription and module aliasing redesign opened by [Clément Blaudeau](https://github.com/clementblaudeau) with comprehensive 464-line specification covering syntax changes, backward compatibility, and implementation details ([#54](https://github.com/ocaml/RFCs/issues/54))\n- **Expert review and discussion** by [Gabriel Scherer](https://github.com/gasche) providing detailed technical feedback on backward compatibility considerations, syntax clarity, and semantic model questions with multiple rounds of clarifying comments ([#54](https://github.com/ocaml/RFCs/issues/54))\n- **Technical validation** by [Leo White](https://github.com/lpw25) focusing on linking behavior of explicit static aliases and design decisions around `-no-alias-deps` flag transition strategy ([#54](https://github.com/ocaml/RFCs/issues/54))\n- **Language design review** by [Xavier Leroy](https://github.com/xavierleroy) covering metavariable conventions, transparent ascription comparisons to Coq/Rocq, and suggestions for clearer documentation structure ([#54](https://github.com/ocaml/RFCs/issues/54))", "discussions_summary": "In-depth technical discussions on module system enhancements with multiple OCaml core team members", "notable_discussions": "- **Module aliasing redesign** sparked detailed discussion between [Clément Blaudeau](https://github.com/clementblaudeau), [Gabriel Scherer](https://github.com/gasche), [Leo White](https://github.com/lpw25), and [Xavier Leroy](https://github.com/xavierleroy) covering backward compatibility strategies, syntax design decisions, and interaction with existing Dune-generated code ([#54](https://github.com/ocaml/RFCs/issues/54))\n- **Transparent ascription implementation** discussion examining signature avoidance mechanisms, edge cases in type equality preservation, and comparisons to Haskell-style syntax options ([#54](https://github.com/ocaml/RFCs/issues/54))\n- **Dynamic vs static alias subtyping** technical debate clarifying the proposed subtyping relationships and their implications for module system type checking ([#54](https://github.com/ocaml/RFCs/issues/54))", "trends_summary": "Focus on fundamental module system improvements with emphasis on backward compatibility", "emerging_trends": "- **Module system evolution** continues with focus on fundamental improvements to aliasing mechanisms and transparent ascription, building on years of research and practical experience ([#54](https://github.com/ocaml/RFCs/issues/54))\n- **Backward compatibility prioritization** emphasized throughout discussions with careful consideration of existing Dune codebases and manual mapping files used by large projects ([#54](https://github.com/ocaml/RFCs/issues/54))\n- **Expert consensus building** approach demonstrated through collaborative review involving multiple OCaml core team members with deep module system expertise ([#54](https://github.com/ocaml/RFCs/issues/54))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Four core OCaml team members engaged in detailed RFC review and technical discussion", "contributors": "- [Clément Blaudeau](https://github.com/clementblaudeau) authored comprehensive RFC proposal for transparent ascription and module aliasing redesign, incorporating PhD research and responding to extensive reviewer feedback with technical clarifications ([#54](https://github.com/ocaml/RFCs/issues/54))\n- [Gabriel Scherer](https://github.com/gasche) provided detailed technical review focusing on backward compatibility concerns, syntax clarity improvements, and semantic model questions with multiple rounds of constructive feedback ([#54](https://github.com/ocaml/RFCs/issues/54))\n- [Leo White](https://github.com/lpw25) contributed expert analysis of linking behavior and design decisions around `-no-alias-deps` flag transition strategy, emphasizing practical implementation considerations ([#54](https://github.com/ocaml/RFCs/issues/54))\n- [Xavier Leroy](https://github.com/xavierleroy) offered language design perspective with suggestions for documentation structure, metavariable conventions, and comparisons to other language implementations ([#54](https://github.com/ocaml/RFCs/issues/54))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 14, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-03-31 to 2025-04-06", "start_commit": null, "end_commit": null, "brief_summary": "RFC discussion continues on implicit source positions with design debates between multiple contributors", "new_features_summary": null, "new_features": null, "activity_summary": "Ongoing RFC discussion about implicit source positions design with technical debate on API choices", "activity": "- **Implicit source positions RFC** discussion progressed with [Olivier Nicole](https://github.com/OlivierNicole) leading the proposal and receiving detailed feedback from [Richard Eisenberg](https://github.com/goldfirere), [Gabriel Scherer](https://github.com/gasche), and [Daniel Bünzli](https://github.com/dbuenzli) on API design trade-offs ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Technical design debate** centered on whether to support multiple position types (`Lexing.position` vs `Textloc.t`) with considerations for Jane Street compatibility and performance optimization requirements ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Implementation details** discussed including GADT-based approach for multiple implicit argument types, space/time performance measurements, and migration path from existing Jane Street implementation ([#52](https://github.com/ocaml/RFCs/issues/52))", "discussions_summary": "Deep technical discussion on implicit source positions API design balancing simplicity with performance needs", "notable_discussions": "- **API design trade-offs** debate between [Gabriel Scherer](https://github.com/gasche) advocating for single abstract type vs [Richard Eisenberg](https://github.com/goldfirere) supporting multiple concrete types to accommodate different use cases ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Performance analysis** requested by [Daniel Bünzli](https://github.com/dbuenzli) for real-world measurements of executable size and runtime costs, with [Richard Eisenberg](https://github.com/goldfirere) providing usage data showing 5,827 occurrences in Jane Street codebase ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **GADT-based solution** proposed by [Gabriel Scherer](https://github.com/gasche) to support multiple position types while maintaining type safety, though [Richard Eisenberg](https://github.com/goldfirere) expressed concerns about design complexity ([#52](https://github.com/ocaml/RFCs/issues/52))", "trends_summary": "Focus on balancing language feature generality with practical implementation constraints from existing users", "emerging_trends": "- **Industry-academia collaboration** pattern emerging with Jane Street providing real-world usage data and implementation experience to inform RFC design decisions ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Performance-driven design** approach gaining prominence with requests for concrete measurements rather than theoretical analysis for language feature proposals ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Gradual migration strategies** being considered for language features to accommodate existing codebases while introducing improved APIs ([#52](https://github.com/ocaml/RFCs/issues/52))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Four core contributors engaged in technical RFC design discussion with detailed feedback and implementation insights", "contributors": "- [Olivier Nicole](https://github.com/OlivierNicole) authored the implicit source positions RFC proposal, provided technical context from Tarides perspective, and engaged in design discussions about API choices ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Richard Eisenberg](https://github.com/goldfirere) provided extensive Jane Street implementation experience, shared usage statistics (5,827 occurrences), and advocated for supporting multiple position types to accommodate different performance needs ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Gabriel Scherer](https://github.com/gasche) contributed detailed API design analysis, proposed GADT-based solutions for type safety, and advocated for abstract types with future extensibility ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Daniel Bünzli](https://github.com/dbuenzli) requested concrete performance measurements, provided API design critique, and emphasized the importance of data-driven decisions for language feature design ([#52](https://github.com/ocaml/RFCs/issues/52))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 13, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-03-24 to 2025-03-30", "start_commit": null, "end_commit": null, "brief_summary": "New RFC proposed for Relocatable OCaml feature with dev meeting approval", "new_features_summary": null, "new_features": null, "activity_summary": "Single RFC opened for Relocatable OCaml with consensus approval from dev meeting", "activity": "- **Relocatable OCaml RFC** opened by [David Allsopp](https://github.com/dra27) proposing compiler and Standard Library location flexibility ([#53](https://github.com/ocaml/RFCs/issues/53))\n- **Dev meeting consensus** achieved with [Nicolás Ojeda Bär](https://github.com/nojb) confirming RFC approval and transition to review stage ([#53](https://github.com/ocaml/RFCs/issues/53))", "discussions_summary": "Positive feedback on RFC clarity and approval from OCaml dev meeting", "notable_discussions": "- **RFC quality praised** by [Sébastien Hinderer](https://github.com/shindere) for clear explanation and digestible content despite complex implementation details ([#53](https://github.com/ocaml/RFCs/issues/53))\n- **Official approval** communicated by [Nicolás Ojeda Bär](https://github.com/nojb) following dev meeting consensus to move to review stage ([#53](https://github.com/ocaml/RFCs/issues/53))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "David Allsopp authored new RFC with community review feedback", "contributors": "- [David Allsopp](https://github.com/dra27) authored comprehensive RFC for Relocatable OCaml feature with detailed technical specification and examples ([#53](https://github.com/ocaml/RFCs/issues/53))\n- [Sébastien Hinderer](https://github.com/shindere) provided positive review feedback praising RFC clarity and readability ([#53](https://github.com/ocaml/RFCs/issues/53))\n- [Nicolás Ojeda Bär](https://github.com/nojb) communicated official approval from OCaml dev meeting and transition to review stage ([#53](https://github.com/ocaml/RFCs/issues/53))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 12, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-03-17 to 2025-03-23", "start_commit": null, "end_commit": null, "brief_summary": "Technical discussion continued on implicit source positions RFC", "new_features_summary": null, "new_features": null, "activity_summary": "Ongoing discussion on implicit source positions RFC with technical design debate", "activity": "- **Technical design discussion** continues on implicit source positions RFC ([#52](https://github.com/ocaml/RFCs/issues/52)) with contributions from [Olivier Nicole](https://github.com/OlivierNicole), [Gabriel Scherer](https://github.com/gasche), [Daniel Bünzli](https://github.com/dbuenzli), and [Stephen Dolan](https://github.com/stedolan)", "discussions_summary": "Detailed debate on location representation and API design for implicit source positions", "notable_discussions": "- **Location representation format** debate between point locations versus span locations in implicit source positions RFC, with [Daniel Bünzli](https://github.com/dbuenzli) advocating for location spans and [Gabriel Scherer](https://github.com/gasche) supporting abstraction through accessor functions ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Binary size concerns** raised by contributors regarding memory footprint of location information, with [Daniel Bünzli](https://github.com/dbuenzli) proposing variable byte encoding techniques and two-level compact representation approach ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **API design proposals** for text location abstraction, with [Gabriel Scherer](https://github.com/gasche) suggesting `Lexing.Location` submodule and [Daniel Bünzli](https://github.com/dbuenzli) proposing `Stdlib.Textloc` module based on proven patterns from his libraries ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Performance optimization discussion** with [Stephen Dolan](https://github.com/stedolan) clarifying conversion costs between `__POS_OF__` tuples and `Lexing.position` types ([#52](https://github.com/ocaml/RFCs/issues/52))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Four contributors engaged in technical RFC design discussion", "contributors": "- [Olivier Nicole](https://github.com/OlivierNicole) participated in location format discussion and clarified design preferences for the implicit source positions RFC ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Gabriel Scherer](https://github.com/gasche) provided detailed API design proposals for text location abstraction and contributed to performance versus usability debate ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Daniel Bünzli](https://github.com/dbuenzli) shared extensive experience from text location implementations across multiple libraries and proposed memory-efficient encoding techniques ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Stephen Dolan](https://github.com/stedolan) clarified technical details about type conversion performance and compiler optimization capabilities ([#52](https://github.com/ocaml/RFCs/issues/52))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 11, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-03-10 to 2025-03-16", "start_commit": null, "end_commit": null, "brief_summary": "Technical discussion on implicit source positions RFC syntax and type handling for improved debugging capabilities", "new_features_summary": null, "new_features": null, "activity_summary": "Detailed technical discussion on RFC #52 regarding syntax choices and implementation approaches for automatic call position tracking", "activity": "- **Syntax consensus** reached for implicit source positions feature with [Richard Eisenberg](https://github.com/goldfirere) summarizing agreement on `?loc:[%call_pos]` in types, `?(loc = [%call_pos])` in function definitions, and optional `~(loc : [%call_pos])` at call sites ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Data type debate** between positions versus locations involving [Daniel Bünzli](https://github.com/dbuenzli) advocating for `[%call_loc]` with full span information using existing `__POS_OF__` format, and [Ty Overby](https://github.com/TyOverby) defending single position approach for performance and usability concerns ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Performance considerations** discussed by [Simon Cruanes](https://github.com/c-cube) regarding allocation behavior and [Ty Overby](https://github.com/TyOverby) highlighting binary size impacts for js_of_ocaml programs ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Format compatibility** analysis by [Gabriel Scherer](https://github.com/gasche) and [Daniel Bünzli](https://github.com/dbuenzli) comparing OCaml's error reporting format with proposed location representations and Unicode handling ([#52](https://github.com/ocaml/RFCs/issues/52))", "discussions_summary": "Comprehensive technical debate on RFC #52 covering syntax design, data types, and performance trade-offs for implicit call position feature", "notable_discussions": "- **Feature scope discussion** between single position tracking versus full location spans, with [Daniel Bünzli](https://github.com/dbuenzli) proposing `[%call_loc]` for consistency with existing OCaml error formats and [Richard Eisenberg](https://github.com/goldfirere) defending the focused `[%call_pos]` approach based on Jane Street's practical experience ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Implementation trade-offs** debate covering memory footprint, runtime allocation behavior, and conversion costs between different position representations, with detailed analysis of OCaml's existing location format and its Unicode handling capabilities ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Practical usage patterns** discussed by [Ty Overby](https://github.com/TyOverby) highlighting that 99% of use cases would immediately convert spans to positions for logging and debugging, questioning the value of providing only span-based functionality ([#52](https://github.com/ocaml/RFCs/issues/52))", "trends_summary": "Focus on practical implementation details and real-world usage patterns for language feature design based on industry experience", "emerging_trends": "- **Industry-informed RFC process** with [Richard Eisenberg](https://github.com/goldfirere) leveraging Jane Street's months of practical usage experience to guide design decisions and syntax choices for the implicit source positions feature ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Performance-conscious language design** with detailed consideration of binary size impacts for JavaScript compilation targets and runtime allocation behavior for debugging features ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Compatibility-first approach** emphasizing reuse of existing OCaml infrastructure like `__POS_OF__` format and `Lexing.position` types rather than introducing new incompatible representations ([#52](https://github.com/ocaml/RFCs/issues/52))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Five experienced contributors engaged in detailed technical discussion on language feature design and implementation trade-offs", "contributors": "- [Olivier Nicole](https://github.com/OlivierNicole) authored the implicit source positions RFC documenting syntax and semantics for automatic call position tracking ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Richard Eisenberg](https://github.com/goldfirere) provided comprehensive summary of consensus points on syntax choices and clarified Jane Street's implementation experience and requirements ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Daniel Bünzli](https://github.com/dbuenzli) contributed detailed analysis of OCaml's location format, advocated for `[%call_loc]` approach, and provided technical explanations of Unicode handling in error reporting ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Gabriel Scherer](https://github.com/gasche) offered perspective on usability benefits of location spans and questioned performance arguments while suggesting abstract type approach for future optimization ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Simon Cruanes](https://github.com/c-cube) expressed interest in the tracing capabilities and verified allocation behavior of existing position primitives through compiler output analysis ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Ty Overby](https://github.com/TyOverby) defended single position approach with detailed arguments about binary size, conversion costs, and practical usage patterns based on widespread deployment experience ([#52](https://github.com/ocaml/RFCs/issues/52))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 10, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-03-03 to 2025-03-09", "start_commit": null, "end_commit": null, "brief_summary": "Ongoing discussion on include functor RFC with updated signature explanation", "new_features_summary": null, "new_features": null, "activity_summary": "Continued refinement of include functor RFC proposal with enhanced signature documentation", "activity": "- [Chris Casinghino](https://github.com/ccasin) updated **include functor RFC** with expanded signature explanation incorporating feedback from [Gabriel Scherer](https://github.com/gasche) and [Leo White](https://github.com/lpw25) ([#43](https://github.com/ocaml/RFCs/issues/43))", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Chris Casinghino provided updated documentation for ongoing RFC proposal", "contributors": "- [Chris Casinghino](https://github.com/ccasin) enhanced the **include functor RFC** documentation with clearer signature explanations, acknowledging input from [Gabriel Scherer](https://github.com/gasche) and [Leo White](https://github.com/lpw25) in the ongoing language design discussion ([#43](https://github.com/ocaml/RFCs/issues/43))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 9, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-02-24 to 2025-03-02", "start_commit": null, "end_commit": null, "brief_summary": "Ongoing design discussions for implicit source positions RFC with community feedback on syntax and semantics", "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": "Community review of implicit source positions RFC with detailed feedback on syntax, semantics, and design alternatives", "notable_discussions": "- **Implicit source positions RFC** ([#52](https://github.com/ocaml/RFCs/pull/52)) by [Olivier Nicole](https://github.com/OlivierNicole) generated extensive community discussion about syntax alternatives, with [Daniel Bünzli](https://github.com/dbuenzli) questioning position semantics and call site behavior, [Stephen Dolan](https://github.com/stedolan) clarifying n-ary application rules, and [Gabriel Scherer](https://github.com/gasche) and [Nicolás Ojeda Bär](https://github.com/nojb) proposing `?` syntax as alternative to `~` for optional-like behavior\n- **Position representation debate** emerged with [Daniel Bünzli](https://github.com/dbuenzli) questioning `Lexing.position` type limitations for representing application ranges versus source points, leading to suggestions for location-based alternatives like `[%call_loc]` with range information\n- **Syntax design convergence** around treating implicit parameters as optional arguments with mandatory defaults, with proposals for `?(foo = [%call_pos])` syntax gaining support from multiple contributors including [Gabriel Scherer](https://github.com/gasche) and [Nicolás Ojeda Bär](https://github.com/nojb)", "trends_summary": "Focus on language feature syntax design with emphasis on consistency with existing OCaml optional argument patterns", "emerging_trends": "- **Syntax consistency** with existing OCaml patterns is driving design decisions, with community favoring approaches that align with optional argument semantics rather than introducing entirely new syntax patterns\n- **Position representation** discussions highlighting limitations of current `Lexing.position` type for advanced use cases, suggesting potential future evolution toward location ranges rather than point positions\n- **Use case validation** through real-world examples from testing frameworks and tracing systems, demonstrating practical applications beyond initial monadic binding motivation", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Active RFC review participation from OCaml community members with detailed technical feedback and syntax proposals", "contributors": "- [Olivier Nicole](https://github.com/OlivierNicole) authored the **implicit source positions RFC** ([#52](https://github.com/ocaml/RFCs/pull/52)) and responded to community feedback with clarifications about position semantics and n-ary application behavior\n- [Daniel Bünzli](https://github.com/dbuenzli) provided detailed technical review questioning position semantics, call site behavior, and `Lexing.position` type limitations, while proposing alternative approaches for location representation\n- [Stephen Dolan](https://github.com/stedolan) clarified semantic relationships to optional arguments and n-ary application rules, helping establish design foundations for the feature\n- [Gabriel Scherer](https://github.com/gasche) contributed syntax design feedback favoring `?` over `~` notation and participated in discussions about generalization concerns\n- [Nicolás Ojeda Bär](https://github.com/nojb) provided comprehensive analysis of argument behavior semantics and proposed syntax alternatives aligned with optional argument patterns", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 8, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-02-17 to 2025-02-23", "start_commit": null, "end_commit": null, "brief_summary": "New RFC proposal for implicit source positions and continued discussion on include functor feature", "new_features_summary": null, "new_features": null, "activity_summary": "One new RFC opened proposing implicit source positions with continued discussion on include functor", "activity": "- [Olivier Nicole](https://github.com/OlivierNicole) opened **implicit source positions RFC** ([#52](https://github.com/ocaml/RFCs/issues/52)) proposing a new arrow type syntax `loc:[%call_pos] ->` that automatically fills function parameters with call site positions, useful for **monadic bind tracing** and **testing framework improvements**\n- Ongoing **technical discussion** on the `include functor` RFC ([#43](https://github.com/ocaml/RFCs/issues/43)) by [Chris Casinghino](https://github.com/ccasin) with [Florian Angeletti](https://github.com/Octachron) confirming **language committee involvement** and extensive debate about syntax alternatives involving [Gabriel Scherer](https://github.com/gasche), [François Pottier](https://github.com/fpottier), and others", "discussions_summary": "Active technical discussions on implicit source positions implementation and include functor design", "notable_discussions": "- **Implicit source positions implementation details** discussed by [Richard Eisenberg](https://github.com/goldfirere) noting the feature's **production use at Jane Street** for several months, with [Gabriel Scherer](https://github.com/gasche) confirming broad **maintainer consensus** and discussing integration with `BUILD_PATH_PREFIX_MAP` ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Directory handling concerns** raised by [Daniel Bünzli](https://github.com/dbuenzli) about potential conflicts with existing build path mapping, while [Nicolás Ojeda Bär](https://github.com/nojb) provided insights on **Dune workspace behavior** and noted **LexiFi's previous implementation** ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Include functor syntax debate** continuing with [François Pottier](https://github.com/fpottier) suggesting `this` keyword for **current module reference** and [Gabriel Scherer](https://github.com/gasche) exploring alternatives like `include F(module)` syntax for more **expressive module composition** ([#43](https://github.com/ocaml/RFCs/issues/43))", "trends_summary": "Language design discussions emphasizing practical industrial experience and build tool integration", "emerging_trends": "- **Industrial validation approach** where features like implicit source positions gain traction through **Jane Street production experience** before upstream adoption, as noted by [Richard Eisenberg](https://github.com/goldfirere) ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Build system integration awareness** with discussions emphasizing compatibility with **Dune** and **BUILD_PATH_PREFIX_MAP**, showing increased attention to practical deployment concerns ([#52](https://github.com/ocaml/RFCs/issues/52))\n- **Language committee engagement** for complex features like `include functor` as confirmed by [Florian Angeletti](https://github.com/Octachron), indicating more **structured review processes** for advanced language constructs ([#43](https://github.com/ocaml/RFCs/issues/43))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Olivier Nicole opened new RFC with extensive community discussion involving language committee and industry experts", "contributors": "- [Olivier Nicole](https://github.com/OlivierNicole) opened the **implicit source positions RFC** ([#52](https://github.com/ocaml/RFCs/issues/52)) and engaged with community feedback on implementation details\n- [Richard Eisenberg](https://github.com/goldfirere) provided **Jane Street production insights** on implicit source positions and credited implementation work by internal developers ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Gabriel Scherer](https://github.com/gasche) provided **technical analysis** on both RFCs, discussing build system integration and alternative syntax proposals ([#52](https://github.com/ocaml/RFCs/issues/52), [#43](https://github.com/ocaml/RFCs/issues/43))\n- [François Pottier](https://github.com/fpottier) contributed **language design perspectives** on module reference mechanisms and syntax alternatives for the include functor feature ([#43](https://github.com/ocaml/RFCs/issues/43))\n- [Nicolás Ojeda Bär](https://github.com/nojb) shared **build system expertise** regarding Dune behavior and noted **LexiFi's historical implementation** of similar features ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Daniel Bünzli](https://github.com/dbuenzli) raised **build integration concerns** about BUILD_PATH_PREFIX_MAP compatibility ([#52](https://github.com/ocaml/RFCs/issues/52))\n- [Chris Casinghino](https://github.com/ccasin) requested **language committee review** for the include functor RFC and engaged in ongoing syntax discussions ([#43](https://github.com/ocaml/RFCs/issues/43))\n- [Florian Angeletti](https://github.com/Octachron) confirmed **committee shepherd assignment** process for complex language features ([#43](https://github.com/ocaml/RFCs/issues/43))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 7, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-02-10 to 2025-02-16", "start_commit": "38ad684efe1b28177e3fc7f6e871f4a236e4e91e", "end_commit": "308ebe961f885d4f36c9910cb34728d9e990868b", "brief_summary": "OCaml Language Committee officially established with governance documentation merged", "new_features_summary": "OCaml Language Committee documentation added with clarification on compiler flags scope", "new_features": "- **OCaml Language Committee governance framework** established with formal documentation describing committee structure, responsibilities, and submission process ([#51](https://github.com/ocaml/RFCs/issues/51))\n- **Clarification added** explaining why compiler flags are outside committee scope, noting they interface primarily with ecosystem tools rather than general language users ([38ad684](https://github.com/ocaml/RFCs/commit/38ad684efe1b28177e3fc7f6e871f4a236e4e91e))", "activity_summary": "Language committee formation reached completion with community consensus and launch announcement", "activity": "- **OCaml Language Committee officially launched** after [Richard Eisenberg](https://github.com/goldfirere) merged comprehensive governance documentation ([#51](https://github.com/ocaml/RFCs/issues/51))\n- **Community consensus achieved** through extensive discussion involving [David Allsopp](https://github.com/dra27), [Nicolás Ojeda Bär](https://github.com/nojb), [Florian Angeletti](https://github.com/Octachron), and [Josh Berdine](https://github.com/jberdine) on committee scope and procedures\n- **Public announcement planned** by [Florian Angeletti](https://github.com/Octachron) across multiple channels including ocaml/ocaml, caml-list, and discuss forum to introduce the committee to the broader community", "discussions_summary": "Committee scope and procedures discussed with focus on compiler flags exclusion and contributor guidance", "notable_discussions": "- **Committee scope clarification** with [David Allsopp](https://github.com/dra27) and [Josh Berdine](https://github.com/jberdine) discussing whether compiler driver changes should require committee review, ultimately deciding most users interact through tools rather than directly ([#51](https://github.com/ocaml/RFCs/issues/51))\n- **Launch coordination** between [Richard Eisenberg](https://github.com/goldfirere) and [Florian Angeletti](https://github.com/Octachron) planning committee kickoff call and community announcements ([#51](https://github.com/ocaml/RFCs/issues/51))\n- **Documentation integration** suggested by [Josh Berdine](https://github.com/jberdine) to update ocaml/CONTRIBUTING.md with committee information for future contributors ([#51](https://github.com/ocaml/RFCs/issues/51))", "trends_summary": "Formal governance structure introduction shows community commitment to structured language evolution", "emerging_trends": "- **Governance formalization** trend with establishment of the OCaml Language Committee following successful patterns from other language communities like GHC Steering Committee\n- **Consensus-building focus** emphasizing optional committee consultation when natural community consensus doesn't emerge, avoiding mandatory gatekeeper role\n- **Cross-institutional collaboration** with committee members representing diverse organizations including Jane Street, Inria, LexiFi, University of Cambridge, Tarides, and SkipLabs", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Single major contribution establishing language governance framework with multi-contributor review process", "contributors": "- [Richard Eisenberg](https://github.com/goldfirere) authored and shepherded the OCaml Language Committee documentation through community review, incorporating feedback and coordinating with core developers ([#51](https://github.com/ocaml/RFCs/issues/51))\n- [Florian Angeletti](https://github.com/Octachron) provided guidance on committee launch procedures and committed to coordinating public announcements across ocaml/ocaml, caml-list, and discuss forum ([#51](https://github.com/ocaml/RFCs/issues/51))\n- [David Allsopp](https://github.com/dra27) contributed thoughtful analysis of committee scope regarding compiler driver changes and user interaction patterns ([#51](https://github.com/ocaml/RFCs/issues/51))\n- [Nicolás Ojeda Bär](https://github.com/nojb) approved the final proposal and supported moving forward with committee establishment ([#51](https://github.com/ocaml/RFCs/issues/51))\n- [Josh Berdine](https://github.com/jberdine) provided feedback on compiler flags documentation and suggested integration with contributor guidelines ([#51](https://github.com/ocaml/RFCs/issues/51))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 6, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-02-03 to 2025-02-09", "start_commit": null, "end_commit": null, "brief_summary": "OCaml Language Committee documentation proposal by Richard Eisenberg attracted community discussion", "new_features_summary": null, "new_features": null, "activity_summary": "OCaml Language Committee governance proposal under discussion with community feedback", "activity": "- **OCaml Language Committee** governance documentation introduced by [Richard Eisenberg](https://github.com/goldfirere) to formalize consensus-building process for language proposals ([#51](https://github.com/ocaml/RFCs/issues/51))", "discussions_summary": "Community discussion on Language Committee scope and compiler flag handling", "notable_discussions": "- **Language Committee scope** debated by [Josh Berdine](https://github.com/jberdine) questioning exclusion of compiler flags from committee purview, arguing command line interface should be considered part of OCaml's user interface ([#51](https://github.com/ocaml/RFCs/issues/51))\n- **Consensus mechanism** welcomed by [Olivier Nicole](https://github.com/OlivierNicole) as solution to stalled proposals that lack widespread opposition but struggle with unresolved technical points ([#51](https://github.com/ocaml/RFCs/issues/51))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Richard Eisenberg proposed Language Committee with community input from Josh Berdine and Olivier Nicole", "contributors": "- [Richard Eisenberg](https://github.com/goldfirere) authored OCaml Language Committee documentation proposal based on GHC Steering Committee model, coordinating with core developers to establish initial committee membership ([#51](https://github.com/ocaml/RFCs/issues/51))\n- [Josh Berdine](https://github.com/jberdine) provided detailed feedback on committee scope, specifically questioning the exclusion of compiler flags and advocating for broader coverage of OCaml's user interface ([#51](https://github.com/ocaml/RFCs/issues/51))\n- [Olivier Nicole](https://github.com/OlivierNicole) expressed support for the committee concept as a mechanism to resolve stalled proposals that face technical disagreements rather than fundamental opposition ([#51](https://github.com/ocaml/RFCs/issues/51))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 5, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-01-27 to 2025-02-02", "start_commit": "0a028c4d4dd745ae7b209faa1957ed86b67b2b5e", "end_commit": "0a028c4d4dd745ae7b209faa1957ed86b67b2b5e", "brief_summary": "OCaml Language Committee documentation added to formalize consensus-building process for language proposals", "new_features_summary": "OCaml Language Committee documentation establishes formal process for language evolution decisions", "new_features": "- **OCaml Language Committee documentation** established formal process for language and stdlib proposals with committee member roster, decision-making workflow, and community submission guidelines ([#51](https://github.com/ocaml/RFCs/issues/51))\n- **RFC decision process** updated in README to include committee review path when consensus is elusive, providing alternative to developer meeting approval ([0a028c4](https://github.com/ocaml/RFCs/commit/0a028c4d4dd745ae7b209faa1957ed86b67b2b5e))", "activity_summary": "Single PR opened and later merged establishing OCaml Language Committee governance structure", "activity": "- **OCaml Language Committee** governance structure introduced by [Richard Eisenberg](https://github.com/goldfirere) with comprehensive documentation covering committee composition, decision-making process, and community submission guidelines ([#51](https://github.com/ocaml/RFCs/issues/51))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Language governance formalization trend with establishment of committee-based consensus building", "emerging_trends": "- **Language governance formalization** with establishment of structured committee process inspired by GHC Steering Committee model, addressing need for formal consensus-building when community agreement is elusive ([#51](https://github.com/ocaml/RFCs/issues/51))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Richard Eisenberg contributed committee documentation establishing language governance framework", "contributors": "- [Richard Eisenberg](https://github.com/goldfirere) authored comprehensive OCaml Language Committee documentation including member roster, decision workflows, and community submission process ([#51](https://github.com/ocaml/RFCs/issues/51))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 4, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-01-20 to 2025-01-26", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 3, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-01-13 to 2025-01-19", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 2, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2025-01-06 to 2025-01-12", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 1, "year": 2025, "repo": "ocaml/RFCs", "week_range": "2024-12-30 to 2025-01-05", "start_commit": null, "end_commit": null, "brief_summary": "Ongoing discussion on atomic record fields RFC with implementation feedback", "new_features_summary": null, "new_features": null, "activity_summary": "Discussion activity on atomic record fields RFC regarding inline records implementation challenges", "activity": "- Ongoing **atomic record fields RFC** discussion by [Gabriel Scherer](https://github.com/gasche) with detailed feedback on implementation challenges, particularly regarding inline records which appear unusable with atomic fields ([#39](https://github.com/ocaml/RFCs/issues/39))", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Gabriel Scherer provided implementation feedback on atomic record fields RFC", "contributors": "- [Gabriel Scherer](https://github.com/gasche) shared detailed implementation feedback and conclusions about atomic field support in inline records, highlighting technical challenges with the current approach ([#39](https://github.com/ocaml/RFCs/issues/39))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 52, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-12-23 to 2024-12-29", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 51, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-12-16 to 2024-12-22", "start_commit": null, "end_commit": null, "brief_summary": "Ongoing technical discussion about garbage collection proposal addressing performance concerns and implementation details", "new_features_summary": null, "new_features": null, "activity_summary": "One ongoing GC proposal RFC with detailed technical review feedback on performance considerations", "activity": "- **Garbage collection proposal** by [Christophe Raffalli](https://github.com/craff) remains under review with active discussion about implementation details and performance implications ([#50](https://github.com/ocaml/RFCs/issues/50))", "discussions_summary": "Technical review of GC proposal focusing on remembered set implementation and performance trade-offs", "notable_discussions": "- **GC implementation strategy** discussion between [Christophe Raffalli](https://github.com/craff) and [Stephen Dolan](https://github.com/stedolan) covering atomic operations, remembered set representation, and performance concerns about scanning the whole minor heap ([#50](https://github.com/ocaml/RFCs/issues/50))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Christophe Raffalli authored ongoing GC proposal with Stephen Dolan providing detailed technical review feedback", "contributors": "- [Christophe Raffalli](https://github.com/craff) authored the ongoing garbage collection proposal RFC with 100 line additions covering new GC approach ([#50](https://github.com/ocaml/RFCs/issues/50))\n- [Stephen Dolan](https://github.com/stedolan) provided detailed technical review feedback on the GC proposal, questioning implementation details and performance implications of the proposed remembered set approach ([#50](https://github.com/ocaml/RFCs/issues/50))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 50, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-12-09 to 2024-12-15", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 49, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-12-02 to 2024-12-08", "start_commit": null, "end_commit": null, "brief_summary": "Discussion activity on garbage collection proposal for minor heap optimization", "new_features_summary": null, "new_features": null, "activity_summary": "Ongoing discussion on GC proposal for minor heap optimization with reference counting approach", "activity": "- **Garbage collection optimization** proposal by [Christophe Raffalli](https://github.com/craff) continues discussion on minor heap reference counting approach to improve latency with larger heap sizes ([#50](https://github.com/ocaml/RFCs/issues/50))\n- **Technical feedback** provided by [Stephen Dolan](https://github.com/stedolan) addressing terminology clarification and performance concerns regarding atomic operations in multi-domain contexts ([#50](https://github.com/ocaml/RFCs/issues/50))", "discussions_summary": "Technical discussion on GC proposal covering terminology, performance implications, and implementation details", "notable_discussions": "- **Garbage collection terminology** clarification with [Stephen Dolan](https://github.com/stedolan) pointing out that \"grayval list\" should be called \"remembered set\" and explaining the distinction from grey values/mark stack used in major GC ([#50](https://github.com/ocaml/RFCs/issues/50))\n- **Performance considerations** discussed regarding atomic operations for reference counting in multi-domain scenarios versus current remembered set approach ([#50](https://github.com/ocaml/RFCs/issues/50))\n- **Use case motivation** by [Christophe Raffalli](https://github.com/craff) explaining need for larger minor heaps (16MB+) with 64KB-256KB slices to maintain good latencies in simple_httpd applications ([#50](https://github.com/ocaml/RFCs/issues/50))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Christophe Raffalli continued work on GC proposal with Stephen Dolan providing technical review feedback", "contributors": "- [Christophe Raffalli](https://github.com/craff) updated terminology in the GC proposal and responded to technical concerns about reference counting implementation in multi-domain contexts ([#50](https://github.com/ocaml/RFCs/issues/50))\n- [Stephen Dolan](https://github.com/stedolan) provided detailed technical review feedback covering terminology corrections and performance analysis of the proposed reference counting approach versus current remembered set implementation ([#50](https://github.com/ocaml/RFCs/issues/50))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 48, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-11-25 to 2024-12-01", "start_commit": null, "end_commit": null, "brief_summary": "Three new GC improvement proposals opened by Christophe Raffalli, with ongoing discussions on types as module arguments", "new_features_summary": null, "new_features": null, "activity_summary": "Three new GC proposals opened plus continued refinement discussions on types as module arguments proposal", "activity": "- Three **new GC proposal PRs opened** by [Christophe Raffalli](https://github.com/craff) exploring garbage collector improvements, though two were immediately closed due to technical issues and replaced ([#48](https://github.com/ocaml/RFCs/issues/48), [#49](https://github.com/ocaml/RFCs/issues/49), [#50](https://github.com/ocaml/RFCs/issues/50))\n- **Types as module arguments proposal** by [Samuel Vivien](https://github.com/samsa1) continued with detailed technical discussions about value restriction and type escaping scope, with contributions from [Gabriel Scherer](https://github.com/gasche) and [Didier Remy](https://github.com/diremy) on implementation strategy ([#40](https://github.com/ocaml/RFCs/issues/40))", "discussions_summary": "Technical discussions on GC aging approaches and value restriction strategies for type parameters", "notable_discussions": "- **GC optimization discussion** between [Leo White](https://github.com/lpw25) and [Damien Doligez](https://github.com/damiendoligez) about aging approaches in garbage collection, with historical context on why book-keeping dominated performance improvements in past implementations ([#50](https://github.com/ocaml/RFCs/issues/50))\n- **Value restriction strategy debate** for types as module arguments, with [Samuel Vivien](https://github.com/samsa1) proposing a two-step approach using strict value restriction initially, then potentially relaxing to weak value restriction later to handle type escaping scenarios ([#40](https://github.com/ocaml/RFCs/issues/40))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Christophe Raffalli submitted GC proposals, Samuel Vivien advanced module system design, with review input from Leo White, Damien Doligez, Gabriel Scherer, and Didier Remy", "contributors": "- [Christophe Raffalli](https://github.com/craff) opened three PR attempts for GC improvements, iterating through technical issues to arrive at a clean proposal ([#48](https://github.com/ocaml/RFCs/issues/48), [#49](https://github.com/ocaml/RFCs/issues/49), [#50](https://github.com/ocaml/RFCs/issues/50))\n- [Samuel Vivien](https://github.com/samsa1) continued refining the types as module arguments proposal with detailed analysis of value restriction challenges and proposed implementation strategy ([#40](https://github.com/ocaml/RFCs/issues/40))\n- [Leo White](https://github.com/lpw25) provided historical context and technical feedback on GC aging approaches, referencing past implementation experience ([#50](https://github.com/ocaml/RFCs/issues/50))\n- [Gabriel Scherer](https://github.com/gasche) contributed guidance on the phased approach to implementing type parameters with value restriction ([#40](https://github.com/ocaml/RFCs/issues/40))\n- [Didier Remy](https://github.com/diremy) engaged in detailed technical discussion about type abstraction and module evaluation semantics ([#40](https://github.com/ocaml/RFCs/issues/40))\n- [Damien Doligez](https://github.com/damiendoligez) referenced in discussions about GC implementation approaches ([#50](https://github.com/ocaml/RFCs/issues/50))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 47, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-11-18 to 2024-11-24", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 46, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-11-11 to 2024-11-17", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 45, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-11-04 to 2024-11-10", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": "Ongoing technical discussion on atomic record fields design alternatives", "activity": "- Continued **technical discussion** on atomic record fields design with [Gabriel Scherer](https://github.com/gasche), [Vesa Karvonen](https://github.com/polytypic), [Leo White](https://github.com/lpw25), and [@clef-men](https://github.com/clef-men) exploring design tradeoffs between `('r, 'v) Field.t` and `'v Loc.t` approaches ([#39](https://github.com/ocaml/RFCs/issues/39))", "discussions_summary": "Deep technical analysis of atomic operations design with focus on performance and type safety", "notable_discussions": "- **Atomic record fields** design debate examining two competing approaches: the offset-only design with first-class offsets versus the value-and-offset design, with detailed analysis of typing complexity, performance implications, and use cases like Fine-Grained Locking by [Vesa Karvonen](https://github.com/polytypic) and [Gabriel Scherer](https://github.com/gasche) ([#39](https://github.com/ocaml/RFCs/issues/39))\n- **Type inference challenges** discussion around principal mode compatibility and disambiguation requirements for `[%atomic.field]` syntax versus `[%atomic.loc]` alternatives, with particular focus on inline record type limitations identified by [@clef-men](https://github.com/clef-men) ([#39](https://github.com/ocaml/RFCs/issues/39))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Four core contributors engaged in atomic operations design discussion", "contributors": "- [Gabriel Scherer](https://github.com/gasche) led design analysis comparing offset-only versus value-and-offset approaches, exploring implementation strategies and type-checking implications for atomic record fields ([#39](https://github.com/ocaml/RFCs/issues/39))\n- [Vesa Karvonen](https://github.com/polytypic) provided detailed Fine-Grained Locking use case analysis demonstrating practical applications for first-class atomic field offsets and futex-style implementations ([#39](https://github.com/ocaml/RFCs/issues/39))\n- [Leo White](https://github.com/lpw25) contributed GADT-based implementation insights for bridging between design alternatives ([#39](https://github.com/ocaml/RFCs/issues/39))\n- [@clef-men](https://github.com/clef-men) identified limitations with inline record types in atomic field access patterns ([#39](https://github.com/ocaml/RFCs/issues/39))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 44, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-10-28 to 2024-11-03", "start_commit": null, "end_commit": null, "brief_summary": "Maintainer meeting discussions on mixed-atomicity memory model and unit headers for OCaml source files", "new_features_summary": null, "new_features": null, "activity_summary": "Updates to two long-standing RFCs with maintainer meeting feedback and clarifications", "activity": "- **Mixed-atomicity memory model** RFC received maintainer meeting discussion by [Gabriel Scherer](https://github.com/gasche) with clarification from [Stephen Dolan](https://github.com/stedolan) on relaxed reads behavior and next steps for implementation verification ([#42](https://github.com/ocaml/RFCs/issues/42))\n- **Unit headers for OCaml source files** RFC discussed at maintainer meeting by [Gabriel Scherer](https://github.com/gasche) with suggestions for syntax exploration and parsing considerations including extension point alternatives ([#26](https://github.com/ocaml/RFCs/issues/26))", "discussions_summary": "Technical discussions on memory model semantics and syntax design for compilation unit configuration", "notable_discussions": "- **Memory model semantics clarification** by [Stephen Dolan](https://github.com/stedolan) explaining that relaxed reads are weaker than C11 memory model, describing them as \"very relaxed\" reads, with next steps being RFC updates and implementation correctness verification ([#42](https://github.com/ocaml/RFCs/issues/42))\n- **Syntax design exploration** for unit headers with suggestions for parseable alternatives including `{%header <arbitrary string payload>}` extension points to avoid requiring full OCaml parser for header detection ([#26](https://github.com/ocaml/RFCs/issues/26))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Gabriel Scherer leading RFC discussions with input from Stephen Dolan on memory model semantics", "contributors": "- [Gabriel Scherer](https://github.com/gasche) authored and maintained both active RFCs, facilitated maintainer meeting discussions, and provided updates on next steps for memory model RFC revisions ([#42](https://github.com/ocaml/RFCs/issues/42), [#26](https://github.com/ocaml/RFCs/issues/26))\n- [Stephen Dolan](https://github.com/stedolan) provided technical clarification on memory model semantics, explaining the relationship between the proposed relaxed reads and C11 memory model standards ([#42](https://github.com/ocaml/RFCs/issues/42))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 43, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-10-21 to 2024-10-27", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": "Community discussion on raw identifier syntax for variant names that conflict with keywords", "notable_discussions": "- [Gabriel Scherer](https://github.com/gasche) provided feedback on **raw identifier syntax** usage beyond keyword compatibility, specifically for defining variant names that conflict with existing keywords like `Shape.\\#function`, `Shape.\\#lazy`, and `Shape.\\#object` in module design patterns ([#27](https://github.com/ocaml/RFCs/issues/27))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Gabriel Scherer engaged in technical discussion on language syntax features", "contributors": "- [Gabriel Scherer](https://github.com/gasche) provided detailed commentary on practical applications of raw identifier syntax in module design, sharing experience with naming conventions for variant names that conflict with keywords ([#27](https://github.com/ocaml/RFCs/issues/27))", "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}, {"week": 42, "year": 2024, "repo": "ocaml/RFCs", "week_range": "2024-10-14 to 2024-10-20", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml", "repo_name": "RFCs", "repo_full": "ocaml/RFCs"}]}