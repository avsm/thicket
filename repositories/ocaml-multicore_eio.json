{"repo_full": "ocaml-multicore/eio", "org": "ocaml-multicore", "repo_name": "eio", "total_weeks": 51, "summaries": [{"week": 40, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-09-29 to 2025-10-05", "start_commit": null, "end_commit": null, "brief_summary": "Ongoing work on API improvements with updates to long-standing PRs for Pool API and socket options", "new_features_summary": null, "new_features": null, "activity_summary": "Two long-standing PRs received updates addressing code review feedback", "activity": "- [Anil Madhavapeddy](https://github.com/avsm) updated **socket options implementation** in [#575](https://github.com/ocaml-multicore/eio/issues/575) adding `Eio_unix.Sockopt` module for setting and getting socket options, addressing review comments about string handling and fixing test compatibility for `ENOPROTOOPT` errors on Linux kernels\n- [Thomas Leonard](https://github.com/talex5) made progress on **Pool API improvements** in [#747](https://github.com/ocaml-multicore/eio/issues/747) to move the `never_block` optional argument in `Eio.Pool.use` for better compiler inference, with positive review feedback from [Anil Madhavapeddy](https://github.com/avsm)", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Updates to ongoing work from Anil Madhavapeddy and Thomas Leonard", "contributors": "- [Anil Madhavapeddy](https://github.com/avsm) continued development on socket options functionality ([#575](https://github.com/ocaml-multicore/eio/issues/575)), addressing code review feedback on string handling and test compatibility, and provided review feedback on Pool API changes ([#747](https://github.com/ocaml-multicore/eio/issues/747))\n- [Thomas Leonard](https://github.com/talex5) updated the Pool API changes ([#747](https://github.com/ocaml-multicore/eio/issues/747)) and provided detailed code review feedback on socket options implementation ([#575](https://github.com/ocaml-multicore/eio/issues/575))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 39, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-09-22 to 2025-09-28", "start_commit": null, "end_commit": null, "brief_summary": "Ongoing discussion and updates to socket options PR with no new commits to main branch", "new_features_summary": null, "new_features": null, "activity_summary": "Continued discussion on long-running socket options PR with interface refinements", "activity": "- **Socket options API** development continues with [Anil Madhavapeddy](https://github.com/avsm) updating the long-running PR for Eio_unix.Sockopt module and [Thomas Leonard](https://github.com/talex5) providing interface feedback ([#575](https://github.com/ocaml-multicore/eio/issues/575))", "discussions_summary": "Technical discussion on socket options API design and naming conventions", "notable_discussions": "- **API design discussion** between [Anil Madhavapeddy](https://github.com/avsm) and [Thomas Leonard](https://github.com/talex5) regarding socket options module naming, with consensus on simplifying from `Sockopt` to `Socket` and organizing options into sub-modules ([#575](https://github.com/ocaml-multicore/eio/issues/575))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two core maintainers engaged in API design refinement for socket options", "contributors": "- [Anil Madhavapeddy](https://github.com/avsm) continued development on the socket options PR with rebases, Linux-specific implementations, and interface updates based on feedback ([#575](https://github.com/ocaml-multicore/eio/issues/575))\n- [Thomas Leonard](https://github.com/talex5) provided detailed code review feedback on the socket options API design, suggesting naming improvements and architectural changes ([#575](https://github.com/ocaml-multicore/eio/issues/575))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 38, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-09-15 to 2025-09-21", "start_commit": "0ac108a9f33f65986b67a22fb972050d4e095047", "end_commit": "0ac108a9f33f65986b67a22fb972050d4e095047", "brief_summary": "Process path search behavior fixed to match Unix standards", "new_features_summary": "Process path search now correctly handles paths containing slash characters", "new_features": "- **Process path search behavior** now matches Unix standards by not searching PATH when the process name contains a slash character ([#820](https://github.com/ocaml-multicore/eio/issues/820))", "activity_summary": "Single bug fix merged for process path resolution compliance", "activity": "- **Process path resolution** improved by [Thomas Leonard](https://github.com/talex5) to match POSIX standards, ensuring programs with slash characters in their names are not searched in PATH ([#820](https://github.com/ocaml-multicore/eio/issues/820))", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Thomas Leonard fixed process path search behavior", "contributors": "- [Thomas Leonard](https://github.com/talex5) implemented the process path search fix to ensure compliance with Unix/POSIX standards, specifically addressing the requirement that programs containing slash characters should not be searched in the PATH environment variable ([#820](https://github.com/ocaml-multicore/eio/issues/820))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 37, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-09-08 to 2025-09-14", "start_commit": null, "end_commit": null, "brief_summary": "Discussion about fiber-local state inheritance in Domain Manager continued", "new_features_summary": null, "new_features": null, "activity_summary": "Ongoing discussion about Domain Manager fiber-local state inheritance", "activity": "- **Fiber-local state inheritance** discussion continued on [#807](https://github.com/ocaml-multicore/eio/issues/807) with [Shon Feder](https://github.com/shonfeder) seeking input from [Patrick Ferris](https://github.com/patricoferris) and [Thomas Leonard](https://github.com/talex5) providing design guidance on potential solutions including optional `~share_on_domain_spawn` flag and context preservation during `Executor_pool.submit` operations", "discussions_summary": "Technical discussion on fiber-local state sharing across domains", "notable_discussions": "- **Domain Manager fiber-local state** inheritance issue discussed in [#807](https://github.com/ocaml-multicore/eio/issues/807) where [Nathan Taylor](https://github.com/dijkstracula) reported that domains spawned by Domain Manager do not inherit parent fiber-local state, with [Thomas Leonard](https://github.com/talex5) suggesting solutions including optional `~share_on_domain_spawn` flag and noting that context preservation during job submission may be more relevant than domain spawning", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Discussion participants on domain management design decisions", "contributors": "- [Nathan Taylor](https://github.com/dijkstracula) reported detailed analysis of fiber-local state inheritance behavior in Domain Manager with code examples and suggested improvements in [#807](https://github.com/ocaml-multicore/eio/issues/807)\n- [Shon Feder](https://github.com/shonfeder) facilitated discussion by seeking input from [Patrick Ferris](https://github.com/patricoferris) and soliciting maintainer feedback on potential solutions\n- [Thomas Leonard](https://github.com/talex5) provided technical guidance on implementation approaches including optional flags and context preservation strategies for domain management", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 36, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-09-01 to 2025-09-07", "start_commit": "989fc81ec86047e4d3ad164547a6176b983933b9", "end_commit": "989fc81ec86047e4d3ad164547a6176b983933b9", "brief_summary": "Process security improvements with new setuid/setgid fork actions and ongoing uring issue investigation", "new_features_summary": "Added setuid and setgid fork actions for process spawning with different user/group privileges", "new_features": "- New **setuid and setgid fork actions** for process management allowing child processes to run with different user and group IDs than the parent ([#803](https://github.com/ocaml-multicore/eio/pull/803))\n- Enhanced **process spawning API** with optional `uid` and `gid` parameters for secure privilege management in Unix backends ([#803](https://github.com/ocaml-multicore/eio/pull/803))", "activity_summary": "Merged process security enhancement PR and continued investigation of parallel stdout uring issues", "activity": "- **Process security enhancement** by [Patrick Ferris](https://github.com/patricoferris) merged with comprehensive implementation across Unix backends supporting user and group ID management for spawned processes ([#803](https://github.com/ocaml-multicore/eio/pull/803))\n- **Parallel stdout uring issue** investigation continued by [Thomas Leonard](https://github.com/talex5) with discussion in liburing community and potential ocaml-uring setup flags solution ([#788](https://github.com/ocaml-multicore/eio/issues/788))", "discussions_summary": "Technical discussion on uring interrupt handling for parallel stdout operations", "notable_discussions": "- **Uring interrupt handling** discussion between [Thomas Leonard](https://github.com/talex5) and [Patrick Ferris](https://github.com/patricoferris) regarding \"Interrupted system call\" errors in parallel stdout operations, with upstream liburing investigation and potential ocaml-uring fixes ([#788](https://github.com/ocaml-multicore/eio/issues/788))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Patrick Ferris implemented process security features while Thomas Leonard investigated uring issues", "contributors": "- [Patrick Ferris](https://github.com/patricoferris) implemented the setuid/setgid fork actions with comprehensive C bindings and OCaml API integration across Unix backends ([#803](https://github.com/ocaml-multicore/eio/pull/803))\n- [Thomas Leonard](https://github.com/talex5) investigated the parallel stdout uring interrupt issue, engaged with the liburing community, and explored potential solutions through ocaml-uring setup flags ([#788](https://github.com/ocaml-multicore/eio/issues/788))\n- [Wildfield](https://github.com/wildfield) provided detailed reproduction case and system information for the uring interrupt issue affecting parallel file operations ([#788](https://github.com/ocaml-multicore/eio/issues/788))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 35, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-08-25 to 2025-08-31", "start_commit": null, "end_commit": null, "brief_summary": "Issue discussion regarding parallel stdout writing causing \"Interrupted system call\" errors in Eio applications", "new_features_summary": null, "new_features": null, "activity_summary": "Community discussion on issue #788 regarding parallel stdout writing errors with technical investigation", "activity": "- **Parallel stdout writing issue** ([#788](https://github.com/ocaml-multicore/eio/issues/788)) under active investigation with [Patrick Ferris](https://github.com/patricoferris) providing technical analysis and reduced reproduction case using Uring directly to isolate the underlying cause", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Wildfield reported parallel writing issue with Patrick Ferris providing technical investigation", "contributors": "- [Wildfield](https://github.com/wildfield) reported detailed issue with parallel stdout writing causing \"Interrupted system call\" errors, providing complete reproduction code for ~10KB file processing ([#788](https://github.com/ocaml-multicore/eio/issues/788))\n- [Patrick Ferris](https://github.com/patricoferris) provided technical analysis and created minimal reproduction case using Uring directly to isolate the underlying issue ([#788](https://github.com/ocaml-multicore/eio/issues/788))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 34, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-08-18 to 2025-08-24", "start_commit": "f6dac4a8be61db6bb2c30dbc56b4654fad41347f", "end_commit": "24c9b820121837072728d1afd9e7703b91cbeab0", "brief_summary": "Process management improvements with new Unix fork actions for user/group IDs and process groups merged", "new_features_summary": "Added setuid, setgid, and setpgid fork actions plus process group support for enhanced Unix process control", "new_features": "- **Process user and group ID control** through new `setuid` and `setgid` fork actions allowing child processes to run with different user/group privileges ([#803](https://github.com/ocaml-multicore/eio/issues/803))\n- **Process group management** via new `setpgid` fork action and optional `pgid` parameter in spawn functions for job control applications ([#802](https://github.com/ocaml-multicore/eio/issues/802))\n- **Enhanced Unix process API** with optional `uid`, `gid`, and `pgid` parameters in `spawn_unix` and related functions for comprehensive process privilege management ([24c9b82](https://github.com/ocaml-multicore/eio/commit/24c9b820121837072728d1afd9e7703b91cbeab0))", "activity_summary": "Two major PRs merged completing Unix process management enhancements, plus ongoing discussions about fiber-local state inheritance", "activity": "- **Process management enhancements** completed with [Patrick Ferris](https://github.com/patricoferris) merging both setuid/setgid support ([#803](https://github.com/ocaml-multicore/eio/issues/803)) and process groups functionality ([#802](https://github.com/ocaml-multicore/eio/issues/802))\n- **Windows path operations bug** reported by [fatboyzz](https://github.com/fatboyzz) affecting `Path.mkdirs` with Permission_denied errors, with [Thomas Leonard](https://github.com/talex5) providing initial debugging guidance ([#819](https://github.com/ocaml-multicore/eio/issues/819))\n- **Buffered I/O API discussion** ongoing with [Volker Diels-Grabsch](https://github.com/vog) proposing `Buf_write.of_flow` changes, receiving feedback from [Patrick Ferris](https://github.com/patricoferris) and [Thomas Leonard](https://github.com/talex5) about design implications ([#796](https://github.com/ocaml-multicore/eio/issues/796))", "discussions_summary": "Fiber-local state inheritance across domains discussed with practical OpenTelemetry use case examples", "notable_discussions": "- **Fiber-local state inheritance** across domains explored by [Nathan Taylor](https://github.com/dijkstracula) and [Austin Theriault](https://github.com/ajbt200128) with real-world OpenTelemetry tracing scenarios, discussing whether Domain Manager should propagate fiber-local bindings to maintain request context across computational domains ([#807](https://github.com/ocaml-multicore/eio/issues/807))", "trends_summary": "Focus on Unix process control capabilities and Windows platform compatibility improvements", "emerging_trends": "- **Unix process management** reaching maturity with comprehensive privilege and process group controls now available for security-sensitive applications\n- **Platform-specific bug fixes** highlighting Windows compatibility challenges requiring targeted platform testing and error handling improvements", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Patrick Ferris led process management improvements while other contributors reported bugs and engaged in API design discussions", "contributors": "- [Patrick Ferris](https://github.com/patricoferris) implemented and merged Unix process management features including setuid/setgid fork actions ([#803](https://github.com/ocaml-multicore/eio/issues/803)) and process groups support ([#802](https://github.com/ocaml-multicore/eio/issues/802))\n- [Nathan Taylor](https://github.com/dijkstracula) initiated discussion on fiber-local state inheritance across domains with practical examples and use cases ([#807](https://github.com/ocaml-multicore/eio/issues/807))\n- [Austin Theriault](https://github.com/ajbt200128) contributed detailed analysis of OpenTelemetry integration challenges and proposed solutions for cross-domain context propagation ([#807](https://github.com/ocaml-multicore/eio/issues/807))\n- [@fatboyzz](https://github.com/fatboyzz) reported Windows-specific Path.mkdirs permission issues and provided debugging information ([#819](https://github.com/ocaml-multicore/eio/issues/819))\n- [Thomas Leonard](https://github.com/talex5) provided technical guidance on Windows debugging and Buf_write API design considerations ([#819](https://github.com/ocaml-multicore/eio/issues/819), [#796](https://github.com/ocaml-multicore/eio/issues/796))\n- [Volker Diels-Grabsch](https://github.com/vog) proposed Buf_write.of_flow API changes and engaged in design discussions about buffer lifecycle management ([#796](https://github.com/ocaml-multicore/eio/issues/796))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 33, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-08-11 to 2025-08-17", "start_commit": "62b9714f0e2ed8e72046c8e5808202e1e3ca9cd7", "end_commit": "62b9714f0e2ed8e72046c8e5808202e1e3ca9cd7", "brief_summary": "Fiber.any prioritization improvement merged and process group fork error issue opened", "new_features_summary": "Fiber.any now prioritizes returning values over external cancellation when a value is already available", "new_features": "- **Fiber.any prioritization** improvement that ensures values are returned instead of raising cancellation exceptions when a result is already available from one of the fibers ([#806](https://github.com/ocaml-multicore/eio/issues/806))", "activity_summary": "One new issue opened for process fork error handling improvement", "activity": "- **Process fork error handling** issue opened by [Patrick Ferris](https://github.com/patricoferris) requesting that `eio_unix_fork_error` should call `exit(1)` for users ([#818](https://github.com/ocaml-multicore/eio/issues/818))\n- **Fiber.any behavioral fix** merged by [Adam Cholewiński](https://github.com/adamchol) improving cancellation handling to prioritize returning available values over quick cancellation ([#806](https://github.com/ocaml-multicore/eio/issues/806))", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Patrick Ferris opened process error issue and Adam Cholewiński completed fiber cancellation improvements", "contributors": "- [Patrick Ferris](https://github.com/patricoferris) opened follow-up issue for process fork error handling requesting `eio_unix_fork_error` should exit(1) ([#818](https://github.com/ocaml-multicore/eio/issues/818))\n- [Adam Cholewiński](https://github.com/adamchol) implemented and merged the Fiber.any prioritization fix that improves cancellation behavior ([#806](https://github.com/ocaml-multicore/eio/issues/806))\n- [Thomas Leonard](https://github.com/talex5) provided code review feedback on the process groups implementation ([#802](https://github.com/ocaml-multicore/eio/issues/802))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 32, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-08-04 to 2025-08-10", "start_commit": "1dce15f1aad822089828968f5e0421b7c5f06c92", "end_commit": "82e5e1e08ae1a69ed8ab4d2af4536fe0309c878c", "brief_summary": "Fiber.any behavior improvement and Windows build fix with file cleanup", "new_features_summary": "Enhanced Fiber.any to prioritize returning values over cancellation", "new_features": "- Enhanced **Fiber.any behavior** to prioritize returning values over external cancellation when a result is already available, improving concurrent operation handling ([#806](https://github.com/ocaml-multicore/eio/issues/806))\n- Fixed **Windows build failure** by removing unused unix_cstruct.ml file that caused linker symbol resolution errors ([#817](https://github.com/ocaml-multicore/eio/issues/817))", "activity_summary": "Two PRs merged addressing fiber concurrency and Windows compatibility", "activity": "- **Fiber concurrency improvement** by [Adam Cholewiński](https://github.com/adamchol) with merged PR that modifies Fiber.any to return available values instead of immediately cancelling when parent cancellation occurs ([#806](https://github.com/ocaml-multicore/eio/issues/806))\n- **Windows platform fix** by [Thomas Leonard](https://github.com/talex5) removing problematic unix_cstruct.ml file that caused build failures, resolving issue reported by [Nathan Taylor](https://github.com/dijkstracula) ([#817](https://github.com/ocaml-multicore/eio/issues/817), [#816](https://github.com/ocaml-multicore/eio/issues/816))", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three contributors active with code changes, issue reporting, and maintenance", "contributors": "- [Adam Cholewiński](https://github.com/adamchol) implemented the Fiber.any behavior enhancement to improve concurrent operation handling ([#806](https://github.com/ocaml-multicore/eio/issues/806))\n- [Thomas Leonard](https://github.com/talex5) fixed the Windows build issue by removing the problematic unix_cstruct.ml file and provided review feedback on the fiber changes ([#817](https://github.com/ocaml-multicore/eio/issues/817))\n- [Nathan Taylor](https://github.com/dijkstracula) reported the Windows build failure issue that led to the file cleanup fix ([#816](https://github.com/ocaml-multicore/eio/issues/816))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 31, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-07-28 to 2025-08-03", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 30, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-07-21 to 2025-07-27", "start_commit": "7d6e96adf946687bf5b9f5ec1a289212e06fc746", "end_commit": "7d6e96adf946687bf5b9f5ec1a289212e06fc746", "brief_summary": "Windows build fix addressed through cleanup and issue reporting", "new_features_summary": null, "new_features": null, "activity_summary": "One PR merged fixing Windows build issue by removing unused code file", "activity": "- **Windows build issue** resolved by [Thomas Leonard](https://github.com/talex5) removing unused `unix_cstruct.ml` file that contained unresolved symbol references ([#817](https://github.com/ocaml-multicore/eio/issues/817))", "discussions_summary": "Discussion on fiber-local state inheritance in domain-spawned contexts", "notable_discussions": "- **Fiber-local state inheritance** issue raised by [Nathan Taylor](https://github.com/dijkstracula) regarding domains spawned by Domain Manager not inheriting parent fiber-local state, with design discussion on thread-safe value copying ([#807](https://github.com/ocaml-multicore/eio/issues/807))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two contributors active with issue reporting and bug fixes", "contributors": "- [Nathan Taylor](https://github.com/dijkstracula) reported Windows build failure affecting Semgrep's CI pipeline ([#816](https://github.com/ocaml-multicore/eio/issues/816)) and participated in fiber-local state inheritance discussion ([#807](https://github.com/ocaml-multicore/eio/issues/807))\n- [Thomas Leonard](https://github.com/talex5) implemented fix for Windows build issue by removing unused code file and provided technical guidance on linking behavior ([#817](https://github.com/ocaml-multicore/eio/issues/817), [#816](https://github.com/ocaml-multicore/eio/issues/816))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 29, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-07-14 to 2025-07-20", "start_commit": "301a62d90da4a3b82e668fb746fa973ae34e6ebf", "end_commit": "c83706665057e6754a64411e4ae9af6bfdb60d5b", "brief_summary": "Eio v1.3 released with FreeBSD/Windows bug fixes, test improvements, and comprehensive documentation fixes", "new_features_summary": "Test robustness improvement to skip fixed buffer tests when unavailable, documentation fixes for odoc generation", "new_features": "- **Test robustness improvement** to skip `test_alloc_fixed_or_wait` when no fixed buffers are available, preventing spurious CI failures ([#815](https://github.com/ocaml-multicore/eio/issues/815))\n- **Documentation fixes** for odoc generation including corrected cross-references in condition.mli, core interface, file operations, flow operations, and network interfaces ([#813](https://github.com/ocaml-multicore/eio/issues/813))\n- **Release preparation** adding changelog entries for v1.3 with FreeBSD, Windows, and POSIX bug fixes ([#814](https://github.com/ocaml-multicore/eio/issues/814))", "activity_summary": "Three PRs merged for v1.3 release including test fixes, documentation improvements, and release preparation", "activity": "- **Release v1.3** delivered by [Thomas Leonard](https://github.com/talex5) with comprehensive bug fixes including FreeBSD `O_RESOLVE_BENEATH` support, Windows stdin broken-pipe fixes, and POSIX `spawn_unix` error handling improvements ([#814](https://github.com/ocaml-multicore/eio/issues/814))\n- **Test infrastructure** improvements by [Thomas Leonard](https://github.com/talex5) to prevent CI failures when fixed buffers are unavailable, tested with `ulimit -l 100` constraints ([#815](https://github.com/ocaml-multicore/eio/issues/815))\n- **Documentation improvements** by [Jon Ludlam](https://github.com/jonludlam) addressing odoc_driver warnings with corrected cross-references, canonical tags, and opam file dependencies for docs-ci ([#813](https://github.com/ocaml-multicore/eio/issues/813))", "discussions_summary": "Ongoing discussion about fiber-local state inheritance in Domain Manager spawned domains", "notable_discussions": "- **Fiber-local state inheritance** discussion by [Nathan Taylor](https://github.com/dijkstracula) exploring whether domains spawned by Domain Manager should inherit parent fiber's local state, with detailed analysis of current behavior vs expected behavior ([#807](https://github.com/ocaml-multicore/eio/issues/807))", "emerging_trends": null, "trends_summary": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two active contributors delivered release and improvements with one community member providing detailed feedback", "contributors": "- [Thomas Leonard](https://github.com/talex5) merged the v1.3 release preparation ([#814](https://github.com/ocaml-multicore/eio/issues/814)) and test robustness fix ([#815](https://github.com/ocaml-multicore/eio/issues/815)), ensuring stable CI operation and comprehensive platform bug fixes\n- [Jon Ludlam](https://github.com/jonludlam) delivered documentation improvements ([#813](https://github.com/ocaml-multicore/eio/issues/813)) addressing odoc generation issues and provided detailed comments explaining canonical tag placement and cross-reference fixes\n- [Nathan Taylor](https://github.com/dijkstracula) continued detailed technical discussion on fiber-local state behavior in Domain Manager ([#807](https://github.com/ocaml-multicore/eio/issues/807)), exploring potential solutions for domain wrapper implementation", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 28, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-07-07 to 2025-07-13", "start_commit": null, "end_commit": null, "brief_summary": "Documentation issue reported and quickly resolved by community member", "new_features_summary": null, "new_features": null, "activity_summary": "Documentation improvement discussion with quick issue resolution", "activity": "- **Documentation code correction** reported by [Mohan Radhakrishnan](https://github.com/mohanr) regarding executable example in documentation that required additional context line for proper execution in utop ([#812](https://github.com/ocaml-multicore/eio/issues/812))", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Community member contributed documentation feedback", "contributors": "- [Mohan Radhakrishnan](https://github.com/mohanr) reported a documentation issue regarding code examples that don't execute properly when copied directly to utop, providing detailed error analysis and suggesting the missing context needed for proper execution ([#812](https://github.com/ocaml-multicore/eio/issues/812))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 27, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-06-30 to 2025-07-06", "start_commit": "f3cd8d57ad124851f7383d70454f01af8e3bd40f", "end_commit": "d38a31ca7fa93daca50fb4cb0978d6cd995304e8", "brief_summary": "FreeBSD compatibility improvements and POSIX error handling fixes with CI upgrades to latest OCaml 5 compiler", "new_features_summary": "FreeBSD O_RESOLVE_BENEATH support and improved POSIX error handling for filesystem operations", "new_features": "- **FreeBSD compatibility** with O_RESOLVE_BENEATH flag support enabling secure file operations ([#810](https://github.com/ocaml-multicore/eio/issues/810))\n- **POSIX error handling** improvements for `spawn_unix` wrapping `openat` calls to properly handle Unix errors ([#809](https://github.com/ocaml-multicore/eio/issues/809))\n- **Error classification** enhancement adding ENOTCAPABLE mapping to Permission_denied for better cross-platform error handling ([bb76636](https://github.com/ocaml-multicore/eio/commit/bb76636054b9da962adca6be6e835b00a4ba8cc4))\n- **CI infrastructure** upgrade to OCaml 5 latest compiler for macOS and Windows builds with updated setup-ocaml action ([161f8de](https://github.com/ocaml-multicore/eio/commit/161f8de4d4b19622ae9128c2ebf397fe7c65216b))", "activity_summary": "Two PRs opened and merged this week addressing platform compatibility and error handling issues", "activity": "- **FreeBSD platform support** implemented by [Thomas Leonard](https://github.com/talex5) enabling O_RESOLVE_BENEATH flag with necessary compiler visibility flags and CI improvements ([#810](https://github.com/ocaml-multicore/eio/issues/810))\n- **POSIX error handling** fixed by [Nathan Taylor](https://github.com/dijkstracula) ensuring spawn_unix properly wraps openat calls to prevent Unix_error leakage ([#809](https://github.com/ocaml-multicore/eio/issues/809))\n- **Test suite reliability** addressed with [Thomas Leonard](https://github.com/talex5) updating CI to use latest OCaml 5 compiler versions and resolving macOS test failures\n- **Cross-platform error mapping** enhanced with ENOTCAPABLE error code handling for improved FreeBSD and capability-based system support", "discussions_summary": "Domain manager fiber-local state inheritance and RWLock performance enhancement requests", "notable_discussions": "- **Fiber-local state inheritance** discussion by [Nathan Taylor](https://github.com/dijkstracula) regarding domains spawned by Domain Manager not inheriting parent fiber context, with [Thomas Leonard](https://github.com/talex5) suggesting custom domain manager wrappers ([#807](https://github.com/ocaml-multicore/eio/issues/807))\n- **RWLock implementation** request by [@jpx40](https://github.com/jpx40) asking for read-write lock support to improve performance compared to mutex-only synchronization ([#811](https://github.com/ocaml-multicore/eio/issues/811))", "trends_summary": "Focus on platform compatibility and robust error handling across different operating systems", "emerging_trends": "- **Platform-specific compatibility** work targeting FreeBSD and macOS with proper capability handling and compiler flag management\n- **Error handling robustness** improvements ensuring consistent Eio error types across POSIX implementations rather than raw Unix errors\n- **CI modernization** upgrading to latest OCaml compiler versions and tooling for better cross-platform testing coverage", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two main contributors fixed platform compatibility and error handling issues with collaborative review", "contributors": "- [Thomas Leonard](https://github.com/talex5) implemented FreeBSD O_RESOLVE_BENEATH support ([#810](https://github.com/ocaml-multicore/eio/issues/810)), upgraded CI to latest OCaml 5 compiler, provided guidance on fiber-local state inheritance ([#807](https://github.com/ocaml-multicore/eio/issues/807)), and reviewed POSIX error handling fixes ([#809](https://github.com/ocaml-multicore/eio/issues/809))\n- [Nathan Taylor](https://github.com/dijkstracula) fixed POSIX spawn_unix error handling ([#809](https://github.com/ocaml-multicore/eio/issues/809)), reported and investigated test suite failures ([#808](https://github.com/ocaml-multicore/eio/issues/808)), and initiated discussion about domain manager fiber-local state behavior ([#807](https://github.com/ocaml-multicore/eio/issues/807))\n- [@jpx40](https://github.com/jpx40) opened feature request for RWLock implementation to improve performance ([#811](https://github.com/ocaml-multicore/eio/issues/811))\n- [Yawar Amin](https://github.com/yawaramin) had domain manager coordination issue resolved regarding automatic multi-domain task handling ([#791](https://github.com/ocaml-multicore/eio/issues/791))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 26, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-06-23 to 2025-06-29", "start_commit": null, "end_commit": null, "brief_summary": "Discussion on fiber-local state inheritance in domain-spawned contexts", "new_features_summary": null, "new_features": null, "activity_summary": "Active technical discussion on fiber-local state behavior with domain manager", "activity": "- Technical discussion on **fiber-local state inheritance** in domain contexts by [Nathan Taylor](https://github.com/dijkstracula) with detailed examples of unexpected behavior and potential solutions for legacy codebase migration ([#807](https://github.com/ocaml-multicore/eio/issues/807))\n- [Thomas Leonard](https://github.com/talex5) provided **documentation feedback** and guidance on current behavior, pointing to test documentation and suggesting potential improvements for marking safe-to-share values ([#807](https://github.com/ocaml-multicore/eio/issues/807))", "discussions_summary": "In-depth technical discussion on fiber-local state and domain interactions", "notable_discussions": "- Comprehensive **fiber-local state inheritance** discussion exploring the behavior of `Fiber.with_binding` when used with `Domain_manager.run`, including detailed code examples and potential migration strategies for large codebases ([#807](https://github.com/ocaml-multicore/eio/issues/807))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Nathan Taylor raised technical issue with detailed examples, Thomas Leonard provided guidance", "contributors": "- [Nathan Taylor](https://github.com/dijkstracula) opened detailed issue about fiber-local state inheritance with comprehensive code examples and use case explanation for migrating large legacy codebase to Eio ([#807](https://github.com/ocaml-multicore/eio/issues/807))\n- [Thomas Leonard](https://github.com/talex5) provided technical guidance on current behavior and documentation references, suggesting potential API improvements for marking safe-to-share values ([#807](https://github.com/ocaml-multicore/eio/issues/807))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 25, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-06-16 to 2025-06-22", "start_commit": null, "end_commit": null, "brief_summary": "Issue resolution and community discussion on io_uring security concerns", "new_features_summary": null, "new_features": null, "activity_summary": "One issue closed with parallel execution debugging completed", "activity": "- [Nathan Taylor](https://github.com/dijkstracula) successfully resolved **parallel execution exception tracing** issue after receiving community assistance ([#804](https://github.com/ocaml-multicore/eio/issues/804))", "discussions_summary": "Active discussion on io_uring security implications for production use", "notable_discussions": "- [Valentin Chaboche](https://github.com/vch9) raised concerns about **io_uring security vulnerabilities** referenced in Google's security report, seeking guidance on production deployment safety and whether eio uses only secure io_uring subsets ([#797](https://github.com/ocaml-multicore/eio/issues/797))\n- [@toastal](https://github.com/toastal) contributed to debugging discussions with **OpenZFS compatibility** experiences involving runaway process issues ([#797](https://github.com/ocaml-multicore/eio/issues/797))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three community members participated in issue resolution and security discussions", "contributors": "- [Nathan Taylor](https://github.com/dijkstracula) reported and helped resolve **garbled exception traces** during parallel execution, providing detailed debugging information for the community ([#804](https://github.com/ocaml-multicore/eio/issues/804))\n- [Valentin Chaboche](https://github.com/vch9) initiated important **security discussion** regarding io_uring vulnerabilities in production environments, seeking team guidance on migration from lwt to eio ([#797](https://github.com/ocaml-multicore/eio/issues/797))\n- [@toastal](https://github.com/toastal) shared **debugging experiences** with OpenZFS and runaway process issues, contributing to the io_uring security discussion ([#797](https://github.com/ocaml-multicore/eio/issues/797))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 24, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-06-09 to 2025-06-15", "start_commit": null, "end_commit": null, "brief_summary": "Discussion on Fiber.any race condition behavior with nested operations and combine functionality", "new_features_summary": null, "new_features": null, "activity_summary": "Ongoing discussion about Fiber.any race condition behavior in nested fiber operations", "activity": "- **Fiber.any race condition** discussion continued with [Thomas Leonard](https://github.com/talex5) providing technical clarification on June 13th about the behavior change needed when using `combine` parameter vs original design assumptions ([#805](https://github.com/ocaml-multicore/eio/issues/805))", "discussions_summary": "Technical discussion about Fiber.any behavior with combine parameter in nested scenarios", "notable_discussions": "- **Race condition analysis** by [Thomas Leonard](https://github.com/talex5) explaining that original `Fiber.any` design assumed results could be thrown away, but `combine` parameter changes this assumption, requiring different cancellation behavior ([#805](https://github.com/ocaml-multicore/eio/issues/805))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Thomas Leonard provided technical analysis on Fiber.any behavior, Adam Cholewiński reported the issue", "contributors": "- [Thomas Leonard](https://github.com/talex5) provided detailed technical analysis on June 13th explaining the behavioral differences between original `Fiber.any` design and the new `combine` parameter functionality ([#805](https://github.com/ocaml-multicore/eio/issues/805))\n- [Adam Cholewiński](https://github.com/adamchol) reported the original race condition issue with nested `Fiber.any` operations and had submitted a related PR ([#805](https://github.com/ocaml-multicore/eio/issues/805), [#806](https://github.com/ocaml-multicore/eio/pull/806))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 23, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-06-02 to 2025-06-08", "start_commit": null, "end_commit": null, "brief_summary": "Windows stdin pipe handling discussion emerged from Semgrep team requesting version bump for existing fix", "new_features_summary": null, "new_features": null, "activity_summary": "Community discussion around Windows pipe handling bug fix and version release timeline", "activity": "- Windows **stdin pipe handling** issue received community attention with [Nathan Taylor](https://github.com/dijkstracula) from Semgrep inquiring about version bump timeline for existing fix ([#792](https://github.com/ocaml-multicore/eio/issues/792))", "discussions_summary": "Semgrep team requesting timeline for version bump containing Windows pipe handling fix", "notable_discussions": "- [Nathan Taylor](https://github.com/dijkstracula) from Semgrep requested update on version bump timeline for Windows **pipe handling fix** affecting their build process ([#792](https://github.com/ocaml-multicore/eio/issues/792))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Nathan Taylor from Semgrep provided feedback on Windows issue affecting production builds", "contributors": "- [Nathan Taylor](https://github.com/dijkstracula) from Semgrep commented on Windows **pipe handling issue** requesting version bump timeline for existing fix affecting their production builds ([#792](https://github.com/ocaml-multicore/eio/issues/792))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 22, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-05-26 to 2025-06-01", "start_commit": "82e5e1e08ae1a69ed8ab4d2af4536fe0309c878c", "end_commit": "82e5e1e08ae1a69ed8ab4d2af4536fe0309c878c", "brief_summary": "Fiber.any behavior improvements and fiber-local state discussion with domain manager integration", "new_features_summary": "Enhanced Fiber.any to prioritize returning computed values over quick cancellation when combine function is used", "new_features": "- **Enhanced Fiber.any cancellation behavior** by [Adam Cholewiński](https://github.com/adamchol) to prioritize returning computed values over quick cancellation when using the `combine` argument ([#806](https://github.com/ocaml-multicore/eio/pull/806))\n- **Test case updates** demonstrating the new behavior where Fiber.any returns values despite parent cancellation ([82e5e1e](https://github.com/ocaml-multicore/eio/commit/82e5e1e08ae1a69ed8ab4d2af4536fe0309c878c))", "activity_summary": "One PR addressing nested Fiber.any race conditions was opened and later merged, alongside two issues exploring fiber-local state and exception handling", "activity": "- **Fiber.any race condition fix** opened by [Adam Cholewiński](https://github.com/adamchol) addressing nested Fiber.any behavior where computed values were lost due to cancellation ([#806](https://github.com/ocaml-multicore/eio/pull/806))\n- **Domain manager fiber-local state inheritance** investigation by [Nathan Taylor](https://github.com/dijkstracula) revealing that domains spawned by Domain Manager do not inherit parent fiber-local state, raising questions about expected behavior ([#807](https://github.com/ocaml-multicore/eio/issues/807))\n- **Exception trace garbling** debugging discussion by [Nathan Taylor](https://github.com/dijkstracula) regarding incorrect exception types appearing in stack traces during parallel execution ([#804](https://github.com/ocaml-multicore/eio/issues/804))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on concurrent execution edge cases and domain integration challenges", "emerging_trends": "- **Concurrent execution refinements** with attention to edge cases in fiber cancellation and value preservation during parallel operations\n- **Domain integration complexity** highlighted by fiber-local state inheritance issues when using Domain Manager for spawning domains\n- **Debugging challenges** in parallel execution environments where exception traces become garbled or misattributed", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Adam Cholewiński implemented fiber improvements while Nathan Taylor investigated domain and exception handling issues", "contributors": "- [Adam Cholewiński](https://github.com/adamchol) implemented the Fiber.any cancellation behavior improvement to preserve computed values when using combine functions ([#806](https://github.com/ocaml-multicore/eio/pull/806)) and reported the original nested Fiber.any race condition ([#805](https://github.com/ocaml-multicore/eio/issues/805))\n- [Nathan Taylor](https://github.com/dijkstracula) opened detailed issues investigating fiber-local state inheritance problems with Domain Manager ([#807](https://github.com/ocaml-multicore/eio/issues/807)) and exception trace garbling during parallel execution ([#804](https://github.com/ocaml-multicore/eio/issues/804))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 21, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-05-19 to 2025-05-25", "start_commit": "f6dac4a8be61db6bb2c30dbc56b4654fad41347f", "end_commit": "f6dac4a8be61db6bb2c30dbc56b4654fad41347f", "brief_summary": "Process control enhancements introduced with new process groups support and related user management features in development.", "new_features_summary": "Process groups support added to unix backends with new setpgid functionality for child process management.", "new_features": "- **Process groups support** added to unix backends with new `setpgid` function allowing child processes to be placed in specific process groups or new groups [f6dac4a](https://github.com/ocaml-multicore/eio/commit/f6dac4a8be61db6bb2c30dbc56b4654fad41347f)\n- **Enhanced process spawning API** with optional `pgid` parameter added to `spawn_unix` and related functions enabling process group control during child creation [f6dac4a](https://github.com/ocaml-multicore/eio/commit/f6dac4a8be61db6bb2c30dbc56b4654fad41347f)", "activity_summary": "Two new PRs opened for process control features while community discussions address exception tracing issues in parallel execution.", "activity": "- **Two new PRs opened** by [Patrick Ferris](https://github.com/patricoferris) for process control enhancements: process groups implementation ([#802](https://github.com/ocaml-multicore/eio/issues/802)) and setuid/setgid fork actions ([#803](https://github.com/ocaml-multicore/eio/issues/803))\n- **Process management focus** with [Patrick Ferris](https://github.com/patricoferris) developing comprehensive process control features including user/group switching capabilities for child processes\n- **Long-standing mutex wrapper PR** ([#716](https://github.com/ocaml-multicore/eio/issues/716)) by [Yawar Amin](https://github.com/yawaramin) closed after remaining in draft state since March 2024", "discussions_summary": "Community troubleshooting garbled exception traces during parallel execution with multi-domain parallelism.", "notable_discussions": "- **Exception tracing investigation** by [Nathan Taylor](https://github.com/dijkstracula) seeking help with garbled stack traces during parallel execution where wrong exception types appear in backtraces ([#804](https://github.com/ocaml-multicore/eio/issues/804))\n- **Technical guidance provided** by [Thomas Leonard](https://github.com/talex5) explaining that garbled traces typically result from improper exception re-raising without preserving backtraces using `Printexc.get_raw_backtrace`", "trends_summary": "Focus on process control and system-level features with enhanced unix backend capabilities for process management.", "emerging_trends": "- **Process control development** with [Patrick Ferris](https://github.com/patricoferris) implementing comprehensive process management features including process groups and user/group switching capabilities\n- **System-level feature enhancement** trend showing continued expansion of unix backend capabilities for production deployment scenarios\n- **Community support patterns** with experienced maintainers like [Thomas Leonard](https://github.com/talex5) providing detailed technical guidance for complex parallelism issues", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Patrick Ferris led process control development while Nathan Taylor engaged community support and Yawar Amin closed draft work.", "contributors": "- [Patrick Ferris](https://github.com/patricoferris) implemented process groups support ([f6dac4a](https://github.com/ocaml-multicore/eio/commit/f6dac4a8be61db6bb2c30dbc56b4654fad41347f)) and opened two PRs for process control features ([#802](https://github.com/ocaml-multicore/eio/issues/802), [#803](https://github.com/ocaml-multicore/eio/issues/803))\n- [Nathan Taylor](https://github.com/dijkstracula) opened issue requesting help with garbled exception traces during parallel execution in legacy codebase migration ([#804](https://github.com/ocaml-multicore/eio/issues/804))\n- [Thomas Leonard](https://github.com/talex5) provided technical guidance on exception handling and backtrace preservation in the community discussion ([#804](https://github.com/ocaml-multicore/eio/issues/804))\n- [Yawar Amin](https://github.com/yawaramin) closed long-standing draft PR for mutex wrapper higher-order functions after over a year of inactivity ([#716](https://github.com/ocaml-multicore/eio/issues/716))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 20, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-05-12 to 2025-05-18", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 19, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-05-05 to 2025-05-11", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 18, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-04-28 to 2025-05-04", "start_commit": null, "end_commit": null, "brief_summary": "Investigation into Uring sharing between parent and child processes reported", "new_features_summary": null, "new_features": null, "activity_summary": "Discussion of io_uring process forking issues and potential solutions", "activity": "- **Process forking bug** reported by [Patrick Ferris](https://github.com/patricoferris) involving Uring sharing between parent and child processes causing hangs in test suites ([#801](https://github.com/ocaml-multicore/eio/issues/801))\n- **Technical investigation** revealed submission queue corruption and potential solutions including pthread_atfork handlers discussed by [Thomas Leonard](https://github.com/talex5) and [Anil Madhavapeddy](https://github.com/avsm) ([#801](https://github.com/ocaml-multicore/eio/issues/801))", "discussions_summary": "Technical discussion on io_uring invalidation strategies for child processes", "notable_discussions": "- **Fork safety discussion** centered on preventing child processes from inheriting parent io_uring resources, with [Thomas Leonard](https://github.com/talex5) suggesting child processes should avoid parent resources and use Unix._exit, while [Anil Madhavapeddy](https://github.com/avsm) proposed pthread_atfork handlers to invalidate rings in child processes ([#801](https://github.com/ocaml-multicore/eio/issues/801))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three contributors participated in technical debugging discussion", "contributors": "- [Patrick Ferris](https://github.com/patricoferris) reported a detailed bug involving Uring sharing between parent and child processes, providing reproducible test case and debugging findings ([#801](https://github.com/ocaml-multicore/eio/issues/801))\n- [Thomas Leonard](https://github.com/talex5) provided technical analysis suggesting child processes should avoid parent resources and use Unix._exit for proper cleanup ([#801](https://github.com/ocaml-multicore/eio/issues/801))\n- [Anil Madhavapeddy](https://github.com/avsm) suggested implementing pthread_atfork handlers to invalidate ring resources in child processes as a systematic solution ([#801](https://github.com/ocaml-multicore/eio/issues/801))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 17, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-04-21 to 2025-04-27", "start_commit": null, "end_commit": null, "brief_summary": "Two new issues opened covering process sharing and API enhancement requests", "new_features_summary": null, "new_features": null, "activity_summary": "Two new issues opened addressing process sharing concerns and API enhancement requests", "activity": "- [Patrick Ferris](https://github.com/patricoferris) reported **Uring sharing issue** between parent and child processes when using OUnit2 fork behavior ([#801](https://github.com/ocaml-multicore/eio/issues/801)), with detailed debugging findings and minimal reproduction case\n- [Nathan Taylor](https://github.com/dijkstracula) requested **API predicate** to check if code is running under an event loop to support mixed Parmap/Eio codebases during migration ([#800](https://github.com/ocaml-multicore/eio/issues/800))\n- [Thomas Leonard](https://github.com/talex5) provided debugging guidance and confirmed the API request seems reasonable, noting potential future compatibility considerations with typed effects", "discussions_summary": "Active technical discussions on process sharing challenges and API design considerations", "notable_discussions": "- **Process forking with Uring** - [Patrick Ferris](https://github.com/patricoferris) and [Thomas Leonard](https://github.com/talex5) collaborated on debugging Uring submission queue corruption when using Unix.fork with OUnit2 ([#801](https://github.com/ocaml-multicore/eio/issues/801))\n- **Event loop detection API** - [Nathan Taylor](https://github.com/dijkstracula) and [Thomas Leonard](https://github.com/talex5) discussed approaches for detecting Eio context during codebase migration, including potential future compatibility issues with thread-local storage and typed effects ([#800](https://github.com/ocaml-multicore/eio/issues/800))", "trends_summary": "Focus on process management challenges and migration support for existing codebases", "emerging_trends": "- **Process isolation concerns** - Issues with sharing Uring resources across process boundaries highlighting need for better documentation or API improvements around process management\n- **Migration tooling requests** - Demand for utilities to support gradual migration from existing concurrency models to Eio's effects-based approach", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three contributors engaged in technical debugging and API design discussions", "contributors": "- [Patrick Ferris](https://github.com/patricoferris) opened detailed bug report with debugging findings and reproduction cases for Uring process sharing issues ([#801](https://github.com/ocaml-multicore/eio/issues/801))\n- [Nathan Taylor](https://github.com/dijkstracula) requested new API functionality to support mixed-paradigm codebase migration scenarios ([#800](https://github.com/ocaml-multicore/eio/issues/800))\n- [Thomas Leonard](https://github.com/talex5) provided technical guidance on debugging approaches and evaluated API enhancement proposals with implementation considerations ([#800](https://github.com/ocaml-multicore/eio/issues/800), [#801](https://github.com/ocaml-multicore/eio/issues/801))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 16, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-04-14 to 2025-04-20", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 15, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-04-07 to 2025-04-13", "start_commit": null, "end_commit": null, "brief_summary": "Issue discussion about Eio.Buf_read.end_of_input behavior in SCGI parsing scenarios resolved with guidance from maintainer.", "new_features_summary": null, "new_features": null, "activity_summary": "Single issue opened and resolved regarding buffered input parsing behavior in networking scenarios.", "activity": "- Issue opened by [MarcC](https://github.com/MarcCoquand) regarding **Eio.Buf_read.end_of_input hanging** when no more buffered bytes remain during SCGI parsing, resolved with guidance from [Thomas Leonard](https://github.com/talex5) on proper socket handling and alternative parsing approaches ([#799](https://github.com/ocaml-multicore/eio/issues/799))", "discussions_summary": "Technical discussion about proper handling of end-of-input detection in network parsing scenarios.", "notable_discussions": "- **Network parsing guidance** discussion between [MarcC](https://github.com/MarcCoquand) and [Thomas Leonard](https://github.com/talex5) about using `Flow.shutdown` for proper end-of-input signaling and `Buf_read.seq` for sequence parsing in SCGI protocol implementation ([#799](https://github.com/ocaml-multicore/eio/issues/799))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "MarcC reported networking issue and Thomas Leonard provided technical guidance and resolution.", "contributors": "- [MarcC](https://github.com/MarcCoquand) reported **buffered input parsing issue** with detailed minimal reproduction case for SCGI parser implementation and engaged in technical discussion about proper networking approaches ([#799](https://github.com/ocaml-multicore/eio/issues/799))\n- [Thomas Leonard](https://github.com/talex5) provided **technical guidance** and resolution explaining proper socket shutdown handling and alternative parsing patterns for network protocols ([#799](https://github.com/ocaml-multicore/eio/issues/799))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 14, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-03-31 to 2025-04-06", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": "Community assistance provided for socket options implementation guidance", "notable_discussions": "- [Robin Björklin](https://github.com/rbjorklin) provided guidance on socket options implementation using `Eio_unix.Net.fd` and `Eio_unix.Fd.use` for [#322](https://github.com/ocaml-multicore/eio/issues/322)", "trends_summary": null, "emerging_trends": null, "issues_summary": "Socket options support remains available as good first issue for new contributors", "good_first_issues": "- **Socket options support** enhancement requested by [Antonio Nuno Monteiro](https://github.com/anmonteiro) seeking API for setting TCP_NODELAY and similar options on stream sockets ([#322](https://github.com/ocaml-multicore/eio/issues/322))", "contributors_summary": "Robin Björklin provided technical guidance on existing socket options implementation", "contributors": "- [Robin Björklin](https://github.com/rbjorklin) contributed technical guidance by clarifying the current approach for socket options using `Eio_unix.Net.fd` and `Eio_unix.Fd.use` APIs ([#322](https://github.com/ocaml-multicore/eio/issues/322))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 13, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-03-24 to 2025-03-30", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 12, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-03-17 to 2025-03-23", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 11, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-03-10 to 2025-03-16", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 10, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-03-03 to 2025-03-09", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 9, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-02-24 to 2025-03-02", "start_commit": null, "end_commit": null, "brief_summary": "Two technical issues opened discussing io_uring security concerns and /proc file handling limitations", "new_features_summary": null, "new_features": null, "activity_summary": "Two technical issues opened focusing on io_uring security considerations and file system edge cases", "activity": "- **io_uring security discussion** initiated by [Valentin Chaboche](https://github.com/vch9) regarding Google's security report and Eio's approach to io_uring usage ([#797](https://github.com/ocaml-multicore/eio/issues/797))\n- **Proc filesystem limitation** reported by [@copy](https://github.com/copy) where `Eio.Path.load` fails on /proc files that don't report size in stat ([#798](https://github.com/ocaml-multicore/eio/issues/798))", "discussions_summary": "Technical discussions on io_uring security implications and potential solutions for /proc file handling", "notable_discussions": "- **io_uring security considerations** with [Thomas Leonard](https://github.com/talex5) and [Anil Madhavapeddy](https://github.com/avsm) discussing safety of io_uring usage in Eio, ZFS compatibility issues, and backend configuration options ([#797](https://github.com/ocaml-multicore/eio/issues/797))\n- **File system edge case solutions** with [Patrick Ferris](https://github.com/patricoferris) and [Thomas Leonard](https://github.com/talex5) exploring approaches to handle /proc files and alternative implementations for `Eio.Path.load` ([#798](https://github.com/ocaml-multicore/eio/issues/798))", "trends_summary": "Focus on production deployment considerations including security and file system compatibility", "emerging_trends": "- **Production readiness concerns** emerging around io_uring security implications and real-world deployment challenges\n- **File system compatibility** discussions highlighting need for robust handling of special filesystems like /proc and ZFS", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Five contributors engaged in technical discussions about security and file system compatibility", "contributors": "- [Valentin Chaboche](https://github.com/vch9) opened discussion about io_uring security concerns when migrating from lwt to eio ([#797](https://github.com/ocaml-multicore/eio/issues/797))\n- [@copy](https://github.com/copy) reported `/proc` file loading limitation and suggested implementation improvements ([#798](https://github.com/ocaml-multicore/eio/issues/798))\n- [Thomas Leonard](https://github.com/talex5) provided technical guidance on io_uring safety, backend configuration, and proposed solutions for /proc file handling ([#797](https://github.com/ocaml-multicore/eio/issues/797), [#798](https://github.com/ocaml-multicore/eio/issues/798))\n- [Anil Madhavapeddy](https://github.com/avsm) shared production experience with ZFS issues and suggested making io_uring non-default ([#797](https://github.com/ocaml-multicore/eio/issues/797))\n- [Patrick Ferris](https://github.com/patricoferris) analyzed the /proc file issue and provided workaround code examples ([#798](https://github.com/ocaml-multicore/eio/issues/798))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 8, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-02-17 to 2025-02-23", "start_commit": null, "end_commit": null, "brief_summary": "PR for Windows test suite support closed without merging", "new_features_summary": null, "new_features": null, "activity_summary": "One PR closed for Windows test suite enhancement", "activity": "- **Windows test suite** enhancement by [Richard Chukwu](https://github.com/RichardChukwu) closed without merging after encountering stack overflow issues in MDX tests ([#773](https://github.com/ocaml-multicore/eio/issues/773))", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Richard Chukwu worked on Windows test suite compatibility", "contributors": "- [Richard Chukwu](https://github.com/RichardChukwu) attempted to enable the main test suite on Windows by removing conditional compilation barriers, identifying stack overflow issues in MDX tests that prevented the PR from being merged ([#773](https://github.com/ocaml-multicore/eio/issues/773))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 7, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-02-10 to 2025-02-16", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": null, "contributors": null, "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 6, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-02-03 to 2025-02-09", "start_commit": null, "end_commit": null, "brief_summary": "New buffered serialization API proposal and ongoing stream functionality enhancements", "new_features_summary": null, "new_features": null, "activity_summary": "One new PR opened for buffered flow serialization with ongoing stream API enhancement discussions", "activity": "- **New buffered serialization API** proposed by [Volker Diels-Grabsch](https://github.com/vog) introducing `Buf_write.of_flow` for network protocol serialization that outlives single function invocations ([#796](https://github.com/ocaml-multicore/eio/issues/796))\n- **Stream API enhancements** under development by [MONTILLET Xavier](https://github.com/xavierm02) adding non-blocking operations including `add_nonblocking`, `capacity`, and `is_full` functions with detailed discussions about completeness and thread safety ([#790](https://github.com/ocaml-multicore/eio/issues/790))", "discussions_summary": "Detailed technical discussion about stream API completeness and thread-safe non-blocking operations", "notable_discussions": "- **Stream API design philosophy** discussion by [MONTILLET Xavier](https://github.com/xavierm02) exploring mathematical completeness versus practical implementation concerns, covering lock-holding operations and memory-bounded server scenarios ([#790](https://github.com/ocaml-multicore/eio/issues/790))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two active contributors proposing API enhancements with detailed technical discussions", "contributors": "- [Volker Diels-Grabsch](https://github.com/vog) opened new PR for buffered flow serialization API addressing network protocol use cases and referencing PostgreSQL driver implementation challenges ([#796](https://github.com/ocaml-multicore/eio/issues/796))\n- [MONTILLET Xavier](https://github.com/xavierm02) continued development and provided extensive technical discussion about stream operations completeness, thread safety concerns, and practical use cases for asynchronous callbacks ([#790](https://github.com/ocaml-multicore/eio/issues/790))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 5, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-01-27 to 2025-02-02", "start_commit": "8f7f82d2c12076af8e9b8b365c58ebadaa963b8c", "end_commit": "8f7f82d2c12076af8e9b8b365c58ebadaa963b8c", "brief_summary": "Windows platform fixes for stdin handling and OCaml version bump to 5.2", "new_features_summary": "Fixed Windows stdin blocking and broken pipe exceptions, removed legacy cstruct stubs", "new_features": "- Fixed **Windows stdin blocking** issue where reading from stdin would block the entire domain by adding `await_readable` calls before file descriptor operations ([#795](https://github.com/ocaml-multicore/eio/pull/795))\n- Resolved **broken pipe exceptions** on Windows when reading stdin from pipe commands by replacing `Unix_cstruct.read` with `Unix.read_bigarray` ([#795](https://github.com/ocaml-multicore/eio/pull/795))\n- **Removed legacy cstruct stubs** file `eio_windows_cstruct_stubs.c` (149 lines deleted) and replaced with direct Unix functions available since OCaml 5.2 ([#795](https://github.com/ocaml-multicore/eio/pull/795))\n- **Minimum OCaml version bumped** from 5.1.0 to 5.2.0 to support the new Unix.read_bigarray and Unix.write_bigarray functions ([#795](https://github.com/ocaml-multicore/eio/pull/795))", "activity_summary": "Single Windows platform improvement PR merged addressing two critical stdin issues", "activity": "- **Windows platform bug fixes** merged by [Benoit](https://github.com/bdodrem) addressing stdin blocking and broken pipe issues that affected Windows users ([#795](https://github.com/ocaml-multicore/eio/pull/795))\n- **Code review and merge** conducted by [Thomas Leonard](https://github.com/talex5) with appreciation for the contribution and coordination with [Patrick Ferris](https://github.com/patricoferris) who originally added the cstruct stubs ([#795](https://github.com/ocaml-multicore/eio/pull/795))\n- **Two related issues closed** that were originally reported by [Benoit](https://github.com/bdodrem) documenting the Windows stdin problems ([#792](https://github.com/ocaml-multicore/eio/issues/792), [#793](https://github.com/ocaml-multicore/eio/issues/793))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Platform-specific improvements and modernization by leveraging newer OCaml features", "emerging_trends": "- **Platform-specific improvements** focus with targeted fixes for Windows compatibility issues that don't affect other platforms\n- **OCaml version modernization** trend continuing with bumping minimum required version to leverage newer standard library functions like `Unix.read_bigarray`\n- **Code simplification** through removal of custom C stubs when equivalent functionality becomes available in the OCaml standard library", "issues_summary": null, "good_first_issues": null, "contributors_summary": "New contributor Benoit provided Windows fixes, reviewed by core maintainer Thomas Leonard", "contributors": "- [Benoit](https://github.com/bdodrem) implemented comprehensive Windows stdin fixes addressing blocking domain and broken pipe issues, contributed 21 additions and 158 deletions across 7 files ([#795](https://github.com/ocaml-multicore/eio/pull/795))\n- [Thomas Leonard](https://github.com/talex5) provided code review and merged the Windows fixes, coordinated with original cstruct stubs author, and handled the OCaml version bump requirements ([#795](https://github.com/ocaml-multicore/eio/pull/795))\n- [Patrick Ferris](https://github.com/patricoferris) acknowledged as the original author of the cstruct stubs file that was replaced in this modernization effort", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 4, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-01-20 to 2025-01-26", "start_commit": null, "end_commit": null, "brief_summary": "Windows platform improvements with stdin and pipe fixes submitted via PR #795", "new_features_summary": "Windows stdin blocking and broken pipe exceptions fixed with modernized Unix bigarray functions", "new_features": "- Fixed **Windows stdin blocking** issue by adding proper `await_readable` calls before file descriptor reads ([#795](https://github.com/ocaml-multicore/eio/issues/795))\n- Resolved **broken pipe exceptions** on Windows when reading from stdin in pipe commands by replacing `Unix_cstruct.read` with `Unix.read_bigarray` ([#795](https://github.com/ocaml-multicore/eio/issues/795))\n- **Modernized Windows I/O implementation** by removing custom C stubs and utilizing OCaml 5.2's native `Unix.read_bigarray` and `Unix.write_bigarray` functions ([#795](https://github.com/ocaml-multicore/eio/issues/795))\n- Added **new `write_cstruct` function** to Windows low-level API for consistent Cstruct-based write operations ([#795](https://github.com/ocaml-multicore/eio/issues/795))", "activity_summary": "Single comprehensive PR addressing multiple Windows platform issues opened with detailed implementation", "activity": "- **Windows platform fixes** opened by [Benoit](https://github.com/bdodrem) addressing both stdin blocking ([#793](https://github.com/ocaml-multicore/eio/issues/793)) and broken pipe exceptions ([#792](https://github.com/ocaml-multicore/eio/issues/792)) with comprehensive implementation removing 149 lines of C stubs and adding 21 lines of OCaml code ([#795](https://github.com/ocaml-multicore/eio/issues/795))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Platform-specific improvements using OCaml 5.2 features to reduce C dependency", "emerging_trends": "- **Platform modernization** trend toward leveraging newer OCaml runtime features to eliminate custom C implementations, as seen with the Windows I/O stack migration to native Unix bigarray functions\n- **Cross-platform stability** focus with comprehensive Windows support improvements addressing real-world usage scenarios like pipe command integration", "issues_summary": "Windows stdin pipe issue marked as good first issue available for new contributors", "good_first_issues": "- **Windows broken pipe exception** when reading stdin from pipe commands, affects MINGW64 users and provides clear reproduction steps ([#792](https://github.com/ocaml-multicore/eio/issues/792))", "contributors_summary": "Benoit submitted comprehensive Windows fixes, Thomas Leonard provided review guidance and merge coordination", "contributors": "- [Benoit](https://github.com/bdodrem) implemented comprehensive Windows I/O fixes addressing stdin blocking and pipe exceptions, created detailed patch proposal in issue comments, and opened pull request with 7 file changes removing C stubs ([#792](https://github.com/ocaml-multicore/eio/issues/792), [#795](https://github.com/ocaml-multicore/eio/issues/795))\n- [Thomas Leonard](https://github.com/talex5) provided review coordination and guidance on pull request process, offering to handle PR creation if needed for the Windows fixes ([#792](https://github.com/ocaml-multicore/eio/issues/792))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 3, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-01-13 to 2025-01-19", "start_commit": "4a19b2eea9fe770d8d5586605d93cdd38f4bd957", "end_commit": "c78db1a7578585115100dd840374a6d0c64b50e0", "brief_summary": "Documentation improvements merged with updated examples and removal of deprecated references", "new_features_summary": "Documentation refinements including updated Executor_pool examples and enhanced Net.run_server guidance", "new_features": "- Updated **documentation examples** for Executor_pool with consistent pool creation patterns and streamlined code ([#794](https://github.com/ocaml-multicore/eio/issues/794))\n- Enhanced **Net.run_server documentation** with explicit guidance on using Executor_pool for CPU-intensive services ([#794](https://github.com/ocaml-multicore/eio/issues/794))\n- Replaced **outdated example references** with current cohttp-eio and capnp-rpc examples in the README ([#794](https://github.com/ocaml-multicore/eio/issues/794))\n- Simplified **switch examples** with more typical and clear usage patterns ([#794](https://github.com/ocaml-multicore/eio/issues/794))", "activity_summary": "Single documentation PR merged addressing example consistency and removing outdated references", "activity": "- **Documentation refinements** merged by [Thomas Leonard](https://github.com/talex5) removing references to unstable projects like Meio and outdated \"please try porting\" requests ([#794](https://github.com/ocaml-multicore/eio/issues/794))\n- **Windows-specific issues** reported by [Benoit](https://github.com/bdodrem) including stdin pipe \"broken pipe\" exception ([#792](https://github.com/ocaml-multicore/eio/issues/792)) and domain blocking during stdin reads ([#793](https://github.com/ocaml-multicore/eio/issues/793))\n- **Discussion continued** between [Yawar Amin](https://github.com/yawaramin) and [Thomas Leonard](https://github.com/talex5) regarding automatic multi-domain execution and domain manager coordination ([#791](https://github.com/ocaml-multicore/eio/issues/791))", "discussions_summary": "Technical discussion on domain management and Windows-specific I/O issues with implementation guidance", "notable_discussions": "- **Multi-domain coordination** discussion between [Yawar Amin](https://github.com/yawaramin) and [Thomas Leonard](https://github.com/talex5) about automatically running parallel tasks without explicit domain manager usage, with insights on OCaml GC synchronization challenges ([#791](https://github.com/ocaml-multicore/eio/issues/791))\n- **Windows I/O issues** identified by [Benoit](https://github.com/bdodrem) with [Thomas Leonard](https://github.com/talex5) providing technical guidance on implementing Windows-specific checks similar to POSIX implementations ([#792](https://github.com/ocaml-multicore/eio/issues/792), [#793](https://github.com/ocaml-multicore/eio/issues/793))", "trends_summary": "Focus on platform-specific compatibility and improving documentation clarity", "emerging_trends": "- **Platform-specific improvements** with Windows I/O handling receiving attention for stdin pipe operations and domain blocking issues\n- **Documentation maturity** as the project moves from experimental status to stable with updated examples and removal of \"please try porting\" language\n- **Performance optimization guidance** with clearer direction on when to use Executor_pool versus domain manager for CPU-intensive workloads", "issues_summary": "One Windows-specific good first issue for broken pipe exception handling", "good_first_issues": "- **Windows stdin pipe handling** needs implementation of proper error handling for broken pipe exceptions when reading from piped commands ([#792](https://github.com/ocaml-multicore/eio/issues/792))", "contributors_summary": "Thomas Leonard merged documentation improvements while Windows issues were reported and discussed", "contributors": "- [Thomas Leonard](https://github.com/talex5) authored and merged documentation improvements removing outdated references and updating examples ([#794](https://github.com/ocaml-multicore/eio/issues/794)), provided technical guidance on Windows I/O implementations ([#792](https://github.com/ocaml-multicore/eio/issues/792), [#793](https://github.com/ocaml-multicore/eio/issues/793)), and participated in multi-domain design discussions ([#791](https://github.com/ocaml-multicore/eio/issues/791))\n- [Benoit](https://github.com/bdodrem) reported two Windows-specific issues with stdin handling including broken pipe exceptions ([#792](https://github.com/ocaml-multicore/eio/issues/792)) and domain blocking behavior ([#793](https://github.com/ocaml-multicore/eio/issues/793))\n- [Yawar Amin](https://github.com/yawaramin) continued discussion on automatic multi-domain execution design, providing detailed questions about domain management and GC performance implications ([#791](https://github.com/ocaml-multicore/eio/issues/791))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 2, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2025-01-06 to 2025-01-12", "start_commit": null, "end_commit": null, "brief_summary": "Two Windows-specific issues opened regarding stdin handling bugs", "new_features_summary": null, "new_features": null, "activity_summary": "Two Windows stdin handling issues opened by new contributor", "activity": "- **Windows stdin handling** issues reported by [Benoit](https://github.com/bdodrem) including broken pipe exception when reading from piped commands ([#792](https://github.com/ocaml-multicore/eio/issues/792)) and domain blocking behavior during stdin reads with timeouts ([#793](https://github.com/ocaml-multicore/eio/issues/793))\n- **Domain coordination** discussion continued around [#791](https://github.com/ocaml-multicore/eio/issues/791) with [Thomas Leonard](https://github.com/talex5) providing insights on domain management best practices and design considerations for multi-domain applications", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on Windows platform compatibility and domain management patterns", "emerging_trends": "- **Windows platform support** receiving attention with specific bug reports for stdin handling and pipe operations\n- **Domain management** design patterns being discussed for better coordination between libraries using eio", "issues_summary": "One Windows-related good first issue available for new contributors", "good_first_issues": "- **Windows broken pipe fix** labeled as good first issue involves replacing `Unix_cstruct.read` with `Unix.read_bigarray` in Windows low-level implementation ([#792](https://github.com/ocaml-multicore/eio/issues/792))", "contributors_summary": "New contributor opened Windows issues, maintainer provided technical guidance", "contributors": "- [Benoit](https://github.com/bdodrem) joined as new contributor reporting two Windows-specific stdin handling bugs with detailed reproduction steps and proposed fix for the broken pipe issue ([#792](https://github.com/ocaml-multicore/eio/issues/792), [#793](https://github.com/ocaml-multicore/eio/issues/793))\n- [Thomas Leonard](https://github.com/talex5) provided technical guidance on domain management design patterns and acknowledged the Windows broken pipe issue as similar to a historical Lwt bug ([#791](https://github.com/ocaml-multicore/eio/issues/791), [#792](https://github.com/ocaml-multicore/eio/issues/792))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 1, "year": 2025, "repo": "ocaml-multicore/eio", "week_range": "2024-12-30 to 2025-01-05", "start_commit": null, "end_commit": null, "brief_summary": "Discussion continued on domain manager coordination for multi-domain applications", "new_features_summary": null, "new_features": null, "activity_summary": "Issue discussion about domain manager coordination with prototype development", "activity": "- **Domain manager coordination** discussion continued by [Yawar Amin](https://github.com/yawaramin) with detailed prototype implementation for automatic multi-domain task execution and parallelized task runner ([#791](https://github.com/ocaml-multicore/eio/issues/791))", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Yawar Amin advanced domain manager coordination with prototype implementation", "contributors": "- [Yawar Amin](https://github.com/yawaramin) provided detailed prototype implementation for domain coordination including parallelized task runner with divide-and-conquer algorithm and float array summation example ([#791](https://github.com/ocaml-multicore/eio/issues/791))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 52, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-12-23 to 2024-12-29", "start_commit": null, "end_commit": null, "brief_summary": "New issue opened on multicore coordination design with ongoing type safety discussion", "new_features_summary": null, "new_features": null, "activity_summary": "Domain manager coordination issue opened with ongoing type safety discussion", "activity": "- [Yawar Amin](https://github.com/yawaramin) opened issue on **automatically running multi domains** and parallel tasks instead of using domain manager directly ([#791](https://github.com/ocaml-multicore/eio/issues/791))\n- Ongoing discussion about **Eio.Resource type safety** by [Mathieu Barbin](https://github.com/mbarbin) with exploratory object-based approach ([#774](https://github.com/ocaml-multicore/eio/issues/774))", "discussions_summary": "Two substantive discussions on multicore coordination and type safety improvements", "notable_discussions": "- **Domain coordination design** discussion by [Yawar Amin](https://github.com/yawaramin) proposing `run_multi` API to coordinate domain pools across app components ([#791](https://github.com/ocaml-multicore/eio/issues/791))\n- **Type safety improvements** discussion by [Mathieu Barbin](https://github.com/mbarbin) exploring object-based alternatives to address Obj.magic robustness concerns in Eio.Resource ([#774](https://github.com/ocaml-multicore/eio/issues/774))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two contributors engaged in design discussions around multicore architecture and type safety", "contributors": "- [Yawar Amin](https://github.com/yawaramin) opened design issue proposing automatic domain coordination and provided detailed `run_multi` API proposal ([#791](https://github.com/ocaml-multicore/eio/issues/791))\n- [Mathieu Barbin](https://github.com/mbarbin) continued type safety discussion and shared exploratory object-based implementation approach ([#774](https://github.com/ocaml-multicore/eio/issues/774))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 51, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-12-16 to 2024-12-22", "start_commit": null, "end_commit": null, "brief_summary": null, "new_features_summary": null, "new_features": null, "activity_summary": null, "activity": null, "discussions_summary": "Two ongoing technical discussions about resource type safety and DNS resolution issues on Linux", "notable_discussions": "- **Resource type safety** discussion by [Mathieu Barbin](https://github.com/mbarbin) exploring ways to make Eio.Resource more robust and prevent invalid uses that lead to runtime issues, with experimental branches investigating wrapped resources and object-based approaches ([#774](https://github.com/ocaml-multicore/eio/issues/774))\n- **DNS resolution failure** investigation by [Krzysztof Leśniak](https://github.com/serpent7776) reporting that `Eio.Net.getaddrinfo_stream` fails after exactly 1019 successful calls on Linux systems, with [Simon Grondin](https://github.com/SGrondin) providing guidance on proper Switch lifecycle management ([#776](https://github.com/ocaml-multicore/eio/issues/776))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Three contributors engaged in technical discussions addressing type safety and platform-specific DNS issues", "contributors": "- [Mathieu Barbin](https://github.com/mbarbin) provided detailed analysis of type safety issues in Eio.Resource and shared experimental work on alternative approaches including wrapped resources and object-based implementations ([#774](https://github.com/ocaml-multicore/eio/issues/774))\n- [Krzysztof Leśniak](https://github.com/serpent7776) reported a specific DNS resolution bug affecting Linux systems and provided reproducible test cases ([#776](https://github.com/ocaml-multicore/eio/issues/776))\n- [Simon Grondin](https://github.com/SGrondin) offered technical guidance on Switch lifecycle management as a potential solution for resource cleanup issues ([#776](https://github.com/ocaml-multicore/eio/issues/776))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 50, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-12-09 to 2024-12-15", "start_commit": null, "end_commit": null, "brief_summary": "Stream API enhancement proposal with non-blocking operations and capacity management", "new_features_summary": null, "new_features": null, "activity_summary": "New PR opened for stream API enhancements with active design discussions", "activity": "- **Stream API enhancement** proposed by [MONTILLET Xavier](https://github.com/xavierm02) with `add_nonblocking`, `capacity`, and `is_full` methods for improved asynchronous callback handling from C code ([#790](https://github.com/ocaml-multicore/eio/issues/790))\n- **Design discussion** ongoing with [Thomas Leonard](https://github.com/talex5) providing feedback on the complexity and utility of `add_nonblocking`, suggesting simpler alternatives like length checks and highlighting that `capacity` and `is_full` methods appear useful ([#790](https://github.com/ocaml-multicore/eio/issues/790))", "discussions_summary": null, "notable_discussions": null, "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two contributors engaged in API design discussion for stream improvements", "contributors": "- [MONTILLET Xavier](https://github.com/xavierm02) opened PR for stream API enhancements to support non-blocking operations in asynchronous C callbacks ([#790](https://github.com/ocaml-multicore/eio/issues/790))\n- [Thomas Leonard](https://github.com/talex5) provided detailed code review feedback questioning the necessity of `add_nonblocking` while supporting the `capacity` and `is_full` additions ([#790](https://github.com/ocaml-multicore/eio/issues/790))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 49, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-12-02 to 2024-12-08", "start_commit": "f195295e3dc16a9fd5465a37243e434c1676e773", "end_commit": "fdd2593e33086b1a37d3afb21e669a6a77f6a37c", "brief_summary": "Two merged PRs fixed FreeBSD socket close bug and disabled problematic dune subst in build process", "new_features_summary": "FreeBSD socket close error handling improved and build process streamlined", "new_features": "- **FreeBSD socket close error handling** now automatically ignores `ECONNRESET` errors returned by FreeBSD during socket close operations, following standard practice used by Python and Ruby ([#787](https://github.com/ocaml-multicore/eio/issues/787))\n- **Build process improvement** removed unnecessary `dune subst` step that was causing benchmark installation failures with dune 3.17.0 ([#789](https://github.com/ocaml-multicore/eio/issues/789))\n- **Test infrastructure enhancement** added `ECONNRESET` error handling to dscheck test framework for comprehensive testing of the FreeBSD close behavior ([f195295](https://github.com/ocaml-multicore/eio/commit/f195295e3dc16a9fd5465a37243e434c1676e773))", "activity_summary": "Ongoing chmod support development continues with draft PR addressing file permissions in Linux and POSIX backends", "activity": "- **chmod support implementation** continues development by [Patrick Ferris](https://github.com/patricoferris) with draft PR adding file permission modification capabilities to Linux and POSIX backends ([#785](https://github.com/ocaml-multicore/eio/issues/785))\n- **Platform-specific bug fixes** completed with [Thomas Leonard](https://github.com/talex5) resolving FreeBSD socket close issues and build system problems ([#786](https://github.com/ocaml-multicore/eio/issues/786), [#787](https://github.com/ocaml-multicore/eio/issues/787), [#789](https://github.com/ocaml-multicore/eio/issues/789))", "discussions_summary": "Active debugging of parallel stdout writing issue with detailed io_uring tracing analysis", "notable_discussions": "- **Parallel stdout writing bug investigation** by [Wildfield](https://github.com/wildfield) reporting \"Interrupted system call\" errors when writing to stdout from multiple domains, with [Thomas Leonard](https://github.com/talex5) providing detailed io_uring tracing guidance and identifying the issue occurs with 2+ domains but not single domain execution ([#788](https://github.com/ocaml-multicore/eio/issues/788))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Two core maintainers active with bug fixes and ongoing feature development", "contributors": "- [Thomas Leonard](https://github.com/talex5) implemented FreeBSD socket close error handling ([#787](https://github.com/ocaml-multicore/eio/issues/787)), resolved dune subst build issues ([#789](https://github.com/ocaml-multicore/eio/issues/789)), reported and investigated FreeBSD close bug ([#786](https://github.com/ocaml-multicore/eio/issues/786)), and provided debugging assistance for parallel stdout writing issues ([#788](https://github.com/ocaml-multicore/eio/issues/788))\n- [Patrick Ferris](https://github.com/patricoferris) continued development of chmod support with ongoing draft PR for file permission capabilities ([#785](https://github.com/ocaml-multicore/eio/issues/785))\n- [Wildfield](https://github.com/wildfield) reported parallel stdout writing bug with detailed reproduction code and participated in debugging analysis ([#788](https://github.com/ocaml-multicore/eio/issues/788))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 48, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-11-25 to 2024-12-01", "start_commit": "f26d70d64265a6bed7416d3db3bd14a5e090b6d6", "end_commit": "17665689f5c06f8a6c6eddea5e1745db6a59beb9", "brief_summary": "FreeBSD compatibility fix for socket close operations and `chmod` implementation work", "new_features_summary": "FreeBSD socket close error handling improvement", "new_features": "- **FreeBSD compatibility** improvement in socket close operations to handle `ECONNRESET` errors automatically [17665689](https://github.com/ocaml-multicore/eio/commit/17665689f5c06f8a6c6eddea5e1745db6a59beb9), addressing issue [#786](https://github.com/ocaml-multicore/eio/issues/786)", "activity_summary": "One new PR opened for `chmod` support, one PR closed in favor of newer implementation", "activity": "- **New PR opened** by [Patrick Ferris](https://github.com/patricoferris) for `chmod` support in Eio_linux and Eio_posix ([#785](https://github.com/ocaml-multicore/eio/issues/785)), replacing previous implementation\n- **PR closed** by [Patrick Ferris](https://github.com/patricoferris) replacing [Daniel Marvin](https://github.com/webbunivAdmin)'s original `chmod` implementation ([#772](https://github.com/ocaml-multicore/eio/issues/772)) with tidied up version\n- **Issue opened** by [Thomas Leonard](https://github.com/talex5) reporting FreeBSD socket close behavior with `ECONNRESET` ([#786](https://github.com/ocaml-multicore/eio/issues/786))\n- **Ongoing test improvement** work by [Onah_Anthony](https://github.com/create2000) adding skip functionality ([#778](https://github.com/ocaml-multicore/eio/issues/778))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Platform compatibility improvements and file system operation enhancements", "emerging_trends": "- **Platform compatibility** focus with FreeBSD-specific fixes and cross-platform considerations for file operations\n- **File system operations** expansion with `chmod` support implementation across different backends\n- **Test infrastructure** improvements with better handling of platform-specific features", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Four contributors active with platform fixes, API enhancements, and test improvements", "contributors": "- [Thomas Leonard](https://github.com/talex5) implemented FreeBSD compatibility fix for socket close operations ([17665689](https://github.com/ocaml-multicore/eio/commit/17665689f5c06f8a6c6eddea5e1745db6a59beb9)) and opened issue documenting the FreeBSD close behavior ([#786](https://github.com/ocaml-multicore/eio/issues/786))\n- [Patrick Ferris](https://github.com/patricoferris) opened new PR for `chmod` support implementation ([#785](https://github.com/ocaml-multicore/eio/issues/785)) and closed previous implementation in favor of cleaner approach ([#772](https://github.com/ocaml-multicore/eio/issues/772))\n- [Daniel Marvin](https://github.com/webbunivAdmin) had original `chmod` implementation work superseded by improved version ([#772](https://github.com/ocaml-multicore/eio/issues/772))\n- [Onah_Anthony](https://github.com/create2000) continued work on test skip functionality with feedback from [Thomas Leonard](https://github.com/talex5) ([#778](https://github.com/ocaml-multicore/eio/issues/778))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 47, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-11-18 to 2024-11-24", "start_commit": "b41d4d8a494a1b3a375c5aab5acefc65f8640128", "end_commit": "f26d70d64265a6bed7416d3db3bd14a5e090b6d6", "brief_summary": "Released v1.2 with Windows networking fixes and OpenBSD compatibility improvements", "new_features_summary": "Windows networking fixes for getaddrinfo and connection error handling, plus OpenBSD test compatibility", "new_features": "- **Windows networking improvements** addressing hostname resolution failures through workaround for `Unix.getaddrinfo` protocol detection issues ([#780](https://github.com/ocaml-multicore/eio/issues/780))\n- **Enhanced error handling** for Windows connections by grouping `ECONNABORTED` with other connection reset errors for consistent error classification ([#783](https://github.com/ocaml-multicore/eio/issues/783))\n- **OpenBSD compatibility** improvements including bash dependency for tests and service name handling for port 80 resolution ([#782](https://github.com/ocaml-multicore/eio/issues/782))\n- **Release preparation** with comprehensive changelog update documenting v1.2 features and bug fixes ([#784](https://github.com/ocaml-multicore/eio/issues/784))", "activity_summary": "Three new PRs opened for file operations (chmod, chown) and MDX testing improvements, with v1.2 release preparation", "activity": "- **File operations expansion** with [Patrick Ferris](https://github.com/patricoferris) opening **chmod support** implementation for Linux and POSIX backends ([#785](https://github.com/ocaml-multicore/eio/issues/785)) and **chown support** for ownership changes ([#781](https://github.com/ocaml-multicore/eio/issues/781))\n- **Testing framework enhancement** by [Onah_Anthony](https://github.com/create2000) working on **MDX skip feature** addition with ongoing discussions about implementation approach ([#778](https://github.com/ocaml-multicore/eio/issues/778))\n- **Release milestone** achieved with [Thomas Leonard](https://github.com/talex5) **publishing v1.2** containing comprehensive updates including Windows backend improvements, Linux backend cancellation support, and enhanced tracing capabilities\n- **Original chmod implementation** by [Daniel Marvin](https://github.com/webbunivAdmin) was closed in favor of cleaner replacement, showing collaborative refinement of contributions ([#772](https://github.com/ocaml-multicore/eio/issues/772))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on expanding file system operations API and improving cross-platform compatibility", "emerging_trends": "- **File system API expansion** with systematic addition of missing POSIX operations like `chmod` and `chown` to match standard Unix functionality ([#781](https://github.com/ocaml-multicore/eio/issues/781), [#785](https://github.com/ocaml-multicore/eio/issues/785))\n- **Cross-platform reliability** improvements targeting specific platform issues on Windows and OpenBSD for broader ecosystem compatibility ([#780](https://github.com/ocaml-multicore/eio/issues/780), [#782](https://github.com/ocaml-multicore/eio/issues/782), [#783](https://github.com/ocaml-multicore/eio/issues/783))\n- **Collaborative code quality** with contributors iterating on implementations for cleaner, reviewable solutions rather than accepting first submissions ([#772](https://github.com/ocaml-multicore/eio/issues/772) → [#785](https://github.com/ocaml-multicore/eio/issues/785))", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Thomas Leonard led release work and Windows fixes, Patrick Ferris advanced file operations, others contributed to testing improvements", "contributors": "- [Thomas Leonard](https://github.com/talex5) **released v1.2** with comprehensive changelog updates ([#784](https://github.com/ocaml-multicore/eio/issues/784)), implemented **Windows networking fixes** for getaddrinfo problems ([#780](https://github.com/ocaml-multicore/eio/issues/780)), enhanced **connection error handling** ([#783](https://github.com/ocaml-multicore/eio/issues/783)), and improved **OpenBSD test compatibility** ([#782](https://github.com/ocaml-multicore/eio/issues/782))\n- [Patrick Ferris](https://github.com/patricoferris) opened two **file operation PRs** implementing chmod support ([#785](https://github.com/ocaml-multicore/eio/issues/785)) and chown functionality ([#781](https://github.com/ocaml-multicore/eio/issues/781)), providing comprehensive API expansions for file permission management\n- [Onah_Anthony](https://github.com/create2000) continued work on **MDX testing enhancements** by adding skip feature support ([#778](https://github.com/ocaml-multicore/eio/issues/778)) and engaging in discussions about implementation approach\n- [Daniel Marvin](https://github.com/webbunivAdmin) had original chmod implementation work ([#772](https://github.com/ocaml-multicore/eio/issues/772)) superseded by cleaner replacement, demonstrating collaborative improvement process", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 46, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-11-11 to 2024-11-17", "start_commit": "61f738df51b47d8bd43a551fc11f9b646f995512", "end_commit": "9b939abeddc797d10a540903e5426432db80bacb", "brief_summary": "Backtrace preservation improvements merged with ongoing development in chmod support and test skipping functionality", "new_features_summary": "Improved error debugging with preserved backtraces in fork_daemon and fork_promise_exn functions", "new_features": "- **Backtrace preservation** in fork operations for better error debugging, ensuring backtraces are captured when fibers fail in `fork_daemon` and `fork_promise_exn` functions ([#779](https://github.com/ocaml-multicore/eio/issues/779))", "activity_summary": "Two ongoing development efforts for chmod support and test framework improvements with extensive community discussion", "activity": "- **Chmod support implementation** by [Daniel Marvin](https://github.com/webbunivAdmin) adding file permission modification capabilities through new chmod function with symlink handling and robust error reporting ([#772](https://github.com/ocaml-multicore/eio/issues/772))\n- **Test framework enhancements** by [Onah_Anthony](https://github.com/create2000) implementing skip functionality for io_uring tests in Docker environments with Alcotest integration ([#778](https://github.com/ocaml-multicore/eio/issues/778))", "discussions_summary": "Technical guidance provided on test skipping patterns and error handling approaches for Docker compatibility", "notable_discussions": "- **Test skipping methodology** discussion between [Patrick Ferris](https://github.com/patricoferris), [Thomas Leonard](https://github.com/talex5), and [Onah_Anthony](https://github.com/create2000) covering proper Alcotest skip usage and error message handling for io_uring availability detection ([#778](https://github.com/ocaml-multicore/eio/issues/778))\n- **Git history cleanup** guidance from [Patrick Ferris](https://github.com/patricoferris) to [Daniel Marvin](https://github.com/webbunivAdmin) regarding commit squashing and force-push practices for cleaner PR review ([#772](https://github.com/ocaml-multicore/eio/issues/772))", "trends_summary": null, "emerging_trends": null, "issues_summary": null, "good_first_issues": null, "contributors_summary": "Thomas Leonard merged backtrace improvements while Daniel Marvin and Onah_Anthony continued development on filesystem and testing features", "contributors": "- [Thomas Leonard](https://github.com/talex5) implemented and merged **backtrace preservation** fixes for fork operations, improving error debugging capabilities ([#779](https://github.com/ocaml-multicore/eio/issues/779))\n- [Daniel Marvin](https://github.com/webbunivAdmin) developed **chmod support** implementation with comprehensive file permission handling, responding to review feedback on git history cleanup ([#772](https://github.com/ocaml-multicore/eio/issues/772))\n- [Onah_Anthony](https://github.com/create2000) worked on **test framework improvements** implementing skip functionality for Docker environments, engaging in technical discussions about proper error handling ([#778](https://github.com/ocaml-multicore/eio/issues/778))\n- [Patrick Ferris](https://github.com/patricoferris) provided **code review and mentoring** across multiple PRs, offering guidance on git practices, test frameworks, and development workflows ([#772](https://github.com/ocaml-multicore/eio/issues/772), [#778](https://github.com/ocaml-multicore/eio/issues/778))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 45, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-11-04 to 2024-11-10", "start_commit": null, "end_commit": null, "brief_summary": "Development focused on ongoing PR discussions for process API improvements and chmod implementation without merged commits", "new_features_summary": null, "new_features": null, "activity_summary": "Two ongoing PRs received updates: chmod implementation by Daniel Marvin and process pipe type relaxation by Isaac Arogbonlo", "activity": "- **Process API type improvements** by [Isaac Arogbonlo](https://github.com/Arogbonlo) with ongoing work to relax return types of `Eio.Process.Pipe` functions for broader compatibility ([#775](https://github.com/ocaml-multicore/eio/issues/775))\n- **File permissions implementation** by [Daniel Marvin](https://github.com/webbunivAdmin) attempting to add `chmod` support with 130 additions across 15 files, though facing integration challenges ([#772](https://github.com/ocaml-multicore/eio/issues/772))", "discussions_summary": "Technical discussions around type safety in Eio.Resource patterns and buffer write back-pressure design considerations", "notable_discussions": "- **Resource type safety** discussion by [Mathieu Barbin](https://github.com/mbarbin) exploring potential type safety issues with `Eio.Resource` patterns and `Obj.magic` usage, including detailed examples of problematic type coercions ([#774](https://github.com/ocaml-multicore/eio/issues/774))\n- **Buffer write back-pressure** design considerations raised by [Thomas Leonard](https://github.com/talex5) regarding memory management in `Buf_write` operations and implementation approaches for flow control ([#760](https://github.com/ocaml-multicore/eio/issues/760))", "trends_summary": "Focus on API robustness with type safety improvements and process handling enhancements", "emerging_trends": "- **Type safety improvements** with ongoing investigation into making resource patterns more robust against runtime type errors\n- **Process API flexibility** through relaxed type constraints to support broader use cases in process management\n- **File system operations expansion** with attempts to add missing POSIX operations like chmod to the core API", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Four contributors engaged with type safety discussions, API improvements, and file system feature implementation", "contributors": "- [Mathieu Barbin](https://github.com/mbarbin) initiated detailed discussion on type safety concerns in `Eio.Resource` patterns with code examples demonstrating potential runtime issues ([#774](https://github.com/ocaml-multicore/eio/issues/774))\n- [Isaac Arogbonlo](https://github.com/Arogbonlo) worked on relaxing process pipe type constraints and addressed build failures in the implementation ([#775](https://github.com/ocaml-multicore/eio/issues/775))\n- [Daniel Marvin](https://github.com/webbunivAdmin) implemented chmod functionality across multiple files with exception handling and resource integration ([#772](https://github.com/ocaml-multicore/eio/issues/772))\n- [Thomas Leonard](https://github.com/talex5) provided guidance on buffer write back-pressure implementation complexity and alternative approaches ([#760](https://github.com/ocaml-multicore/eio/issues/760))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 44, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-10-28 to 2024-11-03", "start_commit": null, "end_commit": null, "brief_summary": "Two new issues opened addressing resource type safety and network resolution, with three new PRs for Windows testing, process type flexibility, and test improvements", "new_features_summary": null, "new_features": null, "activity_summary": "New PRs opened for Windows test suite, process pipe type relaxation, and network test skipping, with ongoing work on chmod implementation", "activity": "- **Windows testing improvements** with [Richard Chukwu](https://github.com/RichardChukwu) opening [#773](https://github.com/ocaml-multicore/eio/issues/773) to get main test suite running on Windows, addressing MDX stack overflow issues and test compatibility\n- **Process API flexibility enhancements** by [Isaac Arogbonlo](https://github.com/Arogbonlo) with [#775](https://github.com/ocaml-multicore/eio/issues/775) to relax return types of `Eio.Process.Pipe` for broader compatibility with Flow types\n- **Test infrastructure work** by [Onah_Anthony](https://github.com/create2000) with [#778](https://github.com/ocaml-multicore/eio/issues/778) adding skip functionality for network tests when network is unavailable\n- **chmod implementation** by [Daniel Marvin](https://github.com/webbunivAdmin) with [#772](https://github.com/ocaml-multicore/eio/issues/772) closed after extensive review and testing iterations, addressing file permission support in Eio\n- **Type safety improvements** closed PR [#770](https://github.com/ocaml-multicore/eio/issues/770) by [Isaac Arogbonlo](https://github.com/Arogbonlo) and [#777](https://github.com/ocaml-multicore/eio/issues/777) by [Onah_Anthony](https://github.com/create2000) replaced with updated versions", "discussions_summary": "Deep technical discussions on resource type safety challenges and network resolution debugging with maintainer guidance", "notable_discussions": "- **Resource type safety analysis** by [Mathieu Barbin](https://github.com/mbarbin) in [#774](https://github.com/ocaml-multicore/eio/issues/774) exploring `Obj.magic` safety issues in `Eio.Resource` with collaborative investigation by [@v-gb](https://github.com/v-gb) and potential solutions using `Provider.Trait.Create` approach\n- **Network resolution debugging** by [Krzysztof Leśniak](https://github.com/serpent7776) in [#776](https://github.com/ocaml-multicore/eio/issues/776) identifying Linux-specific `getaddrinfo_stream` failure after 1019 connections, with [Patrick Ferris](https://github.com/patricoferris) and [Thomas Leonard](https://github.com/talex5) providing switch management guidance\n- **MDX stack overflow investigation** across [#773](https://github.com/ocaml-multicore/eio/issues/773) with [Thomas Leonard](https://github.com/talex5) guiding [Richard Chukwu](https://github.com/RichardChukwu) through systematic debugging of Windows-specific MDX parsing issues", "trends_summary": "Focus on Windows compatibility, type system improvements, and infrastructure robustness with multiple new contributors", "emerging_trends": "- **Windows platform support** becoming a priority with dedicated efforts to resolve test suite compatibility and MDX parsing issues on Windows systems\n- **Type system refinements** with ongoing work to improve type safety in resource handling and process APIs while maintaining ergonomics\n- **New contributor engagement** with multiple first-time contributors working on infrastructure improvements and receiving detailed mentoring from maintainers\n- **Testing infrastructure** enhancements including network test reliability and cross-platform compatibility improvements", "issues_summary": null, "good_first_issues": null, "contributors_summary": "Seven contributors active with maintainers providing extensive code review and technical guidance to new contributors on Windows testing and type system improvements", "contributors": "- [Mathieu Barbin](https://github.com/mbarbin) opened [#774](https://github.com/ocaml-multicore/eio/issues/774) exploring type safety improvements for `Eio.Resource` and initiated collaborative investigation with detailed analysis of `Obj.magic` usage patterns\n- [Krzysztof Leśniak](https://github.com/serpent7776) reported [#776](https://github.com/ocaml-multicore/eio/issues/776) with detailed reproduction case for network resolution issues and engaged in debugging discussions\n- [Richard Chukwu](https://github.com/RichardChukwu) opened [#773](https://github.com/ocaml-multicore/eio/issues/773) for Windows test suite compatibility and participated in extensive MDX debugging sessions with maintainer guidance\n- [Isaac Arogbonlo](https://github.com/Arogbonlo) worked on process API improvements with [#775](https://github.com/ocaml-multicore/eio/issues/775) and [#770](https://github.com/ocaml-multicore/eio/issues/770), receiving detailed type system guidance from maintainers\n- [Onah_Anthony](https://github.com/create2000) contributed test infrastructure improvements with [#778](https://github.com/ocaml-multicore/eio/issues/778) and [#777](https://github.com/ocaml-multicore/eio/issues/777), learning Git workflow best practices\n- [Daniel Marvin](https://github.com/webbunivAdmin) implemented chmod support in [#772](https://github.com/ocaml-multicore/eio/issues/772) through multiple iterations with extensive review feedback and testing guidance\n- [Thomas Leonard](https://github.com/talex5) provided technical leadership across all active PRs and issues, offering detailed code review, architectural guidance, and debugging support\n- [Patrick Ferris](https://github.com/patricoferris) contributed code review and mentoring across multiple PRs, particularly helping with testing approaches and Git workflow improvements", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 43, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-10-21 to 2024-10-27", "start_commit": "eb8fe3ef822ea36aa54b432f15534037e2ab0c02", "end_commit": "eb8fe3ef822ea36aa54b432f15534037e2ab0c02", "brief_summary": "Windows compatibility improvements merged with symlink detection enhancement and new PRs for chmod support and test suite fixes", "new_features_summary": "Enhanced Windows test compatibility with symlink detection to skip unsupported operations gracefully", "new_features": "- **Windows symlink detection** enhancement that checks `Unix.has_symlink()` before running symlink tests, preventing failures on systems without symlink support ([#771](https://github.com/ocaml-multicore/eio/issues/771))\n- Added missing **test registry entry** for `test_mkdirs` function to ensure comprehensive test coverage ([eb8fe3e](https://github.com/ocaml-multicore/eio/commit/eb8fe3ef822ea36aa54b432f15534037e2ab0c02))", "activity_summary": "Two new PRs opened for Windows test suite and chmod implementation, with ongoing Windows compatibility work", "activity": "- **Windows test suite compatibility** work by [Richard Chukwu](https://github.com/RichardChukwu) opened comprehensive PR to enable main test suite on Windows platform, revealing MDX parsing issues with stack overflow errors requiring further investigation ([#773](https://github.com/ocaml-multicore/eio/issues/773))\n- **Chmod functionality implementation** by [Daniel Marvin](https://github.com/webbunivAdmin) opened PR adding file permission changing capabilities with `chmod` function supporting follow symlinks and permission bit parameters ([#772](https://github.com/ocaml-multicore/eio/issues/772))\n- **Process pipe type improvements** by [Isaac Arogbonlo](https://github.com/Arogbonlo) saw extensive review discussions about type casting and API changes, ultimately closed after review feedback about reverting unnecessary changes ([#770](https://github.com/ocaml-multicore/eio/issues/770))\n- **Network test skipping** implementation by [Onah_Anthony](https://github.com/create2000) started as work-in-progress for handling unavailable network conditions, closed with conflicting merge status ([#777](https://github.com/ocaml-multicore/eio/issues/777))\n- **Windows symlink test fix** by [Onah_Anthony](https://github.com/create2000) successfully merged early in week providing foundation for current Windows compatibility improvements ([#771](https://github.com/ocaml-multicore/eio/issues/771))", "discussions_summary": "Active discussions around Windows platform support challenges and development workflow improvements", "notable_discussions": "- **Windows MDX compatibility** issues revealed by [Richard Chukwu](https://github.com/RichardChukwu) when enabling test suite, with [Thomas Leonard](https://github.com/talex5) providing guidance on isolating parsing problems for upstream MDX bug reports ([#773](https://github.com/ocaml-multicore/eio/issues/773))\n- **Code attribution practices** discussion by [Patrick Ferris](https://github.com/patricoferris) regarding proper co-authored commits and cherry-picking from existing branches, emphasizing open source contribution etiquette ([#772](https://github.com/ocaml-multicore/eio/issues/772))\n- **Type system flexibility** extensive review conversations between [Patrick Ferris](https://github.com/patricoferris), [Thomas Leonard](https://github.com/talex5), and [Isaac Arogbonlo](https://github.com/Arogbonlo) about minimizing API changes while achieving type relaxation goals ([#770](https://github.com/ocaml-multicore/eio/issues/770))\n- **Windows path handling** ongoing architectural discussion between [Thomas Leonard](https://github.com/talex5) and [David Allsopp](https://github.com/dra27) about uniform path representation challenges and potential filesystem-specific solutions ([#762](https://github.com/ocaml-multicore/eio/issues/762))", "trends_summary": "Strong focus on Windows platform compatibility and cross-platform testing infrastructure improvements", "emerging_trends": "- **Windows platform prioritization** with multiple contributors working on test suite compatibility, symlink handling, and platform-specific behaviors ([#773](https://github.com/ocaml-multicore/eio/issues/773), [#771](https://github.com/ocaml-multicore/eio/issues/771), [#762](https://github.com/ocaml-multicore/eio/issues/762))\n- **Test infrastructure robustness** improvements focusing on graceful handling of unsupported features and environment-specific failures ([#275](https://github.com/ocaml-multicore/eio/issues/275), [#777](https://github.com/ocaml-multicore/eio/issues/777))\n- **Filesystem API expansion** with chmod implementation representing broader effort to provide comprehensive file system operation support ([#772](https://github.com/ocaml-multicore/eio/issues/772))\n- **Community engagement growth** with multiple new contributors tackling good first issues and receiving detailed mentorship from maintainers", "issues_summary": "Three good first issues available focusing on Windows testing, network test improvements, and stress testing", "good_first_issues": "- **Windows test suite enablement** requiring investigation of MDX behavior on Windows platform and documenting test failures for targeted fixes ([#761](https://github.com/ocaml-multicore/eio/issues/761))\n- **Network test skipping** enhancement needing MDX extension development to handle unavailable network conditions in Docker and CI environments ([#275](https://github.com/ocaml-multicore/eio/issues/275))\n- **Stress testing and benchmarks** expansion opportunity for contributors to develop resource leak detection and performance analysis tools ([#450](https://github.com/ocaml-multicore/eio/issues/450))", "contributors_summary": "Six contributors active with code submissions, reviews, and architectural discussions spanning Windows compatibility and API improvements", "contributors": "- [Onah_Anthony](https://github.com/create2000) successfully merged Windows symlink detection fix ([#771](https://github.com/ocaml-multicore/eio/issues/771)) and initiated network test skipping work ([#777](https://github.com/ocaml-multicore/eio/issues/777)), while engaging in good first issue discussions ([#275](https://github.com/ocaml-multicore/eio/issues/275))\n- [Richard Chukwu](https://github.com/RichardChukwu) opened Windows test suite PR investigating MDX parsing issues and provided detailed observations about stack overflow errors ([#773](https://github.com/ocaml-multicore/eio/issues/773))\n- [Daniel Marvin](https://github.com/webbunivAdmin) implemented chmod functionality with comprehensive support for file permissions and symlink following ([#772](https://github.com/ocaml-multicore/eio/issues/772))\n- [Isaac Arogbonlo](https://github.com/Arogbonlo) worked on process pipe type improvements with extensive engagement in review discussions about API design decisions ([#770](https://github.com/ocaml-multicore/eio/issues/770))\n- [Thomas Leonard](https://github.com/talex5) provided technical guidance across multiple PRs, reviewed Windows compatibility changes, and engaged in architectural discussions about path handling ([#773](https://github.com/ocaml-multicore/eio/issues/773), [#762](https://github.com/ocaml-multicore/eio/issues/762))\n- [Patrick Ferris](https://github.com/patricoferris) conducted thorough code reviews, provided feedback on contribution practices, and guided API design discussions ([#772](https://github.com/ocaml-multicore/eio/issues/772), [#770](https://github.com/ocaml-multicore/eio/issues/770))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}, {"week": 42, "year": 2024, "repo": "ocaml-multicore/eio", "week_range": "2024-10-14 to 2024-10-20", "start_commit": "dd13303a4ab380d72259c51bbdc4ec178ef91dc3", "end_commit": "eb8fe3ef822ea36aa54b432f15534037e2ab0c02", "brief_summary": "Fork action header exposed for external libraries and Windows symlink test improvements merged", "new_features_summary": "Made fork_action.h public header for external libraries and improved Windows symlink test compatibility", "new_features": "- **Public header exposure** for `fork_action.h` enabling external libraries to provide new fork actions by [Patrick Ferris](https://github.com/patricoferris) ([#769](https://github.com/ocaml-multicore/eio/issues/769))\n- **Windows symlink test compatibility** check using `Unix.has_symlink()` to skip symlink tests on systems without support by [Onah_Anthony](https://github.com/create2000) ([#771](https://github.com/ocaml-multicore/eio/issues/771))", "activity_summary": "New PRs opened for Process.pipe type relaxation and Windows test improvements, ongoing Windows compatibility work", "activity": "- **New PRs opened** include Process.pipe type relaxation by [Isaac Arogbonlo](https://github.com/Arogbonlo) ([#767](https://github.com/ocaml-multicore/eio/issues/767), [#770](https://github.com/ocaml-multicore/eio/issues/770)) and Windows symlink test improvements by [Onah_Anthony](https://github.com/create2000) ([#766](https://github.com/ocaml-multicore/eio/issues/766), [#768](https://github.com/ocaml-multicore/eio/issues/768))\n- **Windows compatibility** work continues with native implementation attempts by [Kento Okura](https://github.com/kentookura) ([#738](https://github.com/ocaml-multicore/eio/issues/738)) and test suite enablement efforts ([#761](https://github.com/ocaml-multicore/eio/issues/761))\n- **Type system improvements** discussed around `Eio.Process.pipe` return types for better API compatibility with monomorphic types ([#750](https://github.com/ocaml-multicore/eio/issues/750))", "discussions_summary": null, "notable_discussions": null, "trends_summary": "Focus on Windows compatibility and type system flexibility for better external library integration", "emerging_trends": "- **Windows platform support** receiving increased attention with multiple contributors working on test compatibility ([#761](https://github.com/ocaml-multicore/eio/issues/761), [#766](https://github.com/ocaml-multicore/eio/issues/766), [#768](https://github.com/ocaml-multicore/eio/issues/768), [#771](https://github.com/ocaml-multicore/eio/issues/771), [#738](https://github.com/ocaml-multicore/eio/issues/738))\n- **External library integration** improvements with public header exposure for fork actions ([#769](https://github.com/ocaml-multicore/eio/issues/769))\n- **Type system flexibility** work to improve API compatibility between Eio and external libraries like Cohttp ([#750](https://github.com/ocaml-multicore/eio/issues/750), [#767](https://github.com/ocaml-multicore/eio/issues/767), [#770](https://github.com/ocaml-multicore/eio/issues/770))", "issues_summary": "Three good first issues available covering Windows testing, chmod implementation, and Process.pipe type improvements", "good_first_issues": "- **Windows test suite enablement** ([#761](https://github.com/ocaml-multicore/eio/issues/761)) by [Thomas Leonard](https://github.com/talex5) with guidance on incrementally enabling MDX tests on Windows platform\n- **Chmod support implementation** ([#764](https://github.com/ocaml-multicore/eio/issues/764)) by [Patrick Ferris](https://github.com/patricoferris) with existing foundation work available and interest from [@webbunivAdmin](https://github.com/webbunivAdmin)\n- **Process.pipe return type relaxation** ([#750](https://github.com/ocaml-multicore/eio/issues/750)) by [Rizo](https://github.com/rizo) to improve compatibility with monomorphic API types, with ongoing implementation work by [Isaac Arogbonlo](https://github.com/Arogbonlo)", "contributors_summary": "Patrick Ferris led development with merged PRs, Onah_Anthony contributed Windows test fixes, Isaac Arogbonlo worked on type system improvements", "contributors": "- [Patrick Ferris](https://github.com/patricoferris) merged fork action header exposure ([#769](https://github.com/ocaml-multicore/eio/issues/769)) and provided extensive code review guidance across multiple PRs including Process.pipe work ([#767](https://github.com/ocaml-multicore/eio/issues/767), [#770](https://github.com/ocaml-multicore/eio/issues/770)) and Windows compatibility efforts ([#766](https://github.com/ocaml-multicore/eio/issues/766), [#768](https://github.com/ocaml-multicore/eio/issues/768))\n- [Onah_Anthony](https://github.com/create2000) successfully merged Windows symlink test improvements ([#771](https://github.com/ocaml-multicore/eio/issues/771)) after iterative refinement and opened multiple related PRs ([#766](https://github.com/ocaml-multicore/eio/issues/766), [#768](https://github.com/ocaml-multicore/eio/issues/768))\n- [Isaac Arogbonlo](https://github.com/Arogbonlo) opened two PRs working on Process.pipe type relaxation ([#767](https://github.com/ocaml-multicore/eio/issues/767), [#770](https://github.com/ocaml-multicore/eio/issues/770)) and engaged in detailed technical discussions about type system improvements\n- [Thomas Leonard](https://github.com/talex5) provided technical guidance on type casting approaches and Process.pipe implementation details ([#770](https://github.com/ocaml-multicore/eio/issues/770)) and approved the fork action header change ([#769](https://github.com/ocaml-multicore/eio/issues/769))\n- [Richard Chukwu](https://github.com/RichardChukwu) reported testing findings for Windows compatibility work ([#761](https://github.com/ocaml-multicore/eio/issues/761)) and [@oyenuga17](https://github.com/oyenuga17) provided coordination support\n- [Daniel Marvin](https://github.com/webbunivAdmin) expressed interest in contributing to chmod implementation ([#764](https://github.com/ocaml-multicore/eio/issues/764))", "org": "ocaml-multicore", "repo_name": "eio", "repo_full": "ocaml-multicore/eio"}]}